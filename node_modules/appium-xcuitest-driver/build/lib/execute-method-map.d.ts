export declare const executeMethodMap: {
    readonly 'mobile: tap': {
        readonly command: "mobileTap";
        readonly params: {
            readonly required: readonly ["x", "y"];
            readonly optional: readonly ["elementId"];
        };
    };
    readonly 'mobile: scroll': {
        readonly command: "mobileScroll";
        readonly params: {
            readonly optional: readonly ["name", "direction", "predicateString", "toVisible", "distance", "elementId"];
        };
    };
    readonly 'mobile: selectPickerWheelValue': {
        readonly command: "mobileSelectPickerWheelValue";
        readonly params: {
            readonly required: readonly ["elementId", "order"];
            readonly optional: readonly ["offset"];
        };
    };
    readonly 'mobile: sendMemoryWarning': {
        readonly command: "mobileSendMemoryWarning";
        readonly params: {
            readonly required: readonly ["bundleId"];
        };
    };
    readonly 'mobile: swipe': {
        readonly command: "mobileSwipe";
        readonly params: {
            readonly required: readonly ["direction"];
            readonly optional: readonly ["velocity", "elementId"];
        };
    };
    readonly 'mobile: pinch': {
        readonly command: "mobilePinch";
        readonly params: {
            readonly required: readonly ["scale", "velocity"];
            readonly optional: readonly ["elementId"];
        };
    };
    readonly 'mobile: doubleTap': {
        readonly command: "mobileDoubleTap";
        readonly params: {
            readonly optional: readonly ["elementId", "x", "y"];
        };
    };
    readonly 'mobile: twoFingerTap': {
        readonly command: "mobileTwoFingerTap";
        readonly params: {
            readonly optional: readonly ["elementId"];
        };
    };
    readonly 'mobile: tapWithNumberOfTaps': {
        readonly command: "mobileTapWithNumberOfTaps";
        readonly params: {
            readonly optional: readonly ["numberOfTouches", "numberOfTaps", "elementId"];
        };
    };
    readonly 'mobile: touchAndHold': {
        readonly command: "mobileTouchAndHold";
        readonly params: {
            readonly required: readonly ["duration"];
            readonly optional: readonly ["x", "y", "elementId"];
        };
    };
    readonly 'mobile: dragFromToForDuration': {
        readonly command: "mobileDragFromToForDuration";
        readonly params: {
            readonly required: readonly ["duration", "fromX", "fromY", "toX", "toY"];
            readonly optional: readonly ["elementId"];
        };
    };
    readonly 'mobile: rotateElement': {
        readonly command: "mobileRotateElement";
        readonly params: {
            readonly required: readonly ["rotation", "velocity"];
            readonly optional: readonly ["elementId"];
        };
    };
    readonly 'mobile: dragFromToWithVelocity': {
        readonly command: "mobileDragFromToWithVelocity";
        readonly params: {
            readonly required: readonly ["pressDuration", "holdDuration", "velocity"];
            readonly optional: readonly ["fromElementId", "toElementId", "fromX", "fromY", "toX", "toY"];
        };
    };
    readonly 'mobile: forcePress': {
        readonly command: "mobileForcePress";
        readonly params: {
            readonly optional: readonly ["x", "y", "duration", "pressure", "elementId"];
        };
    };
    readonly 'mobile: scrollToElement': {
        readonly command: "mobileScrollToElement";
        readonly params: {
            readonly required: readonly ["elementId"];
        };
    };
    readonly 'mobile: alert': {
        readonly command: "mobileHandleAlert";
        readonly params: {
            readonly required: readonly ["action"];
            readonly optional: readonly ["buttonLabel"];
        };
    };
    readonly 'mobile: setPasteboard': {
        readonly command: "mobileSetPasteboard";
        readonly params: {
            readonly required: readonly ["content"];
            readonly optional: readonly ["encoding"];
        };
    };
    readonly 'mobile: getPasteboard': {
        readonly command: "mobileGetPasteboard";
        readonly params: {
            readonly optional: readonly ["encoding"];
        };
    };
    readonly 'mobile: source': {
        readonly command: "mobileGetSource";
        readonly params: {
            readonly optional: readonly ["format", "excludedAttributes"];
        };
    };
    readonly 'mobile: getAppStrings': {
        readonly command: "getStrings";
        readonly params: {
            readonly optional: readonly ["language", "stringFile"];
        };
    };
    readonly 'mobile: getContexts': {
        readonly command: "mobileGetContexts";
        readonly params: {
            readonly optional: readonly ["waitForWebviewMs"];
        };
    };
    readonly 'mobile: installApp': {
        readonly command: "mobileInstallApp";
        readonly params: {
            readonly required: readonly ["app"];
            readonly optional: readonly ["timeoutMs", "checkVersion"];
        };
    };
    readonly 'mobile: isAppInstalled': {
        readonly command: "mobileIsAppInstalled";
        readonly params: {
            readonly required: readonly ["bundleId"];
        };
    };
    readonly 'mobile: removeApp': {
        readonly command: "mobileRemoveApp";
        readonly params: {
            readonly required: readonly ["bundleId"];
        };
    };
    readonly 'mobile: launchApp': {
        readonly command: "mobileLaunchApp";
        readonly params: {
            readonly required: readonly ["bundleId"];
            readonly optional: readonly ["arguments", "environment"];
        };
    };
    readonly 'mobile: terminateApp': {
        readonly command: "mobileTerminateApp";
        readonly params: {
            readonly required: readonly ["bundleId"];
        };
    };
    readonly 'mobile: killApp': {
        readonly command: "mobileKillApp";
        readonly params: {
            readonly required: readonly ["bundleId"];
        };
    };
    readonly 'mobile: queryAppState': {
        readonly command: "mobileQueryAppState";
        readonly params: {
            readonly required: readonly ["bundleId"];
        };
    };
    readonly 'mobile: activateApp': {
        readonly command: "mobileActivateApp";
        readonly params: {
            readonly required: readonly ["bundleId"];
        };
    };
    readonly 'mobile: listApps': {
        readonly command: "mobileListApps";
        readonly params: {
            readonly optional: readonly ["applicationType"];
        };
    };
    readonly 'mobile: clearApp': {
        readonly command: "mobileClearApp";
        readonly params: {
            readonly required: readonly ["bundleId"];
        };
    };
    readonly 'mobile: viewportScreenshot': {
        readonly command: "getViewportScreenshot";
    };
    readonly 'mobile: viewportRect': {
        readonly command: "getViewportRect";
    };
    readonly 'mobile: startPerfRecord': {
        readonly command: "mobileStartPerfRecord";
        readonly params: {
            readonly optional: readonly ["timeout", "profileName", "pid"];
        };
    };
    readonly 'mobile: stopPerfRecord': {
        readonly command: "mobileStopPerfRecord";
        readonly params: {
            readonly optional: readonly ["remotePath", "user", "pass", "method", "profileName", "headers", "fileFieldName", "formFields"];
        };
    };
    readonly 'mobile: installCertificate': {
        readonly command: "mobileInstallCertificate";
        readonly params: {
            readonly required: readonly ["content"];
            readonly optional: readonly ["commonName", "isRoot"];
        };
    };
    readonly 'mobile: removeCertificate': {
        readonly command: "mobileRemoveCertificate";
        readonly params: {
            readonly required: readonly ["name"];
        };
    };
    readonly 'mobile: listCertificates': {
        readonly command: "mobileListCertificates";
    };
    readonly 'mobile: startLogsBroadcast': {
        readonly command: "mobileStartLogsBroadcast";
    };
    readonly 'mobile: stopLogsBroadcast': {
        readonly command: "mobileStopLogsBroadcast";
    };
    readonly 'mobile: batteryInfo': {
        readonly command: "mobileGetBatteryInfo";
    };
    readonly 'mobile: performAccessibilityAudit': {
        readonly command: "mobilePerformAccessibilityAudit";
        readonly params: {
            readonly optional: readonly ["auditTypes"];
        };
    };
    readonly 'mobile: deviceInfo': {
        readonly command: "mobileGetDeviceInfo";
    };
    readonly 'mobile: getDeviceTime': {
        readonly command: "mobileGetDeviceTime";
        readonly params: {
            readonly optional: readonly ["format"];
        };
    };
    readonly 'mobile: activeAppInfo': {
        readonly command: "mobileGetActiveAppInfo";
    };
    readonly 'mobile: deviceScreenInfo': {
        readonly command: "getScreenInfo";
    };
    readonly 'mobile: pressButton': {
        readonly command: "mobilePressButton";
        readonly params: {
            readonly required: readonly ["name"];
            readonly optional: readonly ["durationSeconds"];
        };
    };
    readonly 'mobile: enrollBiometric': {
        readonly command: "mobileEnrollBiometric";
        readonly params: {
            readonly optional: readonly ["isEnabled"];
        };
    };
    readonly 'mobile: sendBiometricMatch': {
        readonly command: "mobileSendBiometricMatch";
        readonly params: {
            readonly optional: readonly ["type", "match"];
        };
    };
    readonly 'mobile: isBiometricEnrolled': {
        readonly command: "mobileIsBiometricEnrolled";
    };
    readonly 'mobile: clearKeychains': {
        readonly command: "mobileClearKeychains";
    };
    readonly 'mobile: getPermission': {
        readonly command: "mobileGetPermission";
        readonly params: {
            readonly required: readonly ["bundleId", "service"];
        };
    };
    readonly 'mobile: setPermission': {
        readonly command: "mobileSetPermissions";
        readonly params: {
            readonly required: readonly ["access", "bundleId"];
        };
    };
    readonly 'mobile: resetPermission': {
        readonly command: "mobileResetPermission";
        readonly params: {
            readonly required: readonly ["service"];
        };
    };
    readonly 'mobile: getAppearance': {
        readonly command: "mobileGetAppearance";
    };
    readonly 'mobile: setAppearance': {
        readonly command: "mobileSetAppearance";
        readonly params: {
            readonly required: readonly ["style"];
        };
    };
    readonly 'mobile: getClipboard': {
        readonly command: "getClipboard";
        readonly params: {
            readonly optional: readonly ["contentType"];
        };
    };
    readonly 'mobile: setClipboard': {
        readonly command: "setClipboard";
        readonly params: {
            readonly required: readonly ["content"];
            readonly optional: readonly ["contentType"];
        };
    };
    readonly 'mobile: siriCommand': {
        readonly command: "mobileSiriCommand";
        readonly params: {
            readonly required: readonly ["text"];
        };
    };
    readonly 'mobile: pushFile': {
        readonly command: "mobilePushFile";
        readonly params: {
            readonly required: readonly ["remotePath", "payload"];
        };
    };
    readonly 'mobile: pullFile': {
        readonly command: "mobilePullFile";
        readonly params: {
            readonly required: readonly ["remotePath"];
        };
    };
    readonly 'mobile: pullFolder': {
        readonly command: "mobilePullFolder";
        readonly params: {
            readonly required: readonly ["remotePath"];
        };
    };
    readonly 'mobile: deleteFile': {
        readonly command: "mobileDeleteFile";
        readonly params: {
            readonly required: readonly ["remotePath"];
        };
    };
    readonly 'mobile: deleteFolder': {
        readonly command: "mobileDeleteFolder";
        readonly params: {
            readonly required: readonly ["remotePath"];
        };
    };
    readonly 'mobile: runXCTest': {
        readonly command: "mobileRunXCTest";
        readonly params: {
            readonly required: readonly ["testRunnerBundleId", "appUnderTestBundleId", "xctestBundleId"];
            readonly optional: readonly ["args", "testType", "env", "timeout"];
        };
    };
    readonly 'mobile: installXCTestBundle': {
        readonly command: "mobileInstallXCTestBundle";
        readonly params: {
            readonly required: readonly ["xctestApp"];
        };
    };
    readonly 'mobile: listXCTestBundles': {
        readonly command: "mobileListXCTestBundles";
    };
    readonly 'mobile: listXCTestsInTestBundle': {
        readonly command: "mobileListXCTestsInTestBundle";
        readonly params: {
            readonly required: readonly ["bundle"];
        };
    };
    readonly 'mobile: startXCTestScreenRecording': {
        readonly command: "mobileStartXctestScreenRecording";
        readonly params: {
            readonly optional: readonly ["fps", "codec"];
        };
    };
    readonly 'mobile: getXCTestScreenRecordingInfo': {
        readonly command: "mobileGetXctestScreenRecordingInfo";
    };
    readonly 'mobile: stopXCTestScreenRecording': {
        readonly command: "mobileStopXctestScreenRecording";
        readonly params: {
            readonly optional: readonly ["remotePath", "user", "pass", "headers", "fileFieldName", "formFields", "method"];
        };
    };
    readonly 'mobile: pushNotification': {
        readonly command: "mobilePushNotification";
        readonly params: {
            readonly required: readonly ["bundleId", "payload"];
        };
    };
    readonly 'mobile: expectNotification': {
        readonly command: "mobileExpectNotification";
        readonly params: {
            readonly required: readonly ["name"];
            readonly optional: readonly ["type", "timeoutSeconds"];
        };
    };
    readonly 'mobile: performIoHidEvent': {
        readonly command: "mobilePerformIoHidEvent";
        readonly params: {
            readonly required: readonly ["page", "usage", "durationSeconds"];
        };
    };
    readonly 'mobile: configureLocalization': {
        readonly command: "mobileConfigureLocalization";
        readonly params: {
            readonly optional: readonly ["keyboard", "language", "locale"];
        };
    };
    readonly 'mobile: resetLocationService': {
        readonly command: "mobileResetLocationService";
    };
    readonly 'mobile: startPcap': {
        readonly command: "mobileStartPcap";
        readonly params: {
            readonly optional: readonly ["timeLimitSec", "forceRestart"];
        };
    };
    readonly 'mobile: stopPcap': {
        readonly command: "mobileStopPcap";
    };
    readonly 'mobile: listConditionInducers': {
        readonly command: "listConditionInducers";
    };
    readonly 'mobile: enableConditionInducer': {
        readonly command: "enableConditionInducer";
        readonly params: {
            readonly required: readonly ["conditionID", "profileID"];
        };
    };
    readonly 'mobile: disableConditionInducer': {
        readonly command: "disableConditionInducer";
    };
    readonly 'mobile: updateSafariPreferences': {
        readonly command: "mobileUpdateSafariPreferences";
        readonly params: {
            readonly required: readonly ["preferences"];
        };
    };
    readonly 'mobile: calibrateWebToRealCoordinatesTranslation': {
        readonly command: "mobileCalibrateWebToRealCoordinatesTranslation";
    };
    readonly 'mobile: keys': {
        readonly command: "mobileKeys";
        readonly params: {
            readonly required: readonly ["keys"];
            readonly optional: readonly ["elementId"];
        };
    };
    readonly 'mobile: deepLink': {
        readonly command: "mobileDeepLink";
        readonly params: {
            readonly required: readonly ["url"];
            readonly optional: readonly ["bundleId"];
        };
    };
    readonly 'mobile: setSimulatedLocation': {
        readonly command: "mobileSetSimulatedLocation";
        readonly params: {
            readonly required: readonly ["latitude", "longitude"];
        };
    };
    readonly 'mobile: getSimulatedLocation': {
        readonly command: "mobileGetSimulatedLocation";
    };
    readonly 'mobile: resetSimulatedLocation': {
        readonly command: "mobileResetSimulatedLocation";
    };
    readonly 'mobile: shake': {
        readonly command: "mobileShake";
    };
    readonly 'mobile: startAudioRecording': {
        readonly command: "startAudioRecording";
        readonly params: {
            readonly required: readonly ["audioInput"];
            readonly optional: readonly ["timeLimit", "audioCodec", "audioBitrate", "audioChannels", "audioRate", "forceRestart"];
        };
    };
    readonly 'mobile: stopAudioRecording': {
        readonly command: "stopAudioRecording";
    };
    readonly 'mobile: hideKeyboard': {
        readonly command: "mobileHideKeyboard";
        readonly params: {
            readonly optional: readonly ["keys"];
        };
    };
    readonly 'mobile: isKeyboardShown': {
        readonly command: "isKeyboardShown";
    };
    readonly 'mobile: lock': {
        readonly command: "lock";
        readonly params: {
            readonly optional: readonly ["seconds"];
        };
    };
    readonly 'mobile: unlock': {
        readonly command: "unlock";
    };
    readonly 'mobile: isLocked': {
        readonly command: "isLocked";
    };
    readonly 'mobile: backgroundApp': {
        readonly command: "background";
        readonly params: {
            readonly optional: readonly ["seconds"];
        };
    };
    readonly 'mobile: simctl': {
        readonly command: "mobileSimctl";
        readonly params: {
            readonly required: readonly ["command"];
            readonly optional: readonly ["args", "timeout"];
        };
    };
};
//# sourceMappingURL=execute-method-map.d.ts.map
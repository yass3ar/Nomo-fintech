/**
 * Create a new simulator with `appiumTest-` prefix and return the object.
 *
 * @this {import('./driver').XCUITestDriver}
 * @returns {Promise<object>} Simulator object associated with the udid passed in.
 */
export function createSim(this: import("./driver").XCUITestDriver): Promise<object>;
/**
 * @typedef {Object} SimulatorLookupOptions
 * @property {string} [deviceName] - The name of the device to lookup
 * @property {string} platformVersion - The platform version string
 * @property {string} [simulatorDevicesSetPath] - The full path to the simulator devices set
 * @property {string} [udid] - Simulator udid
 * @property {string} [platformName] The name of the current platform
 */
/**
 * Get an existing simulator matching the provided capabilities.
 *
 * @this {import('./driver').XCUITestDriver}
 * @returns {Promise<import('./driver').Simulator|null>} The matched Simulator instance or `null` if no matching  device is found.
 */
export function getExistingSim(this: import("./driver").XCUITestDriver): Promise<import("./driver").Simulator | null>;
/**
 * @this {import('./driver').XCUITestDriver}
 */
export function shutdownSimulator(this: import("./driver").XCUITestDriver): Promise<void>;
/**
 * @this {import('./driver').XCUITestDriver}
 * @property {boolean} [enforceSimulatorShutdown=false]
 * @returns {Promise<void>}
 */
export function runSimulatorReset(this: import("./driver").XCUITestDriver, enforceSimulatorShutdown?: boolean): Promise<void>;
/**
 * @typedef {Object} InstallOptions
 *
 * @property {boolean} [skipUninstall] Whether to skip app uninstall before installing it
 * @property {boolean} [newSimulator=false] Whether the simulator is brand new
 */
/**
 * @this {import('./driver').XCUITestDriver}
 * @param {string} app The app to the path
 * @param {string} [bundleId] The bundle id to ensure it is already installed and uninstall it
 * @param {InstallOptions} [opts={}]
 */
export function installToSimulator(this: import("./driver").XCUITestDriver, app: string, bundleId?: string | undefined, opts?: InstallOptions | undefined): Promise<void>;
/**
 * @this {import('./driver').XCUITestDriver}
 */
export function shutdownOtherSimulators(this: import("./driver").XCUITestDriver): Promise<void>;
/**
 * Configures Safari options based on the given session capabilities
 *
 * @this {import('./driver').XCUITestDriver}
 * @return {Promise<boolean>} true if any preferences have been updated
 */
export function setSafariPrefs(this: import("./driver").XCUITestDriver): Promise<boolean>;
/**
 * Changes Simulator localization preferences
 *
 * @this {import('./driver').XCUITestDriver}
 * @returns {Promise<boolean>} True if preferences were changed
 */
export function setLocalizationPrefs(this: import("./driver").XCUITestDriver): Promise<boolean>;
export type SimulatorLookupOptions = {
    /**
     * - The name of the device to lookup
     */
    deviceName?: string | undefined;
    /**
     * - The platform version string
     */
    platformVersion: string;
    /**
     * - The full path to the simulator devices set
     */
    simulatorDevicesSetPath?: string | undefined;
    /**
     * - Simulator udid
     */
    udid?: string | undefined;
    /**
     * The name of the current platform
     */
    platformName?: string | undefined;
};
export type InstallOptions = {
    /**
     * Whether to skip app uninstall before installing it
     */
    skipUninstall?: boolean | undefined;
    /**
     * Whether the simulator is brand new
     */
    newSimulator?: boolean | undefined;
};
//# sourceMappingURL=simulator-management.d.ts.map
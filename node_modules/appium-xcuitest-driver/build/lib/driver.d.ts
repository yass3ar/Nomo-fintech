/**
 * @implements {ExternalDriver<XCUITestDriverConstraints, FullContext|string>}
 * @extends {BaseDriver<XCUITestDriverConstraints>}
 * @privateRemarks **This class should be considered "final"**. It cannot be extended
 * due to use of public class field assignments.  If extending this class becomes a hard requirement, refer to the implementation of `BaseDriver` on how to do so.
 */
export class XCUITestDriver extends BaseDriver<{
    readonly platformName: {
        readonly presence: true;
        readonly isString: true;
        readonly inclusionCaseInsensitive: readonly ["iOS", "tvOS"];
    };
    readonly browserName: {
        readonly isString: true;
    };
    readonly app: {
        readonly isString: true;
    };
    readonly calendarFormat: {
        readonly isString: true;
    };
    readonly bundleId: {
        readonly isString: true;
    };
    readonly udid: {
        readonly isString: true;
    };
    readonly autoAcceptAlerts: {
        readonly isBoolean: true;
    };
    readonly autoDismissAlerts: {
        readonly isBoolean: true;
    };
    readonly nativeWebTap: {
        readonly isBoolean: true;
    };
    readonly safariInitialUrl: {
        readonly isString: true;
    };
    readonly initialDeeplinkUrl: {
        readonly isString: true;
    };
    readonly safariAllowPopups: {
        readonly isBoolean: true;
    };
    readonly safariIgnoreFraudWarning: {
        readonly isBoolean: true;
    };
    readonly safariOpenLinksInBackground: {
        readonly isBoolean: true;
    };
    readonly safariShowFullResponse: {
        readonly isBoolean: true;
    };
    readonly keepKeyChains: {
        readonly isBoolean: true;
    };
    readonly resetLocationService: {
        readonly isBoolean: true;
    };
    readonly localizableStringsDir: {
        readonly isString: true;
    };
    readonly processArguments: {};
    readonly showIOSLog: {
        readonly isBoolean: true;
    };
    readonly webviewConnectRetries: {
        readonly isNumber: true;
    };
    readonly clearSystemFiles: {
        readonly isBoolean: true;
    };
    readonly customSSLCert: {
        readonly isString: true;
    };
    readonly remoteDebugProxy: {
        readonly isString: true;
    };
    readonly enablePerformanceLogging: {
        readonly isBoolean: true;
    };
    readonly enableAsyncExecuteFromHttps: {
        readonly isBoolean: true;
    };
    readonly fullContextList: {
        readonly isBoolean: true;
    };
    readonly ignoreAboutBlankUrl: {
        readonly isBoolean: true;
    };
    readonly skipLogCapture: {
        readonly isBoolean: true;
    };
    readonly deviceName: {
        readonly isString: true;
    };
    readonly showXcodeLog: {
        readonly isBoolean: true;
    };
    readonly wdaLocalPort: {
        readonly isNumber: true;
    };
    readonly wdaRemotePort: {
        readonly isNumber: true;
    };
    readonly wdaBaseUrl: {
        readonly isString: true;
    };
    readonly iosInstallPause: {
        readonly isNumber: true;
    };
    readonly xcodeConfigFile: {
        readonly isString: true;
    };
    readonly xcodeOrgId: {
        readonly isString: true;
    };
    readonly xcodeSigningId: {
        readonly isString: true;
    };
    readonly keychainPath: {
        readonly isString: true;
    };
    readonly keychainPassword: {
        readonly isString: true;
    };
    readonly bootstrapPath: {
        readonly isString: true;
    };
    readonly agentPath: {
        readonly isString: true;
    };
    readonly scaleFactor: {
        readonly isString: true;
    };
    readonly usePrebuiltWDA: {
        readonly isBoolean: true;
    };
    readonly prebuiltWDAPath: {
        readonly isString: true;
    };
    readonly usePreinstalledWDA: {
        readonly isBoolean: true;
    };
    readonly updatedWDABundleIdSuffix: {
        readonly isString: true;
    };
    readonly webDriverAgentUrl: {
        readonly isString: true;
    };
    readonly derivedDataPath: {
        readonly isString: true;
    };
    readonly launchWithIDB: {
        readonly isBoolean: true;
    };
    readonly useNewWDA: {
        readonly isBoolean: true;
    };
    readonly wdaLaunchTimeout: {
        readonly isNumber: true;
    };
    readonly wdaConnectionTimeout: {
        readonly isNumber: true;
    };
    readonly updatedWDABundleId: {
        readonly isString: true;
    };
    readonly resetOnSessionStartOnly: {
        readonly isBoolean: true;
    };
    readonly commandTimeouts: {};
    readonly wdaStartupRetries: {
        readonly isNumber: true;
    };
    readonly wdaStartupRetryInterval: {
        readonly isNumber: true;
    };
    readonly prebuildWDA: {
        readonly isBoolean: true;
    };
    readonly connectHardwareKeyboard: {
        readonly isBoolean: true;
    };
    readonly forceTurnOnSoftwareKeyboardSimulator: {
        readonly isBoolean: true;
    };
    readonly simulatorPasteboardAutomaticSync: {
        readonly isString: true;
    };
    readonly simulatorDevicesSetPath: {
        readonly isString: true;
    };
    readonly calendarAccessAuthorized: {
        readonly isBoolean: true;
        readonly deprecated: true;
    };
    readonly useSimpleBuildTest: {
        readonly isBoolean: true;
        readonly deprecated: true;
    };
    readonly waitForQuiescence: {
        readonly isBoolean: true;
        readonly deprecated: true;
    };
    readonly maxTypingFrequency: {
        readonly isNumber: true;
    };
    readonly nativeTyping: {
        readonly isBoolean: true;
    };
    readonly simpleIsVisibleCheck: {
        readonly isBoolean: true;
    };
    readonly shouldUseSingletonTestManager: {
        readonly isBoolean: true;
    };
    readonly isHeadless: {
        readonly isBoolean: true;
    };
    readonly useXctestrunFile: {
        readonly isBoolean: true;
    };
    readonly absoluteWebLocations: {
        readonly isBoolean: true;
    };
    readonly simulatorWindowCenter: {
        readonly isString: true;
    };
    readonly simulatorStartupTimeout: {
        readonly isNumber: true;
    };
    readonly simulatorTracePointer: {
        readonly isBoolean: true;
    };
    readonly useJSONSource: {
        readonly isBoolean: true;
    };
    readonly enforceFreshSimulatorCreation: {
        readonly isBoolean: true;
    };
    readonly shutdownOtherSimulators: {
        readonly isBoolean: true;
    };
    readonly keychainsExcludePatterns: {
        readonly isString: true;
    };
    readonly showSafariConsoleLog: {
        readonly isBoolean: true;
    };
    readonly showSafariNetworkLog: {
        readonly isBoolean: true;
    };
    readonly safariGarbageCollect: {
        readonly isBoolean: true;
    };
    readonly safariGlobalPreferences: {
        readonly isObject: true;
    };
    readonly safariLogAllCommunication: {
        readonly isBoolean: true;
    };
    readonly safariLogAllCommunicationHexDump: {
        readonly isBoolean: true;
    };
    readonly safariSocketChunkSize: {
        readonly isNumber: true;
    };
    readonly mjpegServerPort: {
        readonly isNumber: true;
    };
    readonly reduceMotion: {
        readonly isBoolean: true;
    };
    readonly reduceTransparency: {
        readonly isBoolean: true;
    };
    readonly autoFillPasswords: {
        readonly isBoolean: true;
    };
    readonly mjpegScreenshotUrl: {
        readonly isString: true;
    };
    readonly permissions: {
        readonly isString: true;
    };
    readonly screenshotQuality: {
        readonly isNumber: true;
    };
    readonly wdaEventloopIdleDelay: {
        readonly isNumber: true;
    };
    readonly otherApps: {
        readonly isString: true;
    };
    readonly includeSafariInWebviews: {
        readonly isBoolean: true;
    };
    readonly additionalWebviewBundleIds: {};
    readonly webviewConnectTimeout: {
        readonly isNumber: true;
    };
    readonly webviewAtomWaitTimeout: {
        readonly isNumber: true;
    };
    readonly iosSimulatorLogsPredicate: {
        readonly isString: true;
    };
    readonly simulatorLogLevel: {
        readonly isString: true;
    };
    readonly appPushTimeout: {
        readonly isNumber: true;
    };
    readonly nativeWebTapStrict: {
        readonly isBoolean: true;
    };
    readonly safariWebInspectorMaxFrameLength: {
        readonly isNumber: true;
    };
    readonly allowProvisioningDeviceRegistration: {
        readonly isBoolean: true;
    };
    readonly waitForIdleTimeout: {
        readonly isNumber: true;
    };
    readonly resultBundlePath: {
        readonly isString: true;
    };
    readonly resultBundleVersion: {
        readonly isNumber: true;
    };
    readonly safariIgnoreWebHostnames: {
        readonly isString: true;
    };
    readonly disableAutomaticScreenshots: {
        readonly isBoolean: true;
    };
    readonly shouldTerminateApp: {
        readonly isBoolean: true;
    };
    readonly forceAppLaunch: {
        readonly isBoolean: true;
    };
    readonly useNativeCachingStrategy: {
        readonly isBoolean: true;
    };
    readonly appInstallStrategy: {
        readonly deprecated: true;
        readonly isString: true;
        readonly inclusionCaseInsensitive: readonly ["serial", "parallel", "ios-deploy"];
    };
    readonly enforceAppInstall: {
        readonly isBoolean: true;
    };
    readonly skipTriggerInputEventAfterSendkeys: {
        readonly isBoolean: true;
    };
    readonly sendKeyStrategy: {
        readonly isString: true;
    };
    readonly skipSyncUiDialogTranslation: {
        readonly isBoolean: true;
    };
    readonly forceSimulatorSoftwareKeyboardPresence: {
        readonly isBoolean: true;
    };
    readonly appLaunchStateTimeoutSec: {
        readonly isNumber: true;
    };
    readonly appTimeZone: {
        readonly isString: true;
    };
    readonly pageLoadStrategy: {
        readonly isString: true;
        readonly inclusionCaseInsensitive: readonly ["none", "eager", "normal"];
    };
}, import("@appium/types").StringRecord, import("@appium/types").StringRecord, import("@appium/types").DefaultCreateSessionResult<{
    readonly platformName: {
        readonly presence: true;
        readonly isString: true;
        readonly inclusionCaseInsensitive: readonly ["iOS", "tvOS"];
    };
    readonly browserName: {
        readonly isString: true;
    };
    readonly app: {
        readonly isString: true;
    };
    readonly calendarFormat: {
        readonly isString: true;
    };
    readonly bundleId: {
        readonly isString: true;
    };
    readonly udid: {
        readonly isString: true;
    };
    readonly autoAcceptAlerts: {
        readonly isBoolean: true;
    };
    readonly autoDismissAlerts: {
        readonly isBoolean: true;
    };
    readonly nativeWebTap: {
        readonly isBoolean: true;
    };
    readonly safariInitialUrl: {
        readonly isString: true;
    };
    readonly initialDeeplinkUrl: {
        readonly isString: true;
    };
    readonly safariAllowPopups: {
        readonly isBoolean: true;
    };
    readonly safariIgnoreFraudWarning: {
        readonly isBoolean: true;
    };
    readonly safariOpenLinksInBackground: {
        readonly isBoolean: true;
    };
    readonly safariShowFullResponse: {
        readonly isBoolean: true;
    };
    readonly keepKeyChains: {
        readonly isBoolean: true;
    };
    readonly resetLocationService: {
        readonly isBoolean: true;
    };
    readonly localizableStringsDir: {
        readonly isString: true;
    };
    readonly processArguments: {};
    readonly showIOSLog: {
        readonly isBoolean: true;
    };
    readonly webviewConnectRetries: {
        readonly isNumber: true;
    };
    readonly clearSystemFiles: {
        readonly isBoolean: true;
    };
    readonly customSSLCert: {
        readonly isString: true;
    };
    readonly remoteDebugProxy: {
        readonly isString: true;
    };
    readonly enablePerformanceLogging: {
        readonly isBoolean: true;
    };
    readonly enableAsyncExecuteFromHttps: {
        readonly isBoolean: true;
    };
    readonly fullContextList: {
        readonly isBoolean: true;
    };
    readonly ignoreAboutBlankUrl: {
        readonly isBoolean: true;
    };
    readonly skipLogCapture: {
        readonly isBoolean: true;
    };
    readonly deviceName: {
        readonly isString: true;
    };
    readonly showXcodeLog: {
        readonly isBoolean: true;
    };
    readonly wdaLocalPort: {
        readonly isNumber: true;
    };
    readonly wdaRemotePort: {
        readonly isNumber: true;
    };
    readonly wdaBaseUrl: {
        readonly isString: true;
    };
    readonly iosInstallPause: {
        readonly isNumber: true;
    };
    readonly xcodeConfigFile: {
        readonly isString: true;
    };
    readonly xcodeOrgId: {
        readonly isString: true;
    };
    readonly xcodeSigningId: {
        readonly isString: true;
    };
    readonly keychainPath: {
        readonly isString: true;
    };
    readonly keychainPassword: {
        readonly isString: true;
    };
    readonly bootstrapPath: {
        readonly isString: true;
    };
    readonly agentPath: {
        readonly isString: true;
    };
    readonly scaleFactor: {
        readonly isString: true;
    };
    readonly usePrebuiltWDA: {
        readonly isBoolean: true;
    };
    readonly prebuiltWDAPath: {
        readonly isString: true;
    };
    readonly usePreinstalledWDA: {
        readonly isBoolean: true;
    };
    readonly updatedWDABundleIdSuffix: {
        readonly isString: true;
    };
    readonly webDriverAgentUrl: {
        readonly isString: true;
    };
    readonly derivedDataPath: {
        readonly isString: true;
    };
    readonly launchWithIDB: {
        readonly isBoolean: true;
    };
    readonly useNewWDA: {
        readonly isBoolean: true;
    };
    readonly wdaLaunchTimeout: {
        readonly isNumber: true;
    };
    readonly wdaConnectionTimeout: {
        readonly isNumber: true;
    };
    readonly updatedWDABundleId: {
        readonly isString: true;
    };
    readonly resetOnSessionStartOnly: {
        readonly isBoolean: true;
    };
    readonly commandTimeouts: {};
    readonly wdaStartupRetries: {
        readonly isNumber: true;
    };
    readonly wdaStartupRetryInterval: {
        readonly isNumber: true;
    };
    readonly prebuildWDA: {
        readonly isBoolean: true;
    };
    readonly connectHardwareKeyboard: {
        readonly isBoolean: true;
    };
    readonly forceTurnOnSoftwareKeyboardSimulator: {
        readonly isBoolean: true;
    };
    readonly simulatorPasteboardAutomaticSync: {
        readonly isString: true;
    };
    readonly simulatorDevicesSetPath: {
        readonly isString: true;
    };
    readonly calendarAccessAuthorized: {
        readonly isBoolean: true;
        readonly deprecated: true;
    };
    readonly useSimpleBuildTest: {
        readonly isBoolean: true;
        readonly deprecated: true;
    };
    readonly waitForQuiescence: {
        readonly isBoolean: true;
        readonly deprecated: true;
    };
    readonly maxTypingFrequency: {
        readonly isNumber: true;
    };
    readonly nativeTyping: {
        readonly isBoolean: true;
    };
    readonly simpleIsVisibleCheck: {
        readonly isBoolean: true;
    };
    readonly shouldUseSingletonTestManager: {
        readonly isBoolean: true;
    };
    readonly isHeadless: {
        readonly isBoolean: true;
    };
    readonly useXctestrunFile: {
        readonly isBoolean: true;
    };
    readonly absoluteWebLocations: {
        readonly isBoolean: true;
    };
    readonly simulatorWindowCenter: {
        readonly isString: true;
    };
    readonly simulatorStartupTimeout: {
        readonly isNumber: true;
    };
    readonly simulatorTracePointer: {
        readonly isBoolean: true;
    };
    readonly useJSONSource: {
        readonly isBoolean: true;
    };
    readonly enforceFreshSimulatorCreation: {
        readonly isBoolean: true;
    };
    readonly shutdownOtherSimulators: {
        readonly isBoolean: true;
    };
    readonly keychainsExcludePatterns: {
        readonly isString: true;
    };
    readonly showSafariConsoleLog: {
        readonly isBoolean: true;
    };
    readonly showSafariNetworkLog: {
        readonly isBoolean: true;
    };
    readonly safariGarbageCollect: {
        readonly isBoolean: true;
    };
    readonly safariGlobalPreferences: {
        readonly isObject: true;
    };
    readonly safariLogAllCommunication: {
        readonly isBoolean: true;
    };
    readonly safariLogAllCommunicationHexDump: {
        readonly isBoolean: true;
    };
    readonly safariSocketChunkSize: {
        readonly isNumber: true;
    };
    readonly mjpegServerPort: {
        readonly isNumber: true;
    };
    readonly reduceMotion: {
        readonly isBoolean: true;
    };
    readonly reduceTransparency: {
        readonly isBoolean: true;
    };
    readonly autoFillPasswords: {
        readonly isBoolean: true;
    };
    readonly mjpegScreenshotUrl: {
        readonly isString: true;
    };
    readonly permissions: {
        readonly isString: true;
    };
    readonly screenshotQuality: {
        readonly isNumber: true;
    };
    readonly wdaEventloopIdleDelay: {
        readonly isNumber: true;
    };
    readonly otherApps: {
        readonly isString: true;
    };
    readonly includeSafariInWebviews: {
        readonly isBoolean: true;
    };
    readonly additionalWebviewBundleIds: {};
    readonly webviewConnectTimeout: {
        readonly isNumber: true;
    };
    readonly webviewAtomWaitTimeout: {
        readonly isNumber: true;
    };
    readonly iosSimulatorLogsPredicate: {
        readonly isString: true;
    };
    readonly simulatorLogLevel: {
        readonly isString: true;
    };
    readonly appPushTimeout: {
        readonly isNumber: true;
    };
    readonly nativeWebTapStrict: {
        readonly isBoolean: true;
    };
    readonly safariWebInspectorMaxFrameLength: {
        readonly isNumber: true;
    };
    readonly allowProvisioningDeviceRegistration: {
        readonly isBoolean: true;
    };
    readonly waitForIdleTimeout: {
        readonly isNumber: true;
    };
    readonly resultBundlePath: {
        readonly isString: true;
    };
    readonly resultBundleVersion: {
        readonly isNumber: true;
    };
    readonly safariIgnoreWebHostnames: {
        readonly isString: true;
    };
    readonly disableAutomaticScreenshots: {
        readonly isBoolean: true;
    };
    readonly shouldTerminateApp: {
        readonly isBoolean: true;
    };
    readonly forceAppLaunch: {
        readonly isBoolean: true;
    };
    readonly useNativeCachingStrategy: {
        readonly isBoolean: true;
    };
    readonly appInstallStrategy: {
        readonly deprecated: true;
        readonly isString: true;
        readonly inclusionCaseInsensitive: readonly ["serial", "parallel", "ios-deploy"];
    };
    readonly enforceAppInstall: {
        readonly isBoolean: true;
    };
    readonly skipTriggerInputEventAfterSendkeys: {
        readonly isBoolean: true;
    };
    readonly sendKeyStrategy: {
        readonly isString: true;
    };
    readonly skipSyncUiDialogTranslation: {
        readonly isBoolean: true;
    };
    readonly forceSimulatorSoftwareKeyboardPresence: {
        readonly isBoolean: true;
    };
    readonly appLaunchStateTimeoutSec: {
        readonly isNumber: true;
    };
    readonly appTimeZone: {
        readonly isString: true;
    };
    readonly pageLoadStrategy: {
        readonly isString: true;
        readonly inclusionCaseInsensitive: readonly ["none", "eager", "normal"];
    };
}>, void, import("@appium/types").StringRecord> implements ExternalDriver<XCUITestDriverConstraints, FullContext | string> {
    static newMethodMap: {
        readonly '/session/:sessionId/timeouts/async_script': {
            readonly POST: {
                readonly command: "asyncScriptTimeout";
                readonly payloadParams: {
                    readonly required: readonly ["ms"];
                };
            };
        };
        readonly '/session/:sessionId/timeouts/implicit_wait': {
            readonly POST: {
                readonly command: "implicitWait";
                readonly payloadParams: {
                    readonly required: readonly ["ms"];
                };
            };
        };
        readonly '/session/:sessionId/window/:windowhandle/size': {
            readonly GET: {
                readonly command: "getWindowSize";
            };
        };
        readonly '/session/:sessionId/element/:elementId/submit': {
            readonly POST: {
                readonly command: "submit";
            };
        };
        readonly '/session/:sessionId/keys': {
            readonly POST: {
                readonly command: "keys";
                readonly payloadParams: {
                    readonly required: readonly ["value"];
                };
            };
        };
        readonly '/session/:sessionId/element/:elementId/location': {
            readonly GET: {
                readonly command: "getLocation";
            };
        };
        readonly '/session/:sessionId/element/:elementId/location_in_view': {
            readonly GET: {
                readonly command: "getLocationInView";
            };
        };
        readonly '/session/:sessionId/element/:elementId/size': {
            readonly GET: {
                readonly command: "getSize";
            };
        };
        readonly '/session/:sessionId/appium/device/shake': {
            readonly POST: {
                readonly command: "mobileShake";
            };
        };
        readonly '/session/:sessionId/appium/device/lock': {
            readonly POST: {
                readonly command: "lock";
                readonly payloadParams: {
                    readonly optional: readonly ["seconds"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/unlock': {
            readonly POST: {
                readonly command: "unlock";
            };
        };
        readonly '/session/:sessionId/appium/device/is_locked': {
            readonly POST: {
                readonly command: "isLocked";
            };
        };
        readonly '/session/:sessionId/appium/start_recording_screen': {
            readonly POST: {
                readonly command: "startRecordingScreen";
                readonly payloadParams: {
                    readonly optional: readonly ["options"];
                };
            };
        };
        readonly '/session/:sessionId/appium/stop_recording_screen': {
            readonly POST: {
                readonly command: "stopRecordingScreen";
                readonly payloadParams: {
                    readonly optional: readonly ["options"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/app_state': {
            readonly POST: {
                readonly command: "queryAppState";
                readonly payloadParams: {
                    readonly required: readonly [readonly ["appId"], readonly ["bundleId"]];
                };
            };
        };
        readonly '/session/:sessionId/appium/simulator/touch_id': {
            readonly POST: {
                readonly command: "touchId";
                readonly payloadParams: {
                    readonly required: readonly ["match"];
                };
            };
        };
        readonly '/session/:sessionId/appium/simulator/toggle_touch_id_enrollment': {
            readonly POST: {
                readonly command: "toggleEnrollTouchId";
                readonly payloadParams: {
                    readonly optional: readonly ["enabled"];
                };
            };
        };
        readonly '/session/:sessionId/appium/app/launch': {
            readonly POST: {
                readonly command: "launchApp";
            };
        };
        readonly '/session/:sessionId/appium/app/close': {
            readonly POST: {
                readonly command: "closeApp";
            };
        };
        readonly '/session/:sessionId/appium/app/reset': {
            readonly POST: {
                readonly command: "reset";
            };
        };
        readonly '/session/:sessionId/appium/app/background': {
            readonly POST: {
                readonly command: "background";
                readonly payloadParams: {
                    readonly required: readonly ["seconds"];
                };
            };
        };
        readonly '/session/:sessionId/appium/app/strings': {
            readonly POST: {
                readonly command: "getStrings";
                readonly payloadParams: {
                    readonly optional: readonly ["language", "stringFile"];
                };
            };
        };
        readonly '/session/:sessionId/appium/element/:elementId/value': {
            readonly POST: {
                readonly command: "setValueImmediate";
                readonly payloadParams: {
                    readonly required: readonly ["text"];
                };
            };
        };
        readonly '/session/:sessionId/appium/receive_async_response': {
            readonly POST: {
                readonly command: "receiveAsyncResponse";
                readonly payloadParams: {
                    readonly required: readonly ["response"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/get_clipboard': {
            readonly POST: {
                readonly command: "getClipboard";
                readonly payloadParams: {
                    readonly optional: readonly ["contentType"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/set_clipboard': {
            readonly POST: {
                readonly command: "setClipboard";
                readonly payloadParams: {
                    readonly required: readonly ["content"];
                    readonly optional: readonly ["contentType", "label"];
                };
            };
        };
    };
    static executeMethodMap: {
        readonly 'mobile: tap': {
            readonly command: "mobileTap";
            readonly params: {
                readonly required: readonly ["x", "y"];
                readonly optional: readonly ["elementId"];
            };
        };
        readonly 'mobile: scroll': {
            readonly command: "mobileScroll";
            readonly params: {
                readonly optional: readonly ["name", "direction", "predicateString", "toVisible", "distance", "elementId"];
            };
        };
        readonly 'mobile: selectPickerWheelValue': {
            readonly command: "mobileSelectPickerWheelValue";
            readonly params: {
                readonly required: readonly ["elementId", "order"];
                readonly optional: readonly ["offset"];
            };
        };
        readonly 'mobile: sendMemoryWarning': {
            readonly command: "mobileSendMemoryWarning";
            readonly params: {
                readonly required: readonly ["bundleId"];
            };
        };
        readonly 'mobile: swipe': {
            readonly command: "mobileSwipe";
            readonly params: {
                readonly required: readonly ["direction"];
                readonly optional: readonly ["velocity", "elementId"];
            };
        };
        readonly 'mobile: pinch': {
            readonly command: "mobilePinch";
            readonly params: {
                readonly required: readonly ["scale", "velocity"];
                readonly optional: readonly ["elementId"];
            };
        };
        readonly 'mobile: doubleTap': {
            readonly command: "mobileDoubleTap";
            readonly params: {
                readonly optional: readonly ["elementId", "x", "y"];
            };
        };
        readonly 'mobile: twoFingerTap': {
            readonly command: "mobileTwoFingerTap";
            readonly params: {
                readonly optional: readonly ["elementId"];
            };
        };
        readonly 'mobile: tapWithNumberOfTaps': {
            readonly command: "mobileTapWithNumberOfTaps";
            readonly params: {
                readonly optional: readonly ["numberOfTouches", "numberOfTaps", "elementId"];
            };
        };
        readonly 'mobile: touchAndHold': {
            readonly command: "mobileTouchAndHold";
            readonly params: {
                readonly required: readonly ["duration"];
                readonly optional: readonly ["x", "y", "elementId"];
            };
        };
        readonly 'mobile: dragFromToForDuration': {
            readonly command: "mobileDragFromToForDuration";
            readonly params: {
                readonly required: readonly ["duration", "fromX", "fromY", "toX", "toY"];
                readonly optional: readonly ["elementId"];
            };
        };
        readonly 'mobile: rotateElement': {
            readonly command: "mobileRotateElement";
            readonly params: {
                readonly required: readonly ["rotation", "velocity"];
                readonly optional: readonly ["elementId"];
            };
        };
        readonly 'mobile: dragFromToWithVelocity': {
            readonly command: "mobileDragFromToWithVelocity";
            readonly params: {
                readonly required: readonly ["pressDuration", "holdDuration", "velocity"];
                readonly optional: readonly ["fromElementId", "toElementId", "fromX", "fromY", "toX", "toY"];
            };
        };
        readonly 'mobile: forcePress': {
            readonly command: "mobileForcePress";
            readonly params: {
                readonly optional: readonly ["x", "y", "duration", "pressure", "elementId"];
            };
        };
        readonly 'mobile: scrollToElement': {
            readonly command: "mobileScrollToElement";
            readonly params: {
                readonly required: readonly ["elementId"];
            };
        };
        readonly 'mobile: alert': {
            readonly command: "mobileHandleAlert";
            readonly params: {
                readonly required: readonly ["action"];
                readonly optional: readonly ["buttonLabel"];
            };
        };
        readonly 'mobile: setPasteboard': {
            readonly command: "mobileSetPasteboard";
            readonly params: {
                readonly required: readonly ["content"];
                readonly optional: readonly ["encoding"];
            };
        };
        readonly 'mobile: getPasteboard': {
            readonly command: "mobileGetPasteboard";
            readonly params: {
                readonly optional: readonly ["encoding"];
            };
        };
        readonly 'mobile: source': {
            readonly command: "mobileGetSource";
            readonly params: {
                readonly optional: readonly ["format", "excludedAttributes"];
            };
        };
        readonly 'mobile: getAppStrings': {
            readonly command: "getStrings";
            readonly params: {
                readonly optional: readonly ["language", "stringFile"];
            };
        };
        readonly 'mobile: getContexts': {
            readonly command: "mobileGetContexts";
            readonly params: {
                readonly optional: readonly ["waitForWebviewMs"];
            };
        };
        readonly 'mobile: installApp': {
            readonly command: "mobileInstallApp";
            readonly params: {
                readonly required: readonly ["app"];
                readonly optional: readonly ["timeoutMs", "checkVersion"];
            };
        };
        readonly 'mobile: isAppInstalled': {
            readonly command: "mobileIsAppInstalled";
            readonly params: {
                readonly required: readonly ["bundleId"];
            };
        };
        readonly 'mobile: removeApp': {
            readonly command: "mobileRemoveApp";
            readonly params: {
                readonly required: readonly ["bundleId"];
            };
        };
        readonly 'mobile: launchApp': {
            readonly command: "mobileLaunchApp";
            readonly params: {
                readonly required: readonly ["bundleId"];
                readonly optional: readonly ["arguments", "environment"];
            };
        };
        readonly 'mobile: terminateApp': {
            readonly command: "mobileTerminateApp";
            readonly params: {
                readonly required: readonly ["bundleId"];
            };
        };
        readonly 'mobile: killApp': {
            readonly command: "mobileKillApp";
            readonly params: {
                readonly required: readonly ["bundleId"];
            };
        };
        readonly 'mobile: queryAppState': {
            readonly command: "mobileQueryAppState";
            readonly params: {
                readonly required: readonly ["bundleId"];
            };
        };
        readonly 'mobile: activateApp': {
            readonly command: "mobileActivateApp";
            readonly params: {
                readonly required: readonly ["bundleId"];
            };
        };
        readonly 'mobile: listApps': {
            readonly command: "mobileListApps";
            readonly params: {
                readonly optional: readonly ["applicationType"];
            };
        };
        readonly 'mobile: clearApp': {
            readonly command: "mobileClearApp";
            readonly params: {
                readonly required: readonly ["bundleId"];
            };
        };
        readonly 'mobile: viewportScreenshot': {
            readonly command: "getViewportScreenshot";
        };
        readonly 'mobile: viewportRect': {
            readonly command: "getViewportRect";
        };
        readonly 'mobile: startPerfRecord': {
            readonly command: "mobileStartPerfRecord";
            readonly params: {
                readonly optional: readonly ["timeout", "profileName", "pid"];
            };
        };
        readonly 'mobile: stopPerfRecord': {
            readonly command: "mobileStopPerfRecord";
            readonly params: {
                readonly optional: readonly ["remotePath", "user", "pass", "method", "profileName", "headers", "fileFieldName", "formFields"];
            };
        };
        readonly 'mobile: installCertificate': {
            readonly command: "mobileInstallCertificate";
            readonly params: {
                readonly required: readonly ["content"];
                readonly optional: readonly ["commonName", "isRoot"];
            };
        };
        readonly 'mobile: removeCertificate': {
            readonly command: "mobileRemoveCertificate";
            readonly params: {
                readonly required: readonly ["name"];
            };
        };
        readonly 'mobile: listCertificates': {
            readonly command: "mobileListCertificates";
        };
        readonly 'mobile: startLogsBroadcast': {
            readonly command: "mobileStartLogsBroadcast";
        };
        readonly 'mobile: stopLogsBroadcast': {
            readonly command: "mobileStopLogsBroadcast";
        };
        readonly 'mobile: batteryInfo': {
            readonly command: "mobileGetBatteryInfo";
        };
        readonly 'mobile: performAccessibilityAudit': {
            readonly command: "mobilePerformAccessibilityAudit";
            readonly params: {
                readonly optional: readonly ["auditTypes"];
            };
        };
        readonly 'mobile: deviceInfo': {
            readonly command: "mobileGetDeviceInfo";
        };
        readonly 'mobile: getDeviceTime': {
            readonly command: "mobileGetDeviceTime";
            readonly params: {
                readonly optional: readonly ["format"];
            };
        };
        readonly 'mobile: activeAppInfo': {
            readonly command: "mobileGetActiveAppInfo";
        };
        readonly 'mobile: deviceScreenInfo': {
            readonly command: "getScreenInfo";
        };
        readonly 'mobile: pressButton': {
            readonly command: "mobilePressButton";
            readonly params: {
                readonly required: readonly ["name"];
                readonly optional: readonly ["durationSeconds"];
            };
        };
        readonly 'mobile: enrollBiometric': {
            readonly command: "mobileEnrollBiometric";
            readonly params: {
                readonly optional: readonly ["isEnabled"];
            };
        };
        readonly 'mobile: sendBiometricMatch': {
            readonly command: "mobileSendBiometricMatch";
            readonly params: {
                readonly optional: readonly ["type", "match"];
            };
        };
        readonly 'mobile: isBiometricEnrolled': {
            readonly command: "mobileIsBiometricEnrolled";
        };
        readonly 'mobile: clearKeychains': {
            readonly command: "mobileClearKeychains";
        };
        readonly 'mobile: getPermission': {
            readonly command: "mobileGetPermission";
            readonly params: {
                readonly required: readonly ["bundleId", "service"];
            };
        };
        readonly 'mobile: setPermission': {
            readonly command: "mobileSetPermissions";
            readonly params: {
                readonly required: readonly ["access", "bundleId"];
            };
        };
        readonly 'mobile: resetPermission': {
            readonly command: "mobileResetPermission";
            readonly params: {
                readonly required: readonly ["service"];
            };
        };
        readonly 'mobile: getAppearance': {
            readonly command: "mobileGetAppearance";
        };
        readonly 'mobile: setAppearance': {
            readonly command: "mobileSetAppearance";
            readonly params: {
                readonly required: readonly ["style"];
            };
        };
        readonly 'mobile: getClipboard': {
            readonly command: "getClipboard";
            readonly params: {
                readonly optional: readonly ["contentType"];
            };
        };
        readonly 'mobile: setClipboard': {
            readonly command: "setClipboard";
            readonly params: {
                readonly required: readonly ["content"];
                readonly optional: readonly ["contentType"];
            };
        };
        readonly 'mobile: siriCommand': {
            readonly command: "mobileSiriCommand";
            readonly params: {
                readonly required: readonly ["text"];
            };
        };
        readonly 'mobile: pushFile': {
            readonly command: "mobilePushFile";
            readonly params: {
                readonly required: readonly ["remotePath", "payload"];
            };
        };
        readonly 'mobile: pullFile': {
            readonly command: "mobilePullFile";
            readonly params: {
                readonly required: readonly ["remotePath"];
            };
        };
        readonly 'mobile: pullFolder': {
            readonly command: "mobilePullFolder";
            readonly params: {
                readonly required: readonly ["remotePath"];
            };
        };
        readonly 'mobile: deleteFile': {
            readonly command: "mobileDeleteFile";
            readonly params: {
                readonly required: readonly ["remotePath"];
            };
        };
        readonly 'mobile: deleteFolder': {
            readonly command: "mobileDeleteFolder";
            readonly params: {
                readonly required: readonly ["remotePath"];
            };
        };
        readonly 'mobile: runXCTest': {
            readonly command: "mobileRunXCTest";
            readonly params: {
                readonly required: readonly ["testRunnerBundleId", "appUnderTestBundleId", "xctestBundleId"];
                readonly optional: readonly ["args", "testType", "env", "timeout"];
            };
        };
        readonly 'mobile: installXCTestBundle': {
            readonly command: "mobileInstallXCTestBundle";
            readonly params: {
                readonly required: readonly ["xctestApp"];
            };
        };
        readonly 'mobile: listXCTestBundles': {
            readonly command: "mobileListXCTestBundles";
        };
        readonly 'mobile: listXCTestsInTestBundle': {
            readonly command: "mobileListXCTestsInTestBundle";
            readonly params: {
                readonly required: readonly ["bundle"];
            };
        };
        readonly 'mobile: startXCTestScreenRecording': {
            readonly command: "mobileStartXctestScreenRecording";
            readonly params: {
                readonly optional: readonly ["fps", "codec"];
            };
        };
        readonly 'mobile: getXCTestScreenRecordingInfo': {
            readonly command: "mobileGetXctestScreenRecordingInfo";
        };
        readonly 'mobile: stopXCTestScreenRecording': {
            readonly command: "mobileStopXctestScreenRecording";
            readonly params: {
                readonly optional: readonly ["remotePath", "user", "pass", "headers", "fileFieldName", "formFields", "method"];
            };
        };
        readonly 'mobile: pushNotification': {
            readonly command: "mobilePushNotification";
            readonly params: {
                readonly required: readonly ["bundleId", "payload"];
            };
        };
        readonly 'mobile: expectNotification': {
            readonly command: "mobileExpectNotification";
            readonly params: {
                readonly required: readonly ["name"];
                readonly optional: readonly ["type", "timeoutSeconds"];
            };
        };
        readonly 'mobile: performIoHidEvent': {
            readonly command: "mobilePerformIoHidEvent";
            readonly params: {
                readonly required: readonly ["page", "usage", "durationSeconds"];
            };
        };
        readonly 'mobile: configureLocalization': {
            readonly command: "mobileConfigureLocalization";
            readonly params: {
                readonly optional: readonly ["keyboard", "language", "locale"];
            };
        };
        readonly 'mobile: resetLocationService': {
            readonly command: "mobileResetLocationService";
        };
        readonly 'mobile: startPcap': {
            readonly command: "mobileStartPcap";
            readonly params: {
                readonly optional: readonly ["timeLimitSec", "forceRestart"];
            };
        };
        readonly 'mobile: stopPcap': {
            readonly command: "mobileStopPcap";
        };
        readonly 'mobile: listConditionInducers': {
            readonly command: "listConditionInducers";
        };
        readonly 'mobile: enableConditionInducer': {
            readonly command: "enableConditionInducer";
            readonly params: {
                readonly required: readonly ["conditionID", "profileID"];
            };
        };
        readonly 'mobile: disableConditionInducer': {
            readonly command: "disableConditionInducer";
        };
        readonly 'mobile: updateSafariPreferences': {
            readonly command: "mobileUpdateSafariPreferences";
            readonly params: {
                readonly required: readonly ["preferences"];
            };
        };
        readonly 'mobile: calibrateWebToRealCoordinatesTranslation': {
            readonly command: "mobileCalibrateWebToRealCoordinatesTranslation";
        };
        readonly 'mobile: keys': {
            readonly command: "mobileKeys";
            readonly params: {
                readonly required: readonly ["keys"];
                readonly optional: readonly ["elementId"];
            };
        };
        readonly 'mobile: deepLink': {
            readonly command: "mobileDeepLink";
            readonly params: {
                readonly required: readonly ["url"];
                readonly optional: readonly ["bundleId"];
            };
        };
        readonly 'mobile: setSimulatedLocation': {
            readonly command: "mobileSetSimulatedLocation";
            readonly params: {
                readonly required: readonly ["latitude", "longitude"];
            };
        };
        readonly 'mobile: getSimulatedLocation': {
            readonly command: "mobileGetSimulatedLocation";
        };
        readonly 'mobile: resetSimulatedLocation': {
            readonly command: "mobileResetSimulatedLocation";
        };
        readonly 'mobile: shake': {
            readonly command: "mobileShake";
        };
        readonly 'mobile: startAudioRecording': {
            readonly command: "startAudioRecording";
            readonly params: {
                readonly required: readonly ["audioInput"];
                readonly optional: readonly ["timeLimit", "audioCodec", "audioBitrate", "audioChannels", "audioRate", "forceRestart"];
            };
        };
        readonly 'mobile: stopAudioRecording': {
            readonly command: "stopAudioRecording";
        };
        readonly 'mobile: hideKeyboard': {
            readonly command: "mobileHideKeyboard";
            readonly params: {
                readonly optional: readonly ["keys"];
            };
        };
        readonly 'mobile: isKeyboardShown': {
            readonly command: "isKeyboardShown";
        };
        readonly 'mobile: lock': {
            readonly command: "lock";
            readonly params: {
                readonly optional: readonly ["seconds"];
            };
        };
        readonly 'mobile: unlock': {
            readonly command: "unlock";
        };
        readonly 'mobile: isLocked': {
            readonly command: "isLocked";
        };
        readonly 'mobile: backgroundApp': {
            readonly command: "background";
            readonly params: {
                readonly optional: readonly ["seconds"];
            };
        };
        readonly 'mobile: simctl': {
            readonly command: "mobileSimctl";
            readonly params: {
                readonly required: readonly ["command"];
                readonly optional: readonly ["args", "timeout"];
            };
        };
    };
    /**
     *
     * @param {XCUITestDriverOpts} opts
     * @param {boolean} shouldValidateCaps
     */
    constructor(opts?: XCUITestDriverOpts, shouldValidateCaps?: boolean);
    /** @type {string|null|undefined} */
    curWindowHandle: string | null | undefined;
    /**
     * @type {boolean|undefined}
     */
    selectingNewPage: boolean | undefined;
    /** @type {string[]} */
    contexts: string[];
    /** @type {string|null} */
    curContext: string | null;
    /** @type {string[]} */
    curWebFrames: string[];
    /** @type {import('./types').CalibrationData|null} */
    webviewCalibrationResult: import("./types").CalibrationData | null;
    /**
     * @type {import('./types').Page[]|undefined}
     */
    windowHandleCache: import("./types").Page[] | undefined;
    /** @type {import('./types').AsyncPromise|undefined} */
    asyncPromise: import("./types").AsyncPromise | undefined;
    /** @type {number|undefined} */
    asyncWaitMs: number | undefined;
    /** @type {((logRecord: {message: string}) => void)|null} */
    _syslogWebsocketListener: ((logRecord: {
        message: string;
    }) => void) | null;
    /** @type {import('./commands/performance').PerfRecorder[]} */
    _perfRecorders: import("./commands/performance").PerfRecorder[];
    /** @type {LRUCache} */
    webElementsCache: LRUCache<any, any, any>;
    /**
     * @type {any|null}
     * @privateRemarks needs types
     **/
    _conditionInducerService: any | null;
    /** @type {boolean|undefined} */
    _isSafariIphone: boolean | undefined;
    /** @type {boolean|undefined} */
    _isSafariNotched: boolean | undefined;
    /** @type {import('./commands/types').WaitingAtoms} */
    _waitingAtoms: import("./commands/types").WaitingAtoms;
    /** @type {import('./types').LifecycleData} */
    lifecycleData: import("./types").LifecycleData;
    /** @type {import('./commands/record-audio').AudioRecorder|null} */
    _audioRecorder: import("./commands/record-audio").AudioRecorder | null;
    /** @type {XcodeVersion|undefined} */
    xcodeVersion: XcodeVersion | undefined;
    /** @type {import('./commands/pcap').TrafficCapture|null} */
    _trafficCapture: import("./commands/pcap").TrafficCapture | null;
    /** @type {Simulator|RealDevice} */
    _device: Simulator | RealDevice;
    /** @type {string|null} */
    _iosSdkVersion: string | null;
    /** @type {WebDriverAgent} */
    wda: WebDriverAgent;
    /** @type {import('appium-remote-debugger').RemoteDebugger|null} */
    remote: import("appium-remote-debugger").RemoteDebugger | null;
    /** @type {DriverLogs} */
    logs: DriverLogs;
    /** @type {import('./commands/types').LogListener|undefined} */
    _bidiServerLogListener: import("./commands/types").LogListener | undefined;
    settings: DeviceSettings<{
        nativeWebTap: boolean;
        nativeWebTapStrict: boolean;
        useJSONSource: boolean;
        webScreenshotMode: string;
        shouldUseCompactResponses: boolean;
        elementResponseAttributes: string;
        mjpegServerScreenshotQuality: number;
        mjpegServerFramerate: number;
        screenshotQuality: number;
        mjpegScalingFactor: number;
        reduceMotion: null;
        pageSourceExcludedAttributes: string;
    }>;
    appInfosCache: AppInfosCache;
    onSettingsUpdate(key: any, value: any): Promise<unknown>;
    resetIos(): void;
    jwpProxyActive: boolean | undefined;
    proxyReqRes: any;
    safari: boolean | undefined;
    cachedWdaStatus: any;
    _currentUrl: any;
    pageLoadMs: number | undefined;
    landscapeWebCoordsOffset: number | undefined;
    getStatus(): Promise<{
        ready: boolean;
        message: string;
        build: {
            built: string;
            version: any;
        };
    }>;
    mergeCliArgsToOpts(): boolean;
    /**
     * @returns {Simulator|RealDevice}
     */
    get device(): RealDevice | import("appium-ios-simulator").Simulator;
    isXcodebuildNeeded(): boolean;
    createSession(w3cCaps1: any, w3cCaps2: any, w3cCaps3: any, driverData: any): Promise<[string, import("@appium/types").DriverCaps<{
        readonly platformName: {
            readonly presence: true;
            readonly isString: true;
            readonly inclusionCaseInsensitive: readonly ["iOS", "tvOS"];
        };
        readonly browserName: {
            readonly isString: true;
        };
        readonly app: {
            readonly isString: true;
        };
        readonly calendarFormat: {
            readonly isString: true;
        };
        readonly bundleId: {
            readonly isString: true;
        };
        readonly udid: {
            readonly isString: true;
        };
        readonly autoAcceptAlerts: {
            readonly isBoolean: true;
        };
        readonly autoDismissAlerts: {
            readonly isBoolean: true;
        };
        readonly nativeWebTap: {
            readonly isBoolean: true;
        };
        readonly safariInitialUrl: {
            readonly isString: true;
        };
        readonly initialDeeplinkUrl: {
            readonly isString: true;
        };
        readonly safariAllowPopups: {
            readonly isBoolean: true;
        };
        readonly safariIgnoreFraudWarning: {
            readonly isBoolean: true;
        };
        readonly safariOpenLinksInBackground: {
            readonly isBoolean: true;
        };
        readonly safariShowFullResponse: {
            readonly isBoolean: true;
        };
        readonly keepKeyChains: {
            readonly isBoolean: true;
        };
        readonly resetLocationService: {
            readonly isBoolean: true;
        };
        readonly localizableStringsDir: {
            readonly isString: true;
        };
        readonly processArguments: {};
        readonly showIOSLog: {
            readonly isBoolean: true;
        };
        readonly webviewConnectRetries: {
            readonly isNumber: true;
        };
        readonly clearSystemFiles: {
            readonly isBoolean: true;
        };
        readonly customSSLCert: {
            readonly isString: true;
        };
        readonly remoteDebugProxy: {
            readonly isString: true;
        };
        readonly enablePerformanceLogging: {
            readonly isBoolean: true;
        };
        readonly enableAsyncExecuteFromHttps: {
            readonly isBoolean: true;
        };
        readonly fullContextList: {
            readonly isBoolean: true;
        };
        readonly ignoreAboutBlankUrl: {
            readonly isBoolean: true;
        };
        readonly skipLogCapture: {
            readonly isBoolean: true;
        };
        readonly deviceName: {
            readonly isString: true;
        };
        readonly showXcodeLog: {
            readonly isBoolean: true;
        };
        readonly wdaLocalPort: {
            readonly isNumber: true;
        };
        readonly wdaRemotePort: {
            readonly isNumber: true;
        };
        readonly wdaBaseUrl: {
            readonly isString: true;
        };
        readonly iosInstallPause: {
            readonly isNumber: true;
        };
        readonly xcodeConfigFile: {
            readonly isString: true;
        };
        readonly xcodeOrgId: {
            readonly isString: true;
        };
        readonly xcodeSigningId: {
            readonly isString: true;
        };
        readonly keychainPath: {
            readonly isString: true;
        };
        readonly keychainPassword: {
            readonly isString: true;
        };
        readonly bootstrapPath: {
            readonly isString: true;
        };
        readonly agentPath: {
            readonly isString: true;
        };
        readonly scaleFactor: {
            readonly isString: true;
        };
        readonly usePrebuiltWDA: {
            readonly isBoolean: true;
        };
        readonly prebuiltWDAPath: {
            readonly isString: true;
        };
        readonly usePreinstalledWDA: {
            readonly isBoolean: true;
        };
        readonly updatedWDABundleIdSuffix: {
            readonly isString: true;
        };
        readonly webDriverAgentUrl: {
            readonly isString: true;
        };
        readonly derivedDataPath: {
            readonly isString: true;
        };
        readonly launchWithIDB: {
            readonly isBoolean: true;
        };
        readonly useNewWDA: {
            readonly isBoolean: true;
        };
        readonly wdaLaunchTimeout: {
            readonly isNumber: true;
        };
        readonly wdaConnectionTimeout: {
            readonly isNumber: true;
        };
        readonly updatedWDABundleId: {
            readonly isString: true;
        };
        readonly resetOnSessionStartOnly: {
            readonly isBoolean: true;
        };
        readonly commandTimeouts: {};
        readonly wdaStartupRetries: {
            readonly isNumber: true;
        };
        readonly wdaStartupRetryInterval: {
            readonly isNumber: true;
        };
        readonly prebuildWDA: {
            readonly isBoolean: true;
        };
        readonly connectHardwareKeyboard: {
            readonly isBoolean: true;
        };
        readonly forceTurnOnSoftwareKeyboardSimulator: {
            readonly isBoolean: true;
        };
        readonly simulatorPasteboardAutomaticSync: {
            readonly isString: true;
        };
        readonly simulatorDevicesSetPath: {
            readonly isString: true;
        };
        readonly calendarAccessAuthorized: {
            readonly isBoolean: true;
            readonly deprecated: true;
        };
        readonly useSimpleBuildTest: {
            readonly isBoolean: true;
            readonly deprecated: true;
        };
        readonly waitForQuiescence: {
            readonly isBoolean: true;
            readonly deprecated: true;
        };
        readonly maxTypingFrequency: {
            readonly isNumber: true;
        };
        readonly nativeTyping: {
            readonly isBoolean: true;
        };
        readonly simpleIsVisibleCheck: {
            readonly isBoolean: true;
        };
        readonly shouldUseSingletonTestManager: {
            readonly isBoolean: true;
        };
        readonly isHeadless: {
            readonly isBoolean: true;
        };
        readonly useXctestrunFile: {
            readonly isBoolean: true;
        };
        readonly absoluteWebLocations: {
            readonly isBoolean: true;
        };
        readonly simulatorWindowCenter: {
            readonly isString: true;
        };
        readonly simulatorStartupTimeout: {
            readonly isNumber: true;
        };
        readonly simulatorTracePointer: {
            readonly isBoolean: true;
        };
        readonly useJSONSource: {
            readonly isBoolean: true;
        };
        readonly enforceFreshSimulatorCreation: {
            readonly isBoolean: true;
        };
        readonly shutdownOtherSimulators: {
            readonly isBoolean: true;
        };
        readonly keychainsExcludePatterns: {
            readonly isString: true;
        };
        readonly showSafariConsoleLog: {
            readonly isBoolean: true;
        };
        readonly showSafariNetworkLog: {
            readonly isBoolean: true;
        };
        readonly safariGarbageCollect: {
            readonly isBoolean: true;
        };
        readonly safariGlobalPreferences: {
            readonly isObject: true;
        };
        readonly safariLogAllCommunication: {
            readonly isBoolean: true;
        };
        readonly safariLogAllCommunicationHexDump: {
            readonly isBoolean: true;
        };
        readonly safariSocketChunkSize: {
            readonly isNumber: true;
        };
        readonly mjpegServerPort: {
            readonly isNumber: true;
        };
        readonly reduceMotion: {
            readonly isBoolean: true;
        };
        readonly reduceTransparency: {
            readonly isBoolean: true;
        };
        readonly autoFillPasswords: {
            readonly isBoolean: true;
        };
        readonly mjpegScreenshotUrl: {
            readonly isString: true;
        };
        readonly permissions: {
            readonly isString: true;
        };
        readonly screenshotQuality: {
            readonly isNumber: true;
        };
        readonly wdaEventloopIdleDelay: {
            readonly isNumber: true;
        };
        readonly otherApps: {
            readonly isString: true;
        };
        readonly includeSafariInWebviews: {
            readonly isBoolean: true;
        };
        readonly additionalWebviewBundleIds: {};
        readonly webviewConnectTimeout: {
            readonly isNumber: true;
        };
        readonly webviewAtomWaitTimeout: {
            readonly isNumber: true;
        };
        readonly iosSimulatorLogsPredicate: {
            readonly isString: true;
        };
        readonly simulatorLogLevel: {
            readonly isString: true;
        };
        readonly appPushTimeout: {
            readonly isNumber: true;
        };
        readonly nativeWebTapStrict: {
            readonly isBoolean: true;
        };
        readonly safariWebInspectorMaxFrameLength: {
            readonly isNumber: true;
        };
        readonly allowProvisioningDeviceRegistration: {
            readonly isBoolean: true;
        };
        readonly waitForIdleTimeout: {
            readonly isNumber: true;
        };
        readonly resultBundlePath: {
            readonly isString: true;
        };
        readonly resultBundleVersion: {
            readonly isNumber: true;
        };
        readonly safariIgnoreWebHostnames: {
            readonly isString: true;
        };
        readonly disableAutomaticScreenshots: {
            readonly isBoolean: true;
        };
        readonly shouldTerminateApp: {
            readonly isBoolean: true;
        };
        readonly forceAppLaunch: {
            readonly isBoolean: true;
        };
        readonly useNativeCachingStrategy: {
            readonly isBoolean: true;
        };
        readonly appInstallStrategy: {
            readonly deprecated: true;
            readonly isString: true;
            readonly inclusionCaseInsensitive: readonly ["serial", "parallel", "ios-deploy"];
        };
        readonly enforceAppInstall: {
            readonly isBoolean: true;
        };
        readonly skipTriggerInputEventAfterSendkeys: {
            readonly isBoolean: true;
        };
        readonly sendKeyStrategy: {
            readonly isString: true;
        };
        readonly skipSyncUiDialogTranslation: {
            readonly isBoolean: true;
        };
        readonly forceSimulatorSoftwareKeyboardPresence: {
            readonly isBoolean: true;
        };
        readonly appLaunchStateTimeoutSec: {
            readonly isNumber: true;
        };
        readonly appTimeZone: {
            readonly isString: true;
        };
        readonly pageLoadStrategy: {
            readonly isString: true;
            readonly inclusionCaseInsensitive: readonly ["none", "eager", "normal"];
        };
    }>]>;
    mjpegStream: mjpeg.MJpegStream | undefined;
    /**
     * Returns the default URL for Safari browser
     * @returns {string} The default URL
     */
    getDefaultUrl(): string;
    start(): Promise<void>;
    /**
     * Start the simulator and initialize based on capabilities
     */
    initSimulator(): Promise<void>;
    /**
     * Start WebDriverAgentRunner
     */
    startWda(): Promise<void>;
    /**
     *
     * @param {boolean} [enforceSimulatorShutdown=false]
     */
    runReset(enforceSimulatorShutdown?: boolean | undefined): Promise<void>;
    deleteSession(): Promise<void>;
    stop(): Promise<void>;
    /**
     *
     * @param {string} cmd
     * @param {...any} args
     * @returns {Promise<any>}
     */
    executeCommand(cmd: string, ...args: any[]): Promise<any>;
    configureApp(): Promise<void>;
    determineDevice(): Promise<{
        device: any;
        realDevice: boolean;
        udid: any;
    }>;
    startSim(): Promise<void>;
    createSim(): Promise<any>;
    startWdaSession(bundleId: any, processArguments: any): Promise<void>;
    proxyActive(): boolean;
    getProxyAvoidList(): import("@appium/types").RouteMatcher[];
    canProxy(): boolean;
    /**
     * @returns {boolean}
     */
    isSafari(): boolean;
    /**
     * @returns {boolean}
     */
    isRealDevice(): boolean;
    /**
     * @returns {boolean}
     */
    isSimulator(): boolean;
    /**
     * @param {string} strategy
     */
    validateLocatorStrategy(strategy: string): void;
    /**
     * Check if the given app can be installed, or should uninstall before installing it.
     *
     * @param {AutInstallationStateOptions} [opts]
     * @returns {Promise<AutInstallationState>}
     */
    checkAutInstallationState(opts?: AutInstallationStateOptions | undefined): Promise<AutInstallationState>;
    installAUT(): Promise<void>;
    /**
     * @param {string|string[]} otherApps
     * @returns {Promise<void>}
     */
    installOtherApps(otherApps: string | string[]): Promise<void>;
    /**
     * @param {string} orientation
     * @returns {Promise<void>}
     */
    setInitialOrientation(orientation: string): Promise<void>;
    /**
     * @param {string} [cmdName]
     * @returns {number|undefined}
     */
    _getCommandTimeout(cmdName?: string | undefined): number | undefined;
    preparePreinstalledWda(): Promise<void>;
    mobileGetActiveAppInfo: (this: XCUITestDriver) => Promise<import("./commands/types").ActiveAppInfo>;
    getAlertText: (this: XCUITestDriver) => Promise<string | null>;
    setAlertText: (this: XCUITestDriver, value: string) => Promise<void>;
    postAcceptAlert: (this: XCUITestDriver, opts?: {
        buttonLabel?: string;
    }) => Promise<void>;
    postDismissAlert: (this: XCUITestDriver, opts?: {
        buttonLabel?: string;
    }) => Promise<void>;
    getAlertButtons: (this: XCUITestDriver) => Promise<string[]>;
    mobileHandleAlert: (this: XCUITestDriver, action: AlertAction, buttonLabel?: string | undefined) => Promise<string[] | void>;
    mobileInstallApp: (this: XCUITestDriver, app: string, timeoutMs?: number | undefined, checkVersion?: boolean | undefined) => Promise<void>;
    mobileIsAppInstalled: (this: XCUITestDriver, bundleId: string) => Promise<boolean>;
    mobileRemoveApp: (this: XCUITestDriver, bundleId: string) => Promise<boolean>;
    mobileLaunchApp: (this: XCUITestDriver, bundleId: string, args?: string | string[] | undefined, environment?: object) => Promise<void>;
    mobileTerminateApp: (this: XCUITestDriver, bundleId: string) => Promise<boolean>;
    mobileActivateApp: (this: XCUITestDriver, bundleId: string) => Promise<void>;
    mobileKillApp: (this: XCUITestDriver, bundleId: string) => Promise<boolean>;
    mobileQueryAppState: (this: XCUITestDriver, bundleId: string) => Promise<AppState>;
    installApp: (appPath: string, { timeoutMs, strategy }?: object) => Promise<void>;
    activateApp: (bundleId: string, opts?: object, ...args: any[]) => Promise<void>;
    isAppInstalled: (this: XCUITestDriver, bundleId: string) => Promise<boolean>;
    terminateApp: (this: XCUITestDriver, bundleId: string) => Promise<boolean>;
    queryAppState: (this: XCUITestDriver, bundleId: string) => Promise<import("./commands/enum").AppState>;
    mobileListApps: (applicationType?: "User" | "System") => Promise<Record<string, any>[]>;
    mobileClearApp: (this: XCUITestDriver, bundleId: string) => Promise<boolean>;
    mobileSetAppearance: (this: XCUITestDriver, style: "dark" | "light") => Promise<undefined>;
    mobileGetAppearance: (this: XCUITestDriver) => Promise<{
        style: Style;
    }>;
    mobilePerformAccessibilityAudit: (this: XCUITestDriver, auditTypes: string[] | null) => Promise<AccessibilityAuditItem[]>;
    mobileGetBatteryInfo: (this: XCUITestDriver) => Promise<BatteryInfo>;
    mobileEnrollBiometric: (this: XCUITestDriver, isEnabled?: boolean) => Promise<void>;
    mobileSendBiometricMatch: (this: XCUITestDriver, type?: import("./commands/types").BiometricFeature, match?: boolean) => Promise<void>;
    mobileIsBiometricEnrolled: (this: XCUITestDriver) => Promise<boolean>;
    mobileInstallCertificate: (this: XCUITestDriver, content: string, commonName?: string | undefined, isRoot?: boolean) => Promise<string | void>;
    mobileListCertificates: (this: XCUITestDriver) => Promise<import("./commands/types").CertificateList>;
    mobileRemoveCertificate: (name: string) => Promise<string>;
    setClipboard: (this: XCUITestDriver, content: string, contentType?: string | undefined) => Promise<void>;
    getClipboard: (this: XCUITestDriver, contentType?: string | undefined) => Promise<string>;
    listConditionInducers: (this: XCUITestDriver) => Promise<Condition[]>;
    enableConditionInducer: (this: XCUITestDriver, conditionID: string, profileID: string) => Promise<boolean>;
    disableConditionInducer: (this: XCUITestDriver) => Promise<boolean>;
    getContexts: (this: XCUITestDriver) => Promise<string[] | import("./commands/context").FullContext[]>;
    getCurrentContext: (this: XCUITestDriver) => Promise<string>;
    getWindowHandle: (this: XCUITestDriver) => Promise<string>;
    getWindowHandles: (this: XCUITestDriver) => Promise<string[]>;
    setContext: (this: XCUITestDriver, name: string | Context, callback?: any, skipReadyCheck?: boolean | undefined) => Promise<void>;
    setWindow: (this: XCUITestDriver, name: string, skipReadyCheck?: boolean | undefined) => Promise<void>;
    activateRecentWebview: (this: XCUITestDriver) => Promise<void>;
    connectToRemoteDebugger: (this: XCUITestDriver) => Promise<void>;
    getContextsAndViews: (this: XCUITestDriver, useUrl?: boolean | undefined) => Promise<import("./commands/types").ViewContext<typeof import("./utils").NATIVE_WIN>[]>;
    listWebFrames: (this: XCUITestDriver, useUrl?: boolean) => Promise<import("./types").Page[]>;
    mobileGetContexts: (this: XCUITestDriver, waitForWebviewMs?: number | undefined) => Promise<Context[]>;
    onPageChange: (this: XCUITestDriver, pageChangeNotification: import("./commands/types").PageChangeNotification) => Promise<void>;
    useNewSafari: (this: XCUITestDriver) => boolean;
    getCurrentUrl: (this: XCUITestDriver) => string | undefined | null;
    getNewRemoteDebugger: (this: XCUITestDriver) => Promise<import("appium-remote-debugger").RemoteDebugger>;
    getRecentWebviewContextId: (this: XCUITestDriver, titleRegExp: RegExp, urlRegExp: RegExp) => Promise<string | undefined>;
    isWebContext: (this: XCUITestDriver) => boolean;
    isWebview: (this: XCUITestDriver) => boolean;
    setCurrentUrl: (this: XCUITestDriver, url: string | undefined | null) => void;
    stopRemote: (this: XCUITestDriver, closeWindowBeforeDisconnecting?: boolean) => Promise<void>;
    mobileGetDeviceInfo: (this: XCUITestDriver) => Promise<DeviceInfo | (DeviceInfo & LockdownInfo)>;
    elementDisplayed: (this: XCUITestDriver, el: any) => Promise<any>;
    elementEnabled: (this: XCUITestDriver, el: any) => Promise<any>;
    elementSelected: (this: XCUITestDriver, el: any) => Promise<any>;
    getName: (this: XCUITestDriver, el: any) => Promise<any>;
    getNativeAttribute: (this: XCUITestDriver, attribute: any, el: any) => Promise<string | null>;
    getAttribute: (this: XCUITestDriver, attribute: any, el: any) => Promise<any>;
    getProperty: (this: XCUITestDriver, property: any, el: any) => Promise<any>;
    getText: (this: XCUITestDriver, el: any) => Promise<any>;
    getElementRect: (this: XCUITestDriver, el: any) => Promise<import("@appium/types").Rect>;
    getLocation: (this: XCUITestDriver, elementId: string | Element) => Promise<Position>;
    getLocationInView: (this: XCUITestDriver, elementId: string | Element) => Promise<Position>;
    getSize: (this: XCUITestDriver, el: string | Element) => Promise<Size>;
    /** @deprecated */
    setValueImmediate: (this: XCUITestDriver, value: string, el: string) => Promise<void>;
    setValue: (this: XCUITestDriver, value: any, el: any) => Promise<void>;
    setValueWithWebAtom: (this: XCUITestDriver, atomsElement: import("./commands/types").AtomsElement<string>, value: string | string[]) => Promise<void>;
    keys: (this: XCUITestDriver, value: string[]) => Promise<void>;
    clear: (this: XCUITestDriver, el: any) => Promise<void>;
    getContentSize: (this: XCUITestDriver, el: any) => Promise<string>;
    getNativeRect: (this: XCUITestDriver, el: any) => Promise<Rect>;
    receiveAsyncResponse: (this: XCUITestDriver, status: any, value: any) => Promise<void>;
    execute: <TArgs extends ExecuteMethodArgs = unknown[], TReturn = unknown>(this: XCUITestDriver, script: string, args?: TArgs | undefined) => Promise<TReturn>;
    executeAsync: (this: XCUITestDriver, script: any, args: any) => Promise<any>;
    executeMobile: any;
    mobileSimctl: (this: XCUITestDriver, command: string, args?: string[] | undefined, timeout?: number | undefined) => Promise<SimctlExecResponse>;
    pushFile: (this: XCUITestDriver, remotePath: string, base64Data: string) => Promise<void>;
    mobilePushFile: (this: XCUITestDriver, remotePath: string, payload: string) => Promise<void>;
    pullFile: (this: XCUITestDriver, remotePath: string) => Promise<string>;
    mobilePullFile: (this: XCUITestDriver, remotePath: string) => Promise<string>;
    mobileDeleteFolder: (this: XCUITestDriver, remotePath: string) => Promise<void>;
    mobileDeleteFile: (this: XCUITestDriver, remotePath: string) => Promise<void>;
    pullFolder: (this: XCUITestDriver, remotePath: string) => Promise<string>;
    mobilePullFolder: (this: XCUITestDriver, remotePath: string) => Promise<string>;
    mobileSendMemoryWarning: (this: XCUITestDriver, bundleId: string) => Promise<void>;
    findElOrEls: (this: XCUITestDriver, strategy: any, selector: any, mult: any, context: any) => Promise<any>;
    findNativeElementOrElements: (this: XCUITestDriver, strategy: any, selector: any, mult: any, context: any) => Promise<any | any[] | undefined>;
    doNativeFind: (this: XCUITestDriver, strategy: any, selector: any, mult: any, context: any) => Promise<import("@appium/types").Element<string>[] | undefined>;
    getFirstVisibleChild: (this: XCUITestDriver, mult: any, context: any) => Promise<import("@appium/types").Element<string>[] | undefined>;
    active: (this: XCUITestDriver) => Promise<any>;
    background: (this: XCUITestDriver, seconds?: number | {
        timeout: number | null;
    } | undefined) => Promise<unknown>;
    touchId: (this: XCUITestDriver, match?: boolean) => Promise<void>;
    toggleEnrollTouchId: (this: XCUITestDriver, isEnabled?: boolean) => Promise<void>;
    getWindowSize: (this: XCUITestDriver, windowHandle?: string) => Promise<any>;
    getDeviceTime: (this: XCUITestDriver, format?: string) => Promise<string>;
    mobileGetDeviceTime: (this: XCUITestDriver, format?: string) => Promise<string>;
    getWindowRect: (this: XCUITestDriver) => Promise<{
        width: any;
        height: any;
        x: number;
        y: number;
    }>;
    getStrings: (this: XCUITestDriver, language: string, stringFile?: string | null | undefined) => Promise<import("@appium/types").StringRecord<string>>;
    removeApp: (this: XCUITestDriver, bundleId: any) => Promise<boolean>;
    launchApp: (this: XCUITestDriver) => Promise<never>;
    closeApp: (this: XCUITestDriver) => Promise<never>;
    setUrl: (this: XCUITestDriver, url: any) => Promise<void>;
    getViewportRect: (this: XCUITestDriver) => Promise<import("./commands/types").Viewport>;
    getScreenInfo: (this: XCUITestDriver) => Promise<ScreenInfo>;
    getStatusBarHeight: (this: XCUITestDriver) => Promise<number>;
    getDevicePixelRatio: (this: XCUITestDriver) => Promise<number>;
    mobilePressButton: (this: XCUITestDriver, name: import("./commands/types").ButtonName, durationSeconds?: number | undefined) => Promise<unknown>;
    mobileSiriCommand: (this: XCUITestDriver, text: string) => Promise<void>;
    getWindowSizeWeb: (this: XCUITestDriver) => Promise<any>;
    getWindowSizeNative: (this: XCUITestDriver) => Promise<unknown>;
    mobileGetSimulatedLocation: (this: XCUITestDriver) => Promise<GeolocationInfo>;
    mobileSetSimulatedLocation: (this: XCUITestDriver, latitude: number, longitude: number) => Promise<void>;
    mobileResetSimulatedLocation: (this: XCUITestDriver) => Promise<void>;
    mobileShake: (this: XCUITestDriver) => Promise<void>;
    click: (this: XCUITestDriver, el: any) => Promise<any>;
    releaseActions: (this: XCUITestDriver) => Promise<void>;
    performActions: (this: XCUITestDriver, actions: import("@appium/types").ActionSequence[]) => Promise<void>;
    nativeClick: (this: XCUITestDriver, el: import("@appium/types").Element | string) => Promise<unknown>;
    mobileScrollToElement: (this: XCUITestDriver, elementId: Element | string) => Promise<void>;
    mobileScroll: (this: XCUITestDriver, name?: string | undefined, direction?: import("./commands/types").Direction | undefined, predicateString?: string | undefined, toVisible?: boolean | undefined, distance?: number | undefined, elementId?: string | import("@appium/types").Element<string> | undefined) => Promise<void>;
    mobileSwipe: (this: XCUITestDriver, direction: import("./commands/types").Direction, velocity?: number | undefined, elementId?: string | import("@appium/types").Element<string> | undefined) => Promise<void>;
    mobilePinch: (this: XCUITestDriver, scale: number, velocity: number, elementId?: string | import("@appium/types").Element<string> | undefined) => Promise<void>;
    mobileDoubleTap: (this: XCUITestDriver, elementId?: string | import("@appium/types").Element<string> | undefined, x?: number | undefined, y?: number | undefined) => Promise<void>;
    mobileTwoFingerTap: (this: XCUITestDriver, elementId?: string | import("@appium/types").Element<string> | undefined) => Promise<void>;
    mobileTouchAndHold: (this: XCUITestDriver, duration: number, x?: number | undefined, y?: number | undefined, elementId?: string | import("@appium/types").Element<string> | undefined) => Promise<void>;
    mobileTap: (this: XCUITestDriver, x: number, y: number, elementId?: string | import("@appium/types").Element<string> | undefined) => Promise<void>;
    mobileDragFromToForDuration: (this: XCUITestDriver, duration: number, fromX: number, fromY: number, toX: number, toY: number, elementId?: string | import("@appium/types").Element<string> | undefined) => Promise<void>;
    mobileDragFromToWithVelocity: (this: XCUITestDriver, pressDuration: number, holdDuration: number, velocity: number, fromElementId?: string | import("@appium/types").Element<string> | undefined, toElementId?: string | import("@appium/types").Element<string> | undefined, fromX?: number | undefined, fromY?: number | undefined, toX?: number | undefined, toY?: number | undefined) => Promise<void>;
    mobileTapWithNumberOfTaps: (this: XCUITestDriver, numberOfTouches?: number | undefined, numberOfTaps?: number | undefined, elementId?: string | import("@appium/types").Element<string> | undefined) => Promise<void>;
    mobileForcePress: (this: XCUITestDriver, x?: number | undefined, y?: number | undefined, duration?: number | undefined, pressure?: number | undefined, elementId?: string | import("@appium/types").Element<string> | undefined) => Promise<void>;
    mobileSelectPickerWheelValue: (this: XCUITestDriver, elementId: string | Element, order: "next" | "previous", offset?: number | undefined, value?: string | null | undefined, maxAttempts?: number | undefined) => Promise<unknown>;
    mobileRotateElement: (this: XCUITestDriver, rotation: number, velocity: number, elementId?: string | import("@appium/types").Element<string> | undefined) => Promise<void>;
    mobilePerformIoHidEvent: (this: XCUITestDriver, page: import("./commands/hid-event").HIDPageEvent, usage: {
        [x: number]: string;
        kHIDUsage_Sprt_BaseballBat: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_BaseballBat;
        kHIDUsage_Sprt_GolfClub: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_GolfClub;
        kHIDUsage_Sprt_RowingMachine: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_RowingMachine;
        kHIDUsage_Sprt_Treadmill: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_Treadmill;
        kHIDUsage_Sprt_Oar: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_Oar;
        kHIDUsage_Sprt_Slope: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_Slope;
        kHIDUsage_Sprt_Rate: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_Rate;
        kHIDUsage_Sprt_StickSpeed: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_StickSpeed;
        kHIDUsage_Sprt_StickFaceAngle: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_StickFaceAngle;
        kHIDUsage_Sprt_StickHeelOrToe: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_StickHeelOrToe;
        kHIDUsage_Sprt_StickFollowThrough: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_StickFollowThrough;
        kHIDUsage_Sprt_StickTempo: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_StickTempo;
        kHIDUsage_Sprt_StickType: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_StickType;
        kHIDUsage_Sprt_StickHeight: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_StickHeight;
        kHIDUsage_Sprt_Putter: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_Putter;
        kHIDUsage_Sprt_1Iron: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_1Iron;
        kHIDUsage_Sprt_2Iron: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_2Iron;
        kHIDUsage_Sprt_3Iron: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_3Iron;
        kHIDUsage_Sprt_4Iron: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_4Iron;
        kHIDUsage_Sprt_5Iron: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_5Iron;
        kHIDUsage_Sprt_6Iron: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_6Iron;
        kHIDUsage_Sprt_7Iron: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_7Iron;
        kHIDUsage_Sprt_8Iron: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_8Iron;
        kHIDUsage_Sprt_9Iron: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_9Iron;
        kHIDUsage_Sprt_10Iron: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_10Iron;
        kHIDUsage_Sprt_11Iron: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_11Iron;
        kHIDUsage_Sprt_SandWedge: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_SandWedge;
        kHIDUsage_Sprt_LoftWedge: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_LoftWedge;
        kHIDUsage_Sprt_PowerWedge: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_PowerWedge;
        kHIDUsage_Sprt_1Wood: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_1Wood;
        kHIDUsage_Sprt_3Wood: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_3Wood;
        kHIDUsage_Sprt_5Wood: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_5Wood;
        kHIDUsage_Sprt_7Wood: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_7Wood;
        kHIDUsage_Sprt_9Wood: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_9Wood;
        kHIDUsage_Sprt_Reserved: import("./commands/hid-event").HIDUsageSportEvent.kHIDUsage_Sprt_Reserved;
        kHIDUsage_VR_Belt: import("./commands/hid-event").HIDUsageVREvent.kHIDUsage_VR_Belt;
        kHIDUsage_VR_BodySuit: import("./commands/hid-event").HIDUsageVREvent.kHIDUsage_VR_BodySuit;
        kHIDUsage_VR_Flexor: import("./commands/hid-event").HIDUsageVREvent.kHIDUsage_VR_Flexor;
        kHIDUsage_VR_Glove: import("./commands/hid-event").HIDUsageVREvent.kHIDUsage_VR_Glove;
        kHIDUsage_VR_HeadTracker: import("./commands/hid-event").HIDUsageVREvent.kHIDUsage_VR_HeadTracker;
        kHIDUsage_VR_HeadMountedDisplay: import("./commands/hid-event").HIDUsageVREvent.kHIDUsage_VR_HeadMountedDisplay;
        kHIDUsage_VR_HandTracker: import("./commands/hid-event").HIDUsageVREvent.kHIDUsage_VR_HandTracker;
        kHIDUsage_VR_Oculometer: import("./commands/hid-event").HIDUsageVREvent.kHIDUsage_VR_Oculometer;
        kHIDUsage_VR_Vest: import("./commands/hid-event").HIDUsageVREvent.kHIDUsage_VR_Vest;
        kHIDUsage_VR_AnimatronicDevice: import("./commands/hid-event").HIDUsageVREvent.kHIDUsage_VR_AnimatronicDevice;
        kHIDUsage_VR_StereoEnable: import("./commands/hid-event").HIDUsageVREvent.kHIDUsage_VR_StereoEnable;
        kHIDUsage_VR_DisplayEnable: import("./commands/hid-event").HIDUsageVREvent.kHIDUsage_VR_DisplayEnable;
        kHIDUsage_VR_Reserved: import("./commands/hid-event").HIDUsageVREvent.kHIDUsage_VR_Reserved;
        kHIDUsage_Sim_FlightSimulationDevice: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_FlightSimulationDevice;
        kHIDUsage_Sim_AutomobileSimulationDevice: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_AutomobileSimulationDevice;
        kHIDUsage_Sim_TankSimulationDevice: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_TankSimulationDevice;
        kHIDUsage_Sim_SpaceshipSimulationDevice: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_SpaceshipSimulationDevice;
        kHIDUsage_Sim_SubmarineSimulationDevice: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_SubmarineSimulationDevice;
        kHIDUsage_Sim_SailingSimulationDevice: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_SailingSimulationDevice;
        kHIDUsage_Sim_MotorcycleSimulationDevice: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_MotorcycleSimulationDevice;
        kHIDUsage_Sim_SportsSimulationDevice: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_SportsSimulationDevice;
        kHIDUsage_Sim_AirplaneSimulationDevice: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_AirplaneSimulationDevice;
        kHIDUsage_Sim_HelicopterSimulationDevice: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_HelicopterSimulationDevice;
        kHIDUsage_Sim_MagicCarpetSimulationDevice: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_MagicCarpetSimulationDevice;
        kHIDUsage_Sim_BicycleSimulationDevice: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_BicycleSimulationDevice;
        kHIDUsage_Sim_FlightControlStick: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_FlightControlStick;
        kHIDUsage_Sim_FlightStick: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_FlightStick;
        kHIDUsage_Sim_CyclicControl: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_CyclicControl;
        kHIDUsage_Sim_CyclicTrim: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_CyclicTrim;
        kHIDUsage_Sim_FlightYoke: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_FlightYoke;
        kHIDUsage_Sim_TrackControl: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_TrackControl;
        kHIDUsage_Sim_Aileron: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_Aileron;
        kHIDUsage_Sim_AileronTrim: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_AileronTrim;
        kHIDUsage_Sim_AntiTorqueControl: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_AntiTorqueControl;
        kHIDUsage_Sim_AutopilotEnable: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_AutopilotEnable;
        kHIDUsage_Sim_ChaffRelease: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_ChaffRelease;
        kHIDUsage_Sim_CollectiveControl: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_CollectiveControl;
        kHIDUsage_Sim_DiveBrake: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_DiveBrake;
        kHIDUsage_Sim_ElectronicCountermeasures: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_ElectronicCountermeasures;
        kHIDUsage_Sim_Elevator: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_Elevator;
        kHIDUsage_Sim_ElevatorTrim: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_ElevatorTrim;
        kHIDUsage_Sim_Rudder: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_Rudder;
        kHIDUsage_Sim_Throttle: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_Throttle;
        kHIDUsage_Sim_FlightCommunications: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_FlightCommunications;
        kHIDUsage_Sim_FlareRelease: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_FlareRelease;
        kHIDUsage_Sim_LandingGear: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_LandingGear;
        kHIDUsage_Sim_ToeBrake: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_ToeBrake;
        kHIDUsage_Sim_Trigger: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_Trigger;
        kHIDUsage_Sim_WeaponsArm: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_WeaponsArm;
        kHIDUsage_Sim_Weapons: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_Weapons;
        kHIDUsage_Sim_WingFlaps: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_WingFlaps;
        kHIDUsage_Sim_Accelerator: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_Accelerator;
        kHIDUsage_Sim_Brake: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_Brake;
        kHIDUsage_Sim_Clutch: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_Clutch;
        kHIDUsage_Sim_Shifter: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_Shifter;
        kHIDUsage_Sim_Steering: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_Steering;
        kHIDUsage_Sim_TurretDirection: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_TurretDirection;
        kHIDUsage_Sim_BarrelElevation: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_BarrelElevation;
        kHIDUsage_Sim_DivePlane: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_DivePlane;
        kHIDUsage_Sim_Ballast: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_Ballast;
        kHIDUsage_Sim_BicycleCrank: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_BicycleCrank;
        kHIDUsage_Sim_HandleBars: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_HandleBars;
        kHIDUsage_Sim_FrontBrake: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_FrontBrake;
        kHIDUsage_Sim_RearBrake: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_RearBrake;
        kHIDUsage_Sim_Reserved: import("./commands/hid-event").HIDUsageSimulationEvent.kHIDUsage_Sim_Reserved;
        kHIDUsage_BCS_Undefined: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Undefined;
        kHIDUsage_BCS_BadgeReader: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_BadgeReader;
        kHIDUsage_BCS_BarCodeScanner: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_BarCodeScanner;
        kHIDUsage_BCS_DumbBarCodeScanner: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_DumbBarCodeScanner;
        kHIDUsage_BCS_CordlessScannerBase: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_CordlessScannerBase;
        kHIDUsage_BCS_BarCodeScannerCradle: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_BarCodeScannerCradle;
        kHIDUsage_BCS_AttributeReport: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_AttributeReport;
        kHIDUsage_BCS_SettingsReport: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_SettingsReport;
        kHIDUsage_BCS_ScannedDataReport: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ScannedDataReport;
        kHIDUsage_BCS_RawScannedDataReport: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_RawScannedDataReport;
        kHIDUsage_BCS_TriggerReport: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_TriggerReport;
        kHIDUsage_BCS_StatusReport: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_StatusReport;
        kHIDUsage_BCS_UPC_EANControlReport: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_UPC_EANControlReport;
        kHIDUsage_BCS_EAN2_3LabelControlReport: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_EAN2_3LabelControlReport;
        kHIDUsage_BCS_Code39ControlReport: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Code39ControlReport;
        kHIDUsage_BCS_Interleaved2of5ControlReport: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Interleaved2of5ControlReport;
        kHIDUsage_BCS_Standard2of5ControlReport: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Standard2of5ControlReport;
        kHIDUsage_BCS_MSIPlesseyControlReport: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_MSIPlesseyControlReport;
        kHIDUsage_BCS_CodabarControlReport: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_CodabarControlReport;
        kHIDUsage_BCS_Code128ControlReport: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Code128ControlReport;
        kHIDUsage_BCS_Misc1DControlReport: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Misc1DControlReport;
        kHIDUsage_BCS_2DControlReport: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_2DControlReport;
        kHIDUsage_BCS_Aiming_PointerMide: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Aiming_PointerMide;
        kHIDUsage_BCS_BarCodePresentSensor: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_BarCodePresentSensor;
        kHIDUsage_BCS_Class1ALaser: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Class1ALaser;
        kHIDUsage_BCS_Class2Laser: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Class2Laser;
        kHIDUsage_BCS_HeaterPresent: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_HeaterPresent;
        kHIDUsage_BCS_ContactScanner: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ContactScanner;
        kHIDUsage_BCS_ElectronicArticleSurveillanceNotification: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ElectronicArticleSurveillanceNotification;
        kHIDUsage_BCS_ConstantElectronicArticleSurveillance: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ConstantElectronicArticleSurveillance;
        kHIDUsage_BCS_ErrorIndication: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ErrorIndication;
        kHIDUsage_BCS_FixedBeeper: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_FixedBeeper;
        kHIDUsage_BCS_GoodDecodeIndication: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_GoodDecodeIndication;
        kHIDUsage_BCS_HandsFreeScanning: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_HandsFreeScanning;
        kHIDUsage_BCS_IntrinsicallySafe: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_IntrinsicallySafe;
        kHIDUsage_BCS_KlasseEinsLaser: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_KlasseEinsLaser;
        kHIDUsage_BCS_LongRangeScanner: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_LongRangeScanner;
        kHIDUsage_BCS_MirrorSpeedControl: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_MirrorSpeedControl;
        kHIDUsage_BCS_NotOnFileIndication: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_NotOnFileIndication;
        kHIDUsage_BCS_ProgrammableBeeper: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ProgrammableBeeper;
        kHIDUsage_BCS_Triggerless: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Triggerless;
        kHIDUsage_BCS_Wand: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Wand;
        kHIDUsage_BCS_WaterResistant: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_WaterResistant;
        kHIDUsage_BCS_MultiRangeScanner: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_MultiRangeScanner;
        kHIDUsage_BCS_ProximitySensor: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ProximitySensor;
        kHIDUsage_BCS_FragmentDecoding: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_FragmentDecoding;
        kHIDUsage_BCS_ScannerReadConfidence: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ScannerReadConfidence;
        kHIDUsage_BCS_DataPrefix: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_DataPrefix;
        kHIDUsage_BCS_PrefixAIMI: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_PrefixAIMI;
        kHIDUsage_BCS_PrefixNone: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_PrefixNone;
        kHIDUsage_BCS_PrefixProprietary: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_PrefixProprietary;
        kHIDUsage_BCS_ActiveTime: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ActiveTime;
        kHIDUsage_BCS_AimingLaserPattern: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_AimingLaserPattern;
        kHIDUsage_BCS_BarCodePresent: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_BarCodePresent;
        kHIDUsage_BCS_BeeperState: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_BeeperState;
        kHIDUsage_BCS_LaserOnTime: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_LaserOnTime;
        kHIDUsage_BCS_LaserState: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_LaserState;
        kHIDUsage_BCS_LockoutTime: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_LockoutTime;
        kHIDUsage_BCS_MotorState: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_MotorState;
        kHIDUsage_BCS_MotorTimeout: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_MotorTimeout;
        kHIDUsage_BCS_PowerOnResetScanner: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_PowerOnResetScanner;
        kHIDUsage_BCS_PreventReadOfBarcodes: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_PreventReadOfBarcodes;
        kHIDUsage_BCS_InitiateBarcodeRead: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_InitiateBarcodeRead;
        kHIDUsage_BCS_TriggerState: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_TriggerState;
        kHIDUsage_BCS_TriggerMode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_TriggerMode;
        kHIDUsage_BCS_TriggerModeBlinkingLaserOn: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_TriggerModeBlinkingLaserOn;
        kHIDUsage_BCS_TriggerModeContinuousLaserOn: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_TriggerModeContinuousLaserOn;
        kHIDUsage_BCS_TriggerModeLaserOnWhilePulled: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_TriggerModeLaserOnWhilePulled;
        kHIDUsage_BCS_TriggerModeLaserStaysOnAfterTriggerRelease: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_TriggerModeLaserStaysOnAfterTriggerRelease;
        kHIDUsage_BCS_CommitParametersToNVM: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_CommitParametersToNVM;
        kHIDUsage_BCS_ParameterScanning: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ParameterScanning;
        kHIDUsage_BCS_ParametersChanged: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ParametersChanged;
        kHIDUsage_BCS_SetParameterDefaultValues: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_SetParameterDefaultValues;
        kHIDUsage_BCS_ScannerInCradle: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ScannerInCradle;
        kHIDUsage_BCS_ScannerInRange: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ScannerInRange;
        kHIDUsage_BCS_AimDuration: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_AimDuration;
        kHIDUsage_BCS_GoodReadLampDuration: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_GoodReadLampDuration;
        kHIDUsage_BCS_GoodReadLampIntensity: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_GoodReadLampIntensity;
        kHIDUsage_BCS_GoodReadLED: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_GoodReadLED;
        kHIDUsage_BCS_GoodReadToneFrequency: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_GoodReadToneFrequency;
        kHIDUsage_BCS_GoodReadToneLength: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_GoodReadToneLength;
        kHIDUsage_BCS_GoodReadToneVolume: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_GoodReadToneVolume;
        kHIDUsage_BCS_NoReadMessage: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_NoReadMessage;
        kHIDUsage_BCS_NotOnFileVolume: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_NotOnFileVolume;
        kHIDUsage_BCS_PowerupBeep: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_PowerupBeep;
        kHIDUsage_BCS_SoundErrorBeep: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_SoundErrorBeep;
        kHIDUsage_BCS_SoundGoodReadBeep: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_SoundGoodReadBeep;
        kHIDUsage_BCS_SoundNotOnFileBeep: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_SoundNotOnFileBeep;
        kHIDUsage_BCS_GoodReadWhenToWrite: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_GoodReadWhenToWrite;
        kHIDUsage_BCS_GRWTIAfterDecode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_GRWTIAfterDecode;
        kHIDUsage_BCS_GRWTIBeep_LampAfterTransmit: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_GRWTIBeep_LampAfterTransmit;
        kHIDUsage_BCS_GRWTINoBeep_LampUseAtAll: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_GRWTINoBeep_LampUseAtAll;
        kHIDUsage_BCS_BooklandEAN: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_BooklandEAN;
        kHIDUsage_BCS_ConvertEAN8To13Type: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ConvertEAN8To13Type;
        kHIDUsage_BCS_ConvertUPCAToEAN_13: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ConvertUPCAToEAN_13;
        kHIDUsage_BCS_ConvertUPC_EToA: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ConvertUPC_EToA;
        kHIDUsage_BCS_EAN_13: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_EAN_13;
        kHIDUsage_BCS_EAN_8: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_EAN_8;
        kHIDUsage_BCS_EAN_99_128_Mandatory: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_EAN_99_128_Mandatory;
        kHIDUsage_BCS_EAN_99_P5_128_Optional: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_EAN_99_P5_128_Optional;
        kHIDUsage_BCS_UPC_EAN: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_UPC_EAN;
        kHIDUsage_BCS_UPC_EANCouponCode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_UPC_EANCouponCode;
        kHIDUsage_BCS_UPC_EANPeriodicals: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_UPC_EANPeriodicals;
        kHIDUsage_BCS_UPC_A: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_UPC_A;
        kHIDUsage_BCS_UPC_AWith128Mandatory: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_UPC_AWith128Mandatory;
        kHIDUsage_BCS_UPC_AWith128Optical: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_UPC_AWith128Optical;
        kHIDUsage_BCS_UPC_AWithP5Optional: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_UPC_AWithP5Optional;
        kHIDUsage_BCS_UPC_E: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_UPC_E;
        kHIDUsage_BCS_UPC_E1: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_UPC_E1;
        kHIDUsage_BCS_Periodical: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Periodical;
        kHIDUsage_BCS_PeriodicalAutoDiscriminatePlus2: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_PeriodicalAutoDiscriminatePlus2;
        kHIDUsage_BCS_PeriodicalOnlyDecodeWithPlus2: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_PeriodicalOnlyDecodeWithPlus2;
        kHIDUsage_BCS_PeriodicalIgnorePlus2: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_PeriodicalIgnorePlus2;
        kHIDUsage_BCS_PeriodicalAutoDiscriminatePlus5: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_PeriodicalAutoDiscriminatePlus5;
        kHIDUsage_BCS_PeriodicalOnlyDecodeWithPlus5: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_PeriodicalOnlyDecodeWithPlus5;
        kHIDUsage_BCS_PeriodicalIgnorePlus5: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_PeriodicalIgnorePlus5;
        kHIDUsage_BCS_Check: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Check;
        kHIDUsage_BCS_CheckDisablePrice: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_CheckDisablePrice;
        kHIDUsage_BCS_CheckEnable4DigitPrice: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_CheckEnable4DigitPrice;
        kHIDUsage_BCS_CheckEnable5DigitPrice: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_CheckEnable5DigitPrice;
        kHIDUsage_BCS_CheckEnableEuropean4DigitPrice: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_CheckEnableEuropean4DigitPrice;
        kHIDUsage_BCS_CheckEnableEuropean5DigitPrice: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_CheckEnableEuropean5DigitPrice;
        kHIDUsage_BCS_EANTwoLabel: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_EANTwoLabel;
        kHIDUsage_BCS_EANThreeLabel: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_EANThreeLabel;
        kHIDUsage_BCS_EAN8FlagDigit1: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_EAN8FlagDigit1;
        kHIDUsage_BCS_EAN8FlagDigit2: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_EAN8FlagDigit2;
        kHIDUsage_BCS_EAN8FlagDigit3: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_EAN8FlagDigit3;
        kHIDUsage_BCS_EAN13FlagDigit1: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_EAN13FlagDigit1;
        kHIDUsage_BCS_EAN13FlagDigit2: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_EAN13FlagDigit2;
        kHIDUsage_BCS_EAN13FlagDigit3: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_EAN13FlagDigit3;
        kHIDUsage_BCS_AddEAN2_3LabelDefinition: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_AddEAN2_3LabelDefinition;
        kHIDUsage_BCS_ClearAllEAN2_3LabelDefinitions: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ClearAllEAN2_3LabelDefinitions;
        kHIDUsage_BCS_Codabar: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Codabar;
        kHIDUsage_BCS_Code128: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Code128;
        kHIDUsage_BCS_Code39: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Code39;
        kHIDUsage_BCS_Code93: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Code93;
        kHIDUsage_BCS_FullASCIIConversion: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_FullASCIIConversion;
        kHIDUsage_BCS_Interleaved2of5: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Interleaved2of5;
        kHIDUsage_BCS_ItalianPharmacyCode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ItalianPharmacyCode;
        kHIDUsage_BCS_MSI_Plessey: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_MSI_Plessey;
        kHIDUsage_BCS_Standard2of5IATA: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Standard2of5IATA;
        kHIDUsage_BCS_Standard2of5: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Standard2of5;
        kHIDUsage_BCS_TransmitStart_Stop: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_TransmitStart_Stop;
        kHIDUsage_BCS_TriOptic: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_TriOptic;
        kHIDUsage_BCS_UCC_EAN_128: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_UCC_EAN_128;
        kHIDUsage_BCS_CheckDigit: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_CheckDigit;
        kHIDUsage_BCS_CheckDigitDisable: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_CheckDigitDisable;
        kHIDUsage_BCS_CheckDigitEnableInterleaved2of5OPCC: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_CheckDigitEnableInterleaved2of5OPCC;
        kHIDUsage_BCS_CheckDigitEnableInterleaved2of5USS: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_CheckDigitEnableInterleaved2of5USS;
        kHIDUsage_BCS_CheckDigitEnableStandard2of5OPCC: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_CheckDigitEnableInterleaved2of5OPCC;
        kHIDUsage_BCS_CheckDigitEnableStandard2of5USS: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_CheckDigitEnableInterleaved2of5USS;
        kHIDUsage_BCS_CheckDigitEnableOneMSIPlessey: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_CheckDigitEnableOneMSIPlessey;
        kHIDUsage_BCS_CheckDigitEnableTwoMSIPlessey: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_CheckDigitEnableTwoMSIPlessey;
        kHIDUsage_BCS_CheckDigitCodabarEnable: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_CheckDigitCodabarEnable;
        kHIDUsage_BCS_CheckDigitCode99Enable: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_CheckDigitCode99Enable;
        kHIDUsage_BCS_TransmitCheckDigit: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_TransmitCheckDigit;
        kHIDUsage_BCS_DisableCheckDigitTransmit: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_DisableCheckDigitTransmit;
        kHIDUsage_BCS_EnableCheckDigitTransmit: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_EnableCheckDigitTransmit;
        kHIDUsage_BCS_SymbologyIdentifier1: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_SymbologyIdentifier1;
        kHIDUsage_BCS_SymbologyIdentifier2: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_SymbologyIdentifier2;
        kHIDUsage_BCS_SymbologyIdentifier3: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_SymbologyIdentifier3;
        kHIDUsage_BCS_DecodedData: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_DecodedData;
        kHIDUsage_BCS_DecodeDataContinued: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_DecodeDataContinued;
        kHIDUsage_BCS_BarSpaceData: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_BarSpaceData;
        kHIDUsage_BCS_ScannerDataAccuracy: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ScannerDataAccuracy;
        kHIDUsage_BCS_RawDataPolarity: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_RawDataPolarity;
        kHIDUsage_BCS_PolarityInvertedBarCode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_PolarityInvertedBarCode;
        kHIDUsage_BCS_PolarityNormalBarCode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_PolarityInvertedBarCode;
        kHIDUsage_BCS_MinimumLengthToDecode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_MinimumLengthToDecode;
        kHIDUsage_BCS_MaximumLengthToDecode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_MaximumLengthToDecode;
        kHIDUsage_BCS_FirstDiscreteLengthToDecode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_FirstDiscreteLengthToDecode;
        kHIDUsage_BCS_SecondDiscreteLengthToDecode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_SecondDiscreteLengthToDecode;
        kHIDUsage_BCS_DataLengthMethod: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_DataLengthMethod;
        kHIDUsage_BCS_DLMethodReadAny: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_DLMethodReadAny;
        kHIDUsage_BCS_DLMethodCheckInRange: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_DLMethodCheckInRange;
        kHIDUsage_BCS_DLMethodCheckForDiscrete: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_DLMethodCheckForDiscrete;
        kHIDUsage_BCS_AztecCode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_AztecCode;
        kHIDUsage_BCS_BC412: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_BC412;
        kHIDUsage_BCS_ChannelCode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_ChannelCode;
        kHIDUsage_BCS_Code16: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Code16;
        kHIDUsage_BCS_Code32: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Code32;
        kHIDUsage_BCS_Code49: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Code49;
        kHIDUsage_BCS_CodeOne: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_CodeOne;
        kHIDUsage_BCS_Colorcode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_Colorcode;
        kHIDUsage_BCS_DataMatrix: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_DataMatrix;
        kHIDUsage_BCS_MaxiCode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_MaxiCode;
        kHIDUsage_BCS_MicroPDF: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_MicroPDF;
        kHIDUsage_BCS_PDF_417: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_PDF_417;
        kHIDUsage_BCS_PosiCode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_PosiCode;
        kHIDUsage_BCS_QRCode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_QRCode;
        kHIDUsage_BCS_SuperCode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_SuperCode;
        kHIDUsage_BCS_UltraCode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_UltraCode;
        kHIDUsage_BCS_USB_5_SlugCode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_USB_5_SlugCode;
        kHIDUsage_BCS_VeriCode: import("./commands/hid-event").HIDUsageBCSEvent.kHIDUsage_BCS_VeriCode;
        kHIDUsage_WD_Undefined: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_Undefined;
        kHIDUsage_WD_WeighingDevice: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_WeighingDevice;
        kHIDUsage_WD_ScaleScaleDevice: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleScaleDevice;
        kHIDUsage_WD_ScaleScaleClassIMetricCL: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleScaleClassIMetricCL;
        kHIDUsage_WD_ScaleScaleClassIMetric: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleScaleClassIMetric;
        kHIDUsage_WD_ScaleScaleClassIIMetric: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleScaleClassIIMetric;
        kHIDUsage_WD_ScaleScaleClassIIIMetric: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleScaleClassIIIMetric;
        kHIDUsage_WD_ScaleScaleClassIIILMetric: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleScaleClassIIILMetric;
        kHIDUsage_WD_ScaleScaleClassIVMetric: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleScaleClassIVMetric;
        kHIDUsage_WD_ScaleScaleClassIIIEnglish: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleScaleClassIIIEnglish;
        kHIDUsage_WD_ScaleScaleClassIIILEnglish: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleScaleClassIIILEnglish;
        kHIDUsage_WD_ScaleScaleClassIVEnglish: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleScaleClassIVEnglish;
        kHIDUsage_WD_ScaleScaleClassGeneric: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleScaleClassGeneric;
        kHIDUsage_WD_ScaleAtrributeReport: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleAtrributeReport;
        kHIDUsage_WD_ScaleControlReport: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleControlReport;
        kHIDUsage_WD_ScaleDataReport: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleDataReport;
        kHIDUsage_WD_ScaleStatusReport: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleStatusReport;
        kHIDUsage_WD_ScaleWeightLimitReport: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleWeightLimitReport;
        kHIDUsage_WD_ScaleStatisticsReport: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleStatisticsReport;
        kHIDUsage_WD_DataWeight: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_DataWeight;
        kHIDUsage_WD_DataScaling: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_DataScaling;
        kHIDUsage_WD_WeightUnit: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_WeightUnit;
        kHIDUsage_WD_WeightUnitMilligram: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_WeightUnitMilligram;
        kHIDUsage_WD_WeightUnitGram: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_WeightUnitGram;
        kHIDUsage_WD_WeightUnitKilogram: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_WeightUnitKilogram;
        kHIDUsage_WD_WeightUnitCarats: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_WeightUnitCarats;
        kHIDUsage_WD_WeightUnitTaels: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_WeightUnitTaels;
        kHIDUsage_WD_WeightUnitGrains: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_WeightUnitGrains;
        kHIDUsage_WD_WeightUnitPennyweights: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_WeightUnitPennyweights;
        kHIDUsage_WD_WeightUnitMetricTon: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_WeightUnitMetricTon;
        kHIDUsage_WD_WeightUnitAvoirTon: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_WeightUnitAvoirTon;
        kHIDUsage_WD_WeightUnitTroyOunce: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_WeightUnitTroyOunce;
        kHIDUsage_WD_WeightUnitOunce: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_WeightUnitOunce;
        kHIDUsage_WD_WeightUnitPound: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_WeightUnitPound;
        kHIDUsage_WD_CalibrationCount: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_CalibrationCount;
        kHIDUsage_WD_RezeroCount: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_RezeroCount;
        kHIDUsage_WD_ScaleStatus: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleStatus;
        kHIDUsage_WD_ScaleStatusFault: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleStatusFault;
        kHIDUsage_WD_ScaleStatusStableAtZero: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleStatusStableAtZero;
        kHIDUsage_WD_ScaleStatusInMotion: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleStatusInMotion;
        kHIDUsage_WD_ScaleStatusWeightStable: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleStatusWeightStable;
        kHIDUsage_WD_ScaleStatusUnderZero: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleStatusUnderZero;
        kHIDUsage_WD_ScaleStatusOverWeightLimit: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleStatusOverWeightLimit;
        kHIDUsage_WD_ScaleStatusRequiresCalibration: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleStatusRequiresCalibration;
        kHIDUsage_WD_ScaleStatusRequiresRezeroing: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ScaleStatusRequiresRezeroing;
        kHIDUsage_WD_ZeroScale: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_ZeroScale;
        kHIDUsage_WD_EnforcedZeroReturn: import("./commands/hid-event").HIDUsageWeighingDeviceEvent.kHIDUsage_WD_EnforcedZeroReturn;
        kHIDUsage_KeyboardErrorRollOver: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardErrorRollOver;
        kHIDUsage_KeyboardPOSTFail: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardPOSTFail;
        kHIDUsage_KeyboardErrorUndefined: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardErrorUndefined;
        kHIDUsage_KeyboardA: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardA;
        kHIDUsage_KeyboardB: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardB;
        kHIDUsage_KeyboardC: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardC;
        kHIDUsage_KeyboardD: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardD;
        kHIDUsage_KeyboardE: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardE;
        kHIDUsage_KeyboardF: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF;
        kHIDUsage_KeyboardG: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardG;
        kHIDUsage_KeyboardH: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardH;
        kHIDUsage_KeyboardI: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardI;
        kHIDUsage_KeyboardJ: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardJ;
        kHIDUsage_KeyboardK: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardK;
        kHIDUsage_KeyboardL: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardL;
        kHIDUsage_KeyboardM: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardM;
        kHIDUsage_KeyboardN: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardN;
        kHIDUsage_KeyboardO: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardO;
        kHIDUsage_KeyboardP: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardP;
        kHIDUsage_KeyboardQ: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardQ;
        kHIDUsage_KeyboardR: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardR;
        kHIDUsage_KeyboardS: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardS;
        kHIDUsage_KeyboardT: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardT;
        kHIDUsage_KeyboardU: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardU;
        kHIDUsage_KeyboardV: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardV;
        kHIDUsage_KeyboardW: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardW;
        kHIDUsage_KeyboardX: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardX;
        kHIDUsage_KeyboardY: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardY;
        kHIDUsage_KeyboardZ: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardZ;
        kHIDUsage_Keyboard1: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keyboard1;
        kHIDUsage_Keyboard2: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keyboard2;
        kHIDUsage_Keyboard3: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keyboard3;
        kHIDUsage_Keyboard4: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keyboard4;
        kHIDUsage_Keyboard5: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keyboard5;
        kHIDUsage_Keyboard6: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keyboard6;
        kHIDUsage_Keyboard7: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keyboard7;
        kHIDUsage_Keyboard8: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keyboard8;
        kHIDUsage_Keyboard9: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keyboard9;
        kHIDUsage_Keyboard0: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keyboard0;
        kHIDUsage_KeyboardReturnOrEnter: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardReturnOrEnter;
        kHIDUsage_KeyboardEscape: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardEscape;
        kHIDUsage_KeyboardDeleteOrBackspace: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardDeleteOrBackspace;
        kHIDUsage_KeyboardTab: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardTab;
        kHIDUsage_KeyboardSpacebar: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardSpacebar;
        kHIDUsage_KeyboardHyphen: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardHyphen;
        kHIDUsage_KeyboardEqualSign: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardEqualSign;
        kHIDUsage_KeyboardOpenBracket: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardOpenBracket;
        kHIDUsage_KeyboardCloseBracket: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardCloseBracket;
        kHIDUsage_KeyboardBackslash: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardBackslash;
        kHIDUsage_KeyboardNonUSPound: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardNonUSPound;
        kHIDUsage_KeyboardSemicolon: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardSemicolon;
        kHIDUsage_KeyboardQuote: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardQuote;
        kHIDUsage_KeyboardGraveAccentAndTilde: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardGraveAccentAndTilde;
        kHIDUsage_KeyboardComma: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardComma;
        kHIDUsage_KeyboardPeriod: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardPeriod;
        kHIDUsage_KeyboardSlash: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardSlash;
        kHIDUsage_KeyboardCapsLock: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardCapsLock;
        kHIDUsage_KeyboardF1: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF1;
        kHIDUsage_KeyboardF2: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF2;
        kHIDUsage_KeyboardF3: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF3;
        kHIDUsage_KeyboardF4: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF4;
        kHIDUsage_KeyboardF5: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF5;
        kHIDUsage_KeyboardF6: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF6;
        kHIDUsage_KeyboardF7: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF7;
        kHIDUsage_KeyboardF8: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF8;
        kHIDUsage_KeyboardF9: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF9;
        kHIDUsage_KeyboardF10: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF10;
        kHIDUsage_KeyboardF11: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF11;
        kHIDUsage_KeyboardF12: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF12;
        kHIDUsage_KeyboardPrintScreen: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardPrintScreen;
        kHIDUsage_KeyboardScrollLock: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardScrollLock;
        kHIDUsage_KeyboardPause: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardPause;
        kHIDUsage_KeyboardInsert: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardInsert;
        kHIDUsage_KeyboardHome: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardHome;
        kHIDUsage_KeyboardPageUp: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardPageUp;
        kHIDUsage_KeyboardDeleteForward: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardDeleteForward;
        kHIDUsage_KeyboardEnd: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardEnd;
        kHIDUsage_KeyboardPageDown: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardPageDown;
        kHIDUsage_KeyboardRightArrow: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardRightArrow;
        kHIDUsage_KeyboardLeftArrow: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardLeftArrow;
        kHIDUsage_KeyboardDownArrow: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardDownArrow;
        kHIDUsage_KeyboardUpArrow: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardUpArrow;
        kHIDUsage_KeypadNumLock: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeypadNumLock;
        kHIDUsage_KeypadSlash: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeypadSlash;
        kHIDUsage_KeypadAsterisk: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeypadAsterisk;
        kHIDUsage_KeypadHyphen: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeypadHyphen;
        kHIDUsage_KeypadPlus: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeypadPlus;
        kHIDUsage_KeypadEnter: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeypadEnter;
        kHIDUsage_Keypad1: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keypad1;
        kHIDUsage_Keypad2: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keypad2;
        kHIDUsage_Keypad3: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keypad3;
        kHIDUsage_Keypad4: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keypad4;
        kHIDUsage_Keypad5: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keypad5;
        kHIDUsage_Keypad6: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keypad6;
        kHIDUsage_Keypad7: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keypad7;
        kHIDUsage_Keypad8: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keypad8;
        kHIDUsage_Keypad9: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keypad9;
        kHIDUsage_Keypad0: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keypad0;
        kHIDUsage_KeypadPeriod: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeypadPeriod;
        kHIDUsage_KeyboardNonUSBackslash: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardNonUSBackslash;
        kHIDUsage_KeyboardApplication: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardApplication;
        kHIDUsage_KeyboardPower: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardPower;
        kHIDUsage_KeypadEqualSign: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeypadEqualSign;
        kHIDUsage_KeyboardF13: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF13;
        kHIDUsage_KeyboardF14: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF14;
        kHIDUsage_KeyboardF15: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF15;
        kHIDUsage_KeyboardF16: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF16;
        kHIDUsage_KeyboardF17: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF17;
        kHIDUsage_KeyboardF18: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF18;
        kHIDUsage_KeyboardF19: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF19;
        kHIDUsage_KeyboardF20: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF20;
        kHIDUsage_KeyboardF21: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF21;
        kHIDUsage_KeyboardF22: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF22;
        kHIDUsage_KeyboardF23: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF23;
        kHIDUsage_KeyboardF24: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardF24;
        kHIDUsage_KeyboardExecute: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardExecute;
        kHIDUsage_KeyboardHelp: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardHelp;
        kHIDUsage_KeyboardMenu: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardMenu;
        kHIDUsage_KeyboardSelect: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardSelect;
        kHIDUsage_KeyboardStop: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardStop;
        kHIDUsage_KeyboardAgain: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardAgain;
        kHIDUsage_KeyboardUndo: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardUndo;
        kHIDUsage_KeyboardCut: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardCut;
        kHIDUsage_KeyboardCopy: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardCopy;
        kHIDUsage_KeyboardPaste: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardPaste;
        kHIDUsage_KeyboardFind: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardFind;
        kHIDUsage_KeyboardMute: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardMute;
        kHIDUsage_KeyboardVolumeUp: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardVolumeUp;
        kHIDUsage_KeyboardVolumeDown: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardVolumeDown;
        kHIDUsage_KeyboardLockingCapsLock: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardLockingCapsLock;
        kHIDUsage_KeyboardLockingNumLock: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardLockingNumLock;
        kHIDUsage_KeyboardLockingScrollLock: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardLockingScrollLock;
        kHIDUsage_KeypadComma: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeypadComma;
        kHIDUsage_KeypadEqualSignAS400: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeypadEqualSignAS400;
        kHIDUsage_KeyboardInternational1: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardInternational1;
        kHIDUsage_KeyboardInternational2: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardInternational2;
        kHIDUsage_KeyboardInternational3: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardInternational3;
        kHIDUsage_KeyboardInternational4: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardInternational4;
        kHIDUsage_KeyboardInternational5: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardInternational5;
        kHIDUsage_KeyboardInternational6: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardInternational6;
        kHIDUsage_KeyboardInternational7: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardInternational7;
        kHIDUsage_KeyboardInternational8: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardInternational8;
        kHIDUsage_KeyboardInternational9: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardInternational9;
        kHIDUsage_KeyboardLANG1: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardLANG1;
        kHIDUsage_KeyboardLANG2: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardLANG2;
        kHIDUsage_KeyboardLANG3: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardLANG3;
        kHIDUsage_KeyboardLANG4: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardLANG4;
        kHIDUsage_KeyboardLANG5: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardLANG5;
        kHIDUsage_KeyboardLANG6: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardLANG6;
        kHIDUsage_KeyboardLANG7: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardLANG7;
        kHIDUsage_KeyboardLANG8: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardLANG8;
        kHIDUsage_KeyboardLANG9: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardLANG9;
        kHIDUsage_KeyboardAlternateErase: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardAlternateErase;
        kHIDUsage_KeyboardSysReqOrAttention: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardSysReqOrAttention;
        kHIDUsage_KeyboardCancel: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardCancel;
        kHIDUsage_KeyboardClear: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardClear;
        kHIDUsage_KeyboardPrior: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardPrior;
        kHIDUsage_KeyboardReturn: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardReturn;
        kHIDUsage_KeyboardSeparator: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardSeparator;
        kHIDUsage_KeyboardOut: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardOut;
        kHIDUsage_KeyboardOper: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardOper;
        kHIDUsage_KeyboardClearOrAgain: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardClearOrAgain;
        kHIDUsage_KeyboardCrSelOrProps: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardCrSelOrProps;
        kHIDUsage_KeyboardExSel: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardExSel;
        kHIDUsage_KeyboardLeftControl: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardLeftControl;
        kHIDUsage_KeyboardLeftShift: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardLeftShift;
        kHIDUsage_KeyboardLeftAlt: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardLeftAlt;
        kHIDUsage_KeyboardLeftGUI: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardLeftGUI;
        kHIDUsage_KeyboardRightControl: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardRightControl;
        kHIDUsage_KeyboardRightShift: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardRightShift;
        kHIDUsage_KeyboardRightAlt: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardRightAlt;
        kHIDUsage_KeyboardRightGUI: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_KeyboardRightGUI;
        kHIDUsage_Keyboard_Reserved: import("./commands/hid-event").HIDUsageKeyboardEvent.kHIDUsage_Keyboard_Reserved;
        kHIDUsage_GD_Pointer: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Pointer;
        kHIDUsage_GD_Mouse: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Mouse;
        kHIDUsage_GD_Joystick: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Joystick;
        kHIDUsage_GD_GamePad: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_GamePad;
        kHIDUsage_GD_Keyboard: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Keyboard;
        kHIDUsage_GD_Keypad: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Keypad;
        kHIDUsage_GD_MultiAxisController: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_MultiAxisController;
        kHIDUsage_GD_X: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_X;
        kHIDUsage_GD_Y: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Y;
        kHIDUsage_GD_Z: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Z;
        kHIDUsage_GD_Rx: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Rx;
        kHIDUsage_GD_Ry: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Ry;
        kHIDUsage_GD_Rz: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Rz;
        kHIDUsage_GD_Slider: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Slider;
        kHIDUsage_GD_Dial: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Dial;
        kHIDUsage_GD_Wheel: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Wheel;
        kHIDUsage_GD_Hatswitch: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Hatswitch;
        kHIDUsage_GD_CountedBuffer: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_CountedBuffer;
        kHIDUsage_GD_ByteCount: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_ByteCount;
        kHIDUsage_GD_MotionWakeup: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_MotionWakeup;
        kHIDUsage_GD_Start: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Start;
        kHIDUsage_GD_Select: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Select;
        kHIDUsage_GD_Vx: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Vx;
        kHIDUsage_GD_Vy: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Vy;
        kHIDUsage_GD_Vz: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Vz;
        kHIDUsage_GD_Vbrx: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Vbrx;
        kHIDUsage_GD_Vbry: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Vbry;
        kHIDUsage_GD_Vbrz: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Vbrz;
        kHIDUsage_GD_Vno: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Vno;
        kHIDUsage_GD_SystemControl: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_SystemControl;
        kHIDUsage_GD_SystemPowerDown: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_SystemPowerDown;
        kHIDUsage_GD_SystemSleep: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_SystemSleep;
        kHIDUsage_GD_SystemWakeUp: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_SystemWakeUp;
        kHIDUsage_GD_SystemContextMenu: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_SystemContextMenu;
        kHIDUsage_GD_SystemMainMenu: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_SystemMainMenu;
        kHIDUsage_GD_SystemAppMenu: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_SystemAppMenu;
        kHIDUsage_GD_SystemMenuHelp: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_SystemMenuHelp;
        kHIDUsage_GD_SystemMenuExit: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_SystemMenuExit;
        kHIDUsage_GD_SystemMenu: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_SystemMenu;
        kHIDUsage_GD_SystemMenuRight: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_SystemMenuRight;
        kHIDUsage_GD_SystemMenuLeft: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_SystemMenuLeft;
        kHIDUsage_GD_SystemMenuUp: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_SystemMenuUp;
        kHIDUsage_GD_SystemMenuDown: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_SystemMenuDown;
        kHIDUsage_GD_DPadUp: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_DPadUp;
        kHIDUsage_GD_DPadDown: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_DPadDown;
        kHIDUsage_GD_DPadRight: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_DPadRight;
        kHIDUsage_GD_DPadLeft: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_DPadLeft;
        kHIDUsage_GD_Reserved: import("./commands/hid-event").HIDUsageGenericDesktopEvent.kHIDUsage_GD_Reserved;
        kHIDUsage_Button_1: import("./commands/hid-event").HIDUsageButtonEvent.kHIDUsage_Button_1;
        kHIDUsage_Button_2: import("./commands/hid-event").HIDUsageButtonEvent.kHIDUsage_Button_2;
        kHIDUsage_Button_3: import("./commands/hid-event").HIDUsageButtonEvent.kHIDUsage_Button_3;
        kHIDUsage_Button_4: import("./commands/hid-event").HIDUsageButtonEvent.kHIDUsage_Button_4;
        kHIDUsage_Button_65535: import("./commands/hid-event").HIDUsageButtonEvent.kHIDUsage_Button_65535;
        kHIDUsage_LED_NumLock: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_NumLock;
        kHIDUsage_LED_CapsLock: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_CapsLock;
        kHIDUsage_LED_ScrollLock: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_ScrollLock;
        kHIDUsage_LED_Compose: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Compose;
        kHIDUsage_LED_Kana: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Kana;
        kHIDUsage_LED_Power: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Power;
        kHIDUsage_LED_Shift: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Shift;
        kHIDUsage_LED_DoNotDisturb: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_DoNotDisturb;
        kHIDUsage_LED_Mute: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Mute;
        kHIDUsage_LED_ToneEnable: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_ToneEnable;
        kHIDUsage_LED_HighCutFilter: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_HighCutFilter;
        kHIDUsage_LED_LowCutFilter: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_LowCutFilter;
        kHIDUsage_LED_EqualizerEnable: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_EqualizerEnable;
        kHIDUsage_LED_SoundFieldOn: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_SoundFieldOn;
        kHIDUsage_LED_SurroundOn: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_SurroundOn;
        kHIDUsage_LED_Repeat: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Repeat;
        kHIDUsage_LED_Stereo: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Stereo;
        kHIDUsage_LED_SamplingRateDetect: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_SamplingRateDetect;
        kHIDUsage_LED_Spinning: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Spinning;
        kHIDUsage_LED_CAV: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_CAV;
        kHIDUsage_LED_CLV: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_CLV;
        kHIDUsage_LED_RecordingFormatDetect: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_RecordingFormatDetect;
        kHIDUsage_LED_OffHook: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_OffHook;
        kHIDUsage_LED_Ring: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Ring;
        kHIDUsage_LED_MessageWaiting: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_MessageWaiting;
        kHIDUsage_LED_DataMode: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_DataMode;
        kHIDUsage_LED_BatteryOperation: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_BatteryOperation;
        kHIDUsage_LED_BatteryOK: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_BatteryOK;
        kHIDUsage_LED_BatteryLow: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_BatteryLow;
        kHIDUsage_LED_Speaker: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Speaker;
        kHIDUsage_LED_HeadSet: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_HeadSet;
        kHIDUsage_LED_Hold: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Hold;
        kHIDUsage_LED_Microphone: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Microphone;
        kHIDUsage_LED_Coverage: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Coverage;
        kHIDUsage_LED_NightMode: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_NightMode;
        kHIDUsage_LED_SendCalls: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_SendCalls;
        kHIDUsage_LED_CallPickup: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_CallPickup;
        kHIDUsage_LED_Conference: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Conference;
        kHIDUsage_LED_StandBy: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_StandBy;
        kHIDUsage_LED_CameraOn: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_CameraOn;
        kHIDUsage_LED_CameraOff: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_CameraOff;
        kHIDUsage_LED_OnLine: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_OnLine;
        kHIDUsage_LED_OffLine: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_OffLine;
        kHIDUsage_LED_Busy: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Busy;
        kHIDUsage_LED_Ready: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Ready;
        kHIDUsage_LED_PaperOut: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_PaperOut;
        kHIDUsage_LED_PaperJam: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_PaperJam;
        kHIDUsage_LED_Remote: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Remote;
        kHIDUsage_LED_Forward: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Forward;
        kHIDUsage_LED_Reverse: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Reverse;
        kHIDUsage_LED_Stop: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Stop;
        kHIDUsage_LED_Rewind: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Rewind;
        kHIDUsage_LED_FastForward: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_FastForward;
        kHIDUsage_LED_Play: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Play;
        kHIDUsage_LED_Pause: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Pause;
        kHIDUsage_LED_Record: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Record;
        kHIDUsage_LED_Error: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Error;
        kHIDUsage_LED_Usage: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Usage;
        kHIDUsage_LED_UsageInUseIndicator: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_UsageInUseIndicator;
        kHIDUsage_LED_UsageMultiModeIndicator: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_UsageMultiModeIndicator;
        kHIDUsage_LED_IndicatorOn: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_IndicatorOn;
        kHIDUsage_LED_IndicatorFlash: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_IndicatorFlash;
        kHIDUsage_LED_IndicatorSlowBlink: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_IndicatorSlowBlink;
        kHIDUsage_LED_IndicatorFastBlink: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_IndicatorFastBlink;
        kHIDUsage_LED_IndicatorOff: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_IndicatorOff;
        kHIDUsage_LED_FlashOnTime: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_FlashOnTime;
        kHIDUsage_LED_SlowBlinkOnTime: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_SlowBlinkOnTime;
        kHIDUsage_LED_SlowBlinkOffTime: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_SlowBlinkOffTime;
        kHIDUsage_LED_FastBlinkOnTime: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_FastBlinkOnTime;
        kHIDUsage_LED_FastBlinkOffTime: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_FastBlinkOffTime;
        kHIDUsage_LED_UsageIndicatorColor: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_UsageIndicatorColor;
        kHIDUsage_LED_IndicatorRed: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_IndicatorRed;
        kHIDUsage_LED_IndicatorGreen: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_IndicatorGreen;
        kHIDUsage_LED_IndicatorAmber: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_IndicatorAmber;
        kHIDUsage_LED_GenericIndicator: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_GenericIndicator;
        kHIDUsage_LED_SystemSuspend: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_SystemSuspend;
        kHIDUsage_LED_ExternalPowerConnected: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_ExternalPowerConnected;
        kHIDUsage_LED_Reserved: import("./commands/hid-event").HIDUsageLEDEvent.kHIDUsage_LED_Reserved;
        kHIDUsage_Dig_Digitizer: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_Digitizer;
        kHIDUsage_Dig_Pen: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_Pen;
        kHIDUsage_Dig_LightPen: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_LightPen;
        kHIDUsage_Dig_TouchScreen: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_TouchScreen;
        kHIDUsage_Dig_TouchPad: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_TouchPad;
        kHIDUsage_Dig_WhiteBoard: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_WhiteBoard;
        kHIDUsage_Dig_CoordinateMeasuringMachine: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_CoordinateMeasuringMachine;
        kHIDUsage_Dig_3DDigitizer: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_3DDigitizer;
        kHIDUsage_Dig_StereoPlotter: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_StereoPlotter;
        kHIDUsage_Dig_ArticulatedArm: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_ArticulatedArm;
        kHIDUsage_Dig_Armature: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_Armature;
        kHIDUsage_Dig_MultiplePointDigitizer: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_MultiplePointDigitizer;
        kHIDUsage_Dig_FreeSpaceWand: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_FreeSpaceWand;
        kHIDUsage_Dig_Stylus: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_Stylus;
        kHIDUsage_Dig_Puck: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_Puck;
        kHIDUsage_Dig_Finger: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_Finger;
        kHIDUsage_Dig_TipPressure: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_TipPressure;
        kHIDUsage_Dig_BarrelPressure: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_BarrelPressure;
        kHIDUsage_Dig_InRange: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_InRange;
        kHIDUsage_Dig_Touch: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_Touch;
        kHIDUsage_Dig_Untouch: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_Untouch;
        kHIDUsage_Dig_Tap: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_Tap;
        kHIDUsage_Dig_Quality: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_Quality;
        kHIDUsage_Dig_DataValid: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_DataValid;
        kHIDUsage_Dig_TransducerIndex: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_TransducerIndex;
        kHIDUsage_Dig_TabletFunctionKeys: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_TabletFunctionKeys;
        kHIDUsage_Dig_ProgramChangeKeys: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_ProgramChangeKeys;
        kHIDUsage_Dig_BatteryStrength: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_BatteryStrength;
        kHIDUsage_Dig_Invert: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_Invert;
        kHIDUsage_Dig_XTilt: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_XTilt;
        kHIDUsage_Dig_YTilt: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_YTilt;
        kHIDUsage_Dig_Azimuth: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_Azimuth;
        kHIDUsage_Dig_Altitude: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_Altitude;
        kHIDUsage_Dig_Twist: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_Twist;
        kHIDUsage_Dig_TipSwitch: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_TipSwitch;
        kHIDUsage_Dig_SecondaryTipSwitch: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_SecondaryTipSwitch;
        kHIDUsage_Dig_BarrelSwitch: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_BarrelSwitch;
        kHIDUsage_Dig_Eraser: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_Eraser;
        kHIDUsage_Dig_TabletPick: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_TabletPick;
        kHIDUsage_Dig_Reserved: import("./commands/hid-event").HIDUsageDigitizerEvent.kHIDUsage_Dig_Reserved;
        kHIDUsage_Csmr_ConsumerControl: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ConsumerControl;
        kHIDUsage_Csmr_NumericKeyPad: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_NumericKeyPad;
        kHIDUsage_Csmr_ProgrammableButtons: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ProgrammableButtons;
        kHIDUsage_Csmr_Plus10: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Plus10;
        kHIDUsage_Csmr_Plus100: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Plus100;
        kHIDUsage_Csmr_AMOrPM: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_AMOrPM;
        kHIDUsage_Csmr_Power: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Power;
        kHIDUsage_Csmr_Reset: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Reset;
        kHIDUsage_Csmr_Sleep: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Sleep;
        kHIDUsage_Csmr_SleepAfter: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_SleepAfter;
        kHIDUsage_Csmr_SleepMode: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_SleepMode;
        kHIDUsage_Csmr_Illumination: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Illumination;
        kHIDUsage_Csmr_FunctionButtons: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_FunctionButtons;
        kHIDUsage_Csmr_Menu: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Menu;
        kHIDUsage_Csmr_MenuPick: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MenuPick;
        kHIDUsage_Csmr_MenuUp: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MenuUp;
        kHIDUsage_Csmr_MenuDown: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MenuDown;
        kHIDUsage_Csmr_MenuLeft: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MenuLeft;
        kHIDUsage_Csmr_MenuRight: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MenuRight;
        kHIDUsage_Csmr_MenuEscape: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MenuEscape;
        kHIDUsage_Csmr_MenuValueIncrease: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MenuValueIncrease;
        kHIDUsage_Csmr_MenuValueDecrease: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MenuValueDecrease;
        kHIDUsage_Csmr_DataOnScreen: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_DataOnScreen;
        kHIDUsage_Csmr_ClosedCaption: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ClosedCaption;
        kHIDUsage_Csmr_ClosedCaptionSelect: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ClosedCaptionSelect;
        kHIDUsage_Csmr_VCROrTV: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_VCROrTV;
        kHIDUsage_Csmr_BroadcastMode: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_BroadcastMode;
        kHIDUsage_Csmr_Snapshot: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Snapshot;
        kHIDUsage_Csmr_Still: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Still;
        kHIDUsage_Csmr_Selection: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Selection;
        kHIDUsage_Csmr_Assign: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Assign;
        kHIDUsage_Csmr_ModeStep: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ModeStep;
        kHIDUsage_Csmr_RecallLast: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_RecallLast;
        kHIDUsage_Csmr_EnterChannel: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_EnterChannel;
        kHIDUsage_Csmr_OrderMovie: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_OrderMovie;
        kHIDUsage_Csmr_Channel: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Channel;
        kHIDUsage_Csmr_MediaSelection: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MediaSelection;
        kHIDUsage_Csmr_MediaSelectComputer: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MediaSelectComputer;
        kHIDUsage_Csmr_MediaSelectTV: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MediaSelectTV;
        kHIDUsage_Csmr_MediaSelectWWW: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MediaSelectWWW;
        kHIDUsage_Csmr_MediaSelectDVD: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MediaSelectDVD;
        kHIDUsage_Csmr_MediaSelectTelephone: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MediaSelectTelephone;
        kHIDUsage_Csmr_MediaSelectProgramGuide: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MediaSelectProgramGuide;
        kHIDUsage_Csmr_MediaSelectVideoPhone: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MediaSelectVideoPhone;
        kHIDUsage_Csmr_MediaSelectGames: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MediaSelectGames;
        kHIDUsage_Csmr_MediaSelectMessages: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MediaSelectMessages;
        kHIDUsage_Csmr_MediaSelectCD: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MediaSelectCD;
        kHIDUsage_Csmr_MediaSelectVCR: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MediaSelectVCR;
        kHIDUsage_Csmr_MediaSelectTuner: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MediaSelectTuner;
        kHIDUsage_Csmr_Quit: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Quit;
        kHIDUsage_Csmr_Help: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Help;
        kHIDUsage_Csmr_MediaSelectTape: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MediaSelectTape;
        kHIDUsage_Csmr_MediaSelectCable: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MediaSelectCable;
        kHIDUsage_Csmr_MediaSelectSatellite: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MediaSelectSatellite;
        kHIDUsage_Csmr_MediaSelectSecurity: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MediaSelectSecurity;
        kHIDUsage_Csmr_MediaSelectHome: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MediaSelectHome;
        kHIDUsage_Csmr_MediaSelectCall: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MediaSelectCall;
        kHIDUsage_Csmr_ChannelIncrement: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ChannelIncrement;
        kHIDUsage_Csmr_ChannelDecrement: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ChannelDecrement;
        kHIDUsage_Csmr_Media: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Media;
        kHIDUsage_Csmr_VCRPlus: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_VCRPlus;
        kHIDUsage_Csmr_Once: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Once;
        kHIDUsage_Csmr_Daily: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Daily;
        kHIDUsage_Csmr_Weekly: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Weekly;
        kHIDUsage_Csmr_Monthly: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Monthly;
        kHIDUsage_Csmr_Play: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Play;
        kHIDUsage_Csmr_Pause: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Pause;
        kHIDUsage_Csmr_Record: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Record;
        kHIDUsage_Csmr_FastForward: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_FastForward;
        kHIDUsage_Csmr_Rewind: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Rewind;
        kHIDUsage_Csmr_ScanNextTrack: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ScanNextTrack;
        kHIDUsage_Csmr_ScanPreviousTrack: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ScanPreviousTrack;
        kHIDUsage_Csmr_Stop: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Stop;
        kHIDUsage_Csmr_Eject: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Eject;
        kHIDUsage_Csmr_RandomPlay: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_RandomPlay;
        kHIDUsage_Csmr_SelectDisc: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_SelectDisc;
        kHIDUsage_Csmr_EnterDisc: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_EnterDisc;
        kHIDUsage_Csmr_Repeat: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Repeat;
        kHIDUsage_Csmr_Tracking: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Tracking;
        kHIDUsage_Csmr_TrackNormal: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_TrackNormal;
        kHIDUsage_Csmr_SlowTracking: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_SlowTracking;
        kHIDUsage_Csmr_FrameForward: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_FrameForward;
        kHIDUsage_Csmr_FrameBack: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_FrameBack;
        kHIDUsage_Csmr_Mark: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Mark;
        kHIDUsage_Csmr_ClearMark: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ClearMark;
        kHIDUsage_Csmr_RepeatFromMark: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_RepeatFromMark;
        kHIDUsage_Csmr_ReturnToMark: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ReturnToMark;
        kHIDUsage_Csmr_SearchMarkForward: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_SearchMarkForward;
        kHIDUsage_Csmr_SearchMarkBackwards: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_SearchMarkBackwards;
        kHIDUsage_Csmr_CounterReset: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_CounterReset;
        kHIDUsage_Csmr_ShowCounter: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ShowCounter;
        kHIDUsage_Csmr_TrackingIncrement: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_TrackingIncrement;
        kHIDUsage_Csmr_TrackingDecrement: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_TrackingDecrement;
        kHIDUsage_Csmr_StopOrEject: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_StopOrEject;
        kHIDUsage_Csmr_PlayOrPause: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_PlayOrPause;
        kHIDUsage_Csmr_PlayOrSkip: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_PlayOrSkip;
        kHIDUsage_Csmr_Volume: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Volume;
        kHIDUsage_Csmr_Balance: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Balance;
        kHIDUsage_Csmr_Mute: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Mute;
        kHIDUsage_Csmr_Bass: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Bass;
        kHIDUsage_Csmr_Treble: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Treble;
        kHIDUsage_Csmr_BassBoost: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_BassBoost;
        kHIDUsage_Csmr_SurroundMode: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_SurroundMode;
        kHIDUsage_Csmr_Loudness: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Loudness;
        kHIDUsage_Csmr_MPX: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_MPX;
        kHIDUsage_Csmr_VolumeIncrement: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_VolumeIncrement;
        kHIDUsage_Csmr_VolumeDecrement: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_VolumeDecrement;
        kHIDUsage_Csmr_Speed: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Speed;
        kHIDUsage_Csmr_PlaybackSpeed: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_PlaybackSpeed;
        kHIDUsage_Csmr_StandardPlay: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_StandardPlay;
        kHIDUsage_Csmr_LongPlay: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_LongPlay;
        kHIDUsage_Csmr_ExtendedPlay: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ExtendedPlay;
        kHIDUsage_Csmr_Slow: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Slow;
        kHIDUsage_Csmr_FanEnable: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_FanEnable;
        kHIDUsage_Csmr_FanSpeed: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_FanSpeed;
        kHIDUsage_Csmr_LightEnable: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_LightEnable;
        kHIDUsage_Csmr_LightIlluminationLevel: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_LightIlluminationLevel;
        kHIDUsage_Csmr_ClimateControlEnable: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ClimateControlEnable;
        kHIDUsage_Csmr_RoomTemperature: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_RoomTemperature;
        kHIDUsage_Csmr_SecurityEnable: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_SecurityEnable;
        kHIDUsage_Csmr_FireAlarm: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_FireAlarm;
        kHIDUsage_Csmr_PoliceAlarm: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_PoliceAlarm;
        kHIDUsage_Csmr_BalanceRight: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_BalanceRight;
        kHIDUsage_Csmr_BalanceLeft: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_BalanceLeft;
        kHIDUsage_Csmr_BassIncrement: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_BassIncrement;
        kHIDUsage_Csmr_BassDecrement: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_BassDecrement;
        kHIDUsage_Csmr_TrebleIncrement: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_TrebleIncrement;
        kHIDUsage_Csmr_TrebleDecrement: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_TrebleDecrement;
        kHIDUsage_Csmr_SpeakerSystem: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_SpeakerSystem;
        kHIDUsage_Csmr_ChannelLeft: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ChannelLeft;
        kHIDUsage_Csmr_ChannelRight: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ChannelRight;
        kHIDUsage_Csmr_ChannelCenter: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ChannelCenter;
        kHIDUsage_Csmr_ChannelFront: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ChannelFront;
        kHIDUsage_Csmr_ChannelCenterFront: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ChannelCenterFront;
        kHIDUsage_Csmr_ChannelSide: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ChannelSide;
        kHIDUsage_Csmr_ChannelSurround: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ChannelSurround;
        kHIDUsage_Csmr_ChannelLowFrequencyEnhancement: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ChannelLowFrequencyEnhancement;
        kHIDUsage_Csmr_ChannelTop: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ChannelTop;
        kHIDUsage_Csmr_ChannelUnknown: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ChannelUnknown;
        kHIDUsage_Csmr_SubChannel: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_SubChannel;
        kHIDUsage_Csmr_SubChannelIncrement: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_SubChannelIncrement;
        kHIDUsage_Csmr_SubChannelDecrement: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_SubChannelDecrement;
        kHIDUsage_Csmr_AlternateAudioIncrement: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_AlternateAudioIncrement;
        kHIDUsage_Csmr_AlternateAudioDecrement: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_AlternateAudioDecrement;
        kHIDUsage_Csmr_ApplicationLaunchButtons: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ApplicationLaunchButtons;
        kHIDUsage_Csmr_ALLaunchButtonConfigurationTool: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALLaunchButtonConfigurationTool;
        kHIDUsage_Csmr_ALProgrammableButtonConfiguration: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALProgrammableButtonConfiguration;
        kHIDUsage_Csmr_ALConsumerControlConfiguration: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALConsumerControlConfiguration;
        kHIDUsage_Csmr_ALWordProcessor: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALWordProcessor;
        kHIDUsage_Csmr_ALTextEditor: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALTextEditor;
        kHIDUsage_Csmr_ALSpreadsheet: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALSpreadsheet;
        kHIDUsage_Csmr_ALGraphicsEditor: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALGraphicsEditor;
        kHIDUsage_Csmr_ALPresentationApp: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALPresentationApp;
        kHIDUsage_Csmr_ALDatabaseApp: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALDatabaseApp;
        kHIDUsage_Csmr_ALEmailReader: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALEmailReader;
        kHIDUsage_Csmr_ALNewsreader: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALNewsreader;
        kHIDUsage_Csmr_ALVoicemail: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALVoicemail;
        kHIDUsage_Csmr_ALContactsOrAddressBook: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALContactsOrAddressBook;
        kHIDUsage_Csmr_ALCalendarOrSchedule: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALCalendarOrSchedule;
        kHIDUsage_Csmr_ALTaskOrProjectManager: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALTaskOrProjectManager;
        kHIDUsage_Csmr_ALLogOrJournalOrTimecard: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALLogOrJournalOrTimecard;
        kHIDUsage_Csmr_ALCheckbookOrFinance: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALCheckbookOrFinance;
        kHIDUsage_Csmr_ALCalculator: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALCalculator;
        kHIDUsage_Csmr_ALAOrVCaptureOrPlayback: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALAOrVCaptureOrPlayback;
        kHIDUsage_Csmr_ALLocalMachineBrowser: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALLocalMachineBrowser;
        kHIDUsage_Csmr_ALLANOrWANBrowser: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALLANOrWANBrowser;
        kHIDUsage_Csmr_ALInternetBrowser: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALInternetBrowser;
        kHIDUsage_Csmr_ALRemoteNetworkingOrISPConnect: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALRemoteNetworkingOrISPConnect;
        kHIDUsage_Csmr_ALNetworkConference: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALNetworkConference;
        kHIDUsage_Csmr_ALNetworkChat: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALNetworkChat;
        kHIDUsage_Csmr_ALTelephonyOrDialer: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALTelephonyOrDialer;
        kHIDUsage_Csmr_ALLogon: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALLogon;
        kHIDUsage_Csmr_ALLogoff: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALLogoff;
        kHIDUsage_Csmr_ALLogonOrLogoff: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALLogonOrLogoff;
        kHIDUsage_Csmr_ALTerminalLockOrScreensaver: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALTerminalLockOrScreensaver;
        kHIDUsage_Csmr_ALControlPanel: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALControlPanel;
        kHIDUsage_Csmr_ALCommandLineProcessorOrRun: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALCommandLineProcessorOrRun;
        kHIDUsage_Csmr_ALProcessOrTaskManager: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALProcessOrTaskManager;
        kHIDUsage_Csmr_AL: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_AL;
        kHIDUsage_Csmr_ALNextTaskOrApplication: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALNextTaskOrApplication;
        kHIDUsage_Csmr_ALPreviousTaskOrApplication: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALPreviousTaskOrApplication;
        kHIDUsage_Csmr_ALPreemptiveHaltTaskOrApplication: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALPreemptiveHaltTaskOrApplication;
        kHIDUsage_Csmr_ALIntegratedHelpCenter: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALIntegratedHelpCenter;
        kHIDUsage_Csmr_ALDocuments: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALDocuments;
        kHIDUsage_Csmr_ALThesaurus: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALThesaurus;
        kHIDUsage_Csmr_ALDictionary: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALDictionary;
        kHIDUsage_Csmr_ALDesktop: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALDesktop;
        kHIDUsage_Csmr_ALSpellCheck: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALSpellCheck;
        kHIDUsage_Csmr_ALGrammerCheck: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALGrammerCheck;
        kHIDUsage_Csmr_ALWirelessStatus: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALWirelessStatus;
        kHIDUsage_Csmr_ALKeyboardLayout: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALKeyboardLayout;
        kHIDUsage_Csmr_ALVirusProtection: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALVirusProtection;
        kHIDUsage_Csmr_ALEncryption: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALEncryption;
        kHIDUsage_Csmr_ALScreenSaver: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALScreenSaver;
        kHIDUsage_Csmr_ALAlarms: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALAlarms;
        kHIDUsage_Csmr_ALClock: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALClock;
        kHIDUsage_Csmr_ALFileBrowser: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALFileBrowser;
        kHIDUsage_Csmr_ALPowerStatus: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ALPowerStatus;
        kHIDUsage_Csmr_GenericGUIApplicationControls: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_GenericGUIApplicationControls;
        kHIDUsage_Csmr_ACNew: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACNew;
        kHIDUsage_Csmr_ACOpen: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACOpen;
        kHIDUsage_Csmr_ACClose: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACClose;
        kHIDUsage_Csmr_ACExit: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACExit;
        kHIDUsage_Csmr_ACMaximize: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACMaximize;
        kHIDUsage_Csmr_ACMinimize: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACMinimize;
        kHIDUsage_Csmr_ACSave: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACSave;
        kHIDUsage_Csmr_ACPrint: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACPrint;
        kHIDUsage_Csmr_ACProperties: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACProperties;
        kHIDUsage_Csmr_ACUndo: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACUndo;
        kHIDUsage_Csmr_ACCopy: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACCopy;
        kHIDUsage_Csmr_ACCut: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACCut;
        kHIDUsage_Csmr_ACPaste: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACPaste;
        kHIDUsage_Csmr_AC: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_AC;
        kHIDUsage_Csmr_ACFind: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACFind;
        kHIDUsage_Csmr_ACFindandReplace: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACFindandReplace;
        kHIDUsage_Csmr_ACSearch: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACSearch;
        kHIDUsage_Csmr_ACGoTo: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACGoTo;
        kHIDUsage_Csmr_ACHome: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACHome;
        kHIDUsage_Csmr_ACBack: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACBack;
        kHIDUsage_Csmr_ACForward: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACForward;
        kHIDUsage_Csmr_ACStop: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACStop;
        kHIDUsage_Csmr_ACRefresh: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACRefresh;
        kHIDUsage_Csmr_ACPreviousLink: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACPreviousLink;
        kHIDUsage_Csmr_ACNextLink: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACNextLink;
        kHIDUsage_Csmr_ACBookmarks: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACBookmarks;
        kHIDUsage_Csmr_ACHistory: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACHistory;
        kHIDUsage_Csmr_ACSubscriptions: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACSubscriptions;
        kHIDUsage_Csmr_ACZoomIn: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACZoomIn;
        kHIDUsage_Csmr_ACZoomOut: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACZoomOut;
        kHIDUsage_Csmr_ACZoom: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACZoom;
        kHIDUsage_Csmr_ACFullScreenView: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACFullScreenView;
        kHIDUsage_Csmr_ACNormalView: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACNormalView;
        kHIDUsage_Csmr_ACViewToggle: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACViewToggle;
        kHIDUsage_Csmr_ACScrollUp: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACScrollUp;
        kHIDUsage_Csmr_ACScrollDown: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACScrollDown;
        kHIDUsage_Csmr_ACScroll: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACScroll;
        kHIDUsage_Csmr_ACPanLeft: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACPanLeft;
        kHIDUsage_Csmr_ACPanRight: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACPanRight;
        kHIDUsage_Csmr_ACPan: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACPan;
        kHIDUsage_Csmr_ACNewWindow: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACNewWindow;
        kHIDUsage_Csmr_ACTileHorizontally: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACTileHorizontally;
        kHIDUsage_Csmr_ACTileVertically: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACTileVertically;
        kHIDUsage_Csmr_ACFormat: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_ACFormat;
        kHIDUsage_Csmr_Reserved: import("./commands/hid-event").HIDUsageConsumerEvent.kHIDUsage_Csmr_Reserved;
        kHIDUsage_Tfon_Phone: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_Phone;
        kHIDUsage_Tfon_AnsweringMachine: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_AnsweringMachine;
        kHIDUsage_Tfon_MessageControls: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_MessageControls;
        kHIDUsage_Tfon_Handset: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_Handset;
        kHIDUsage_Tfon_Headset: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_Headset;
        kHIDUsage_Tfon_TelephonyKeyPad: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_TelephonyKeyPad;
        kHIDUsage_Tfon_ProgrammableButton: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_ProgrammableButton;
        kHIDUsage_Tfon_HookSwitch: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_HookSwitch;
        kHIDUsage_Tfon_Flash: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_Flash;
        kHIDUsage_Tfon_Feature: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_Feature;
        kHIDUsage_Tfon_Hold: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_Hold;
        kHIDUsage_Tfon_Redial: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_Redial;
        kHIDUsage_Tfon_Transfer: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_Transfer;
        kHIDUsage_Tfon_Drop: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_Drop;
        kHIDUsage_Tfon_Park: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_Park;
        kHIDUsage_Tfon_ForwardCalls: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_ForwardCalls;
        kHIDUsage_Tfon_AlternateFunction: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_AlternateFunction;
        kHIDUsage_Tfon_Line: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_Line;
        kHIDUsage_Tfon_SpeakerPhone: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_SpeakerPhone;
        kHIDUsage_Tfon_Conference: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_Conference;
        kHIDUsage_Tfon_RingEnable: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_RingEnable;
        kHIDUsage_Tfon_Ring: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_Ring;
        kHIDUsage_Tfon_PhoneMute: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PhoneMute;
        kHIDUsage_Tfon_CallerID: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_CallerID;
        kHIDUsage_Tfon_SpeedDial: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_SpeedDial;
        kHIDUsage_Tfon_StoreNumber: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_StoreNumber;
        kHIDUsage_Tfon_RecallNumber: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_RecallNumber;
        kHIDUsage_Tfon_PhoneDirectory: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PhoneDirectory;
        kHIDUsage_Tfon_VoiceMail: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_VoiceMail;
        kHIDUsage_Tfon_ScreenCalls: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_ScreenCalls;
        kHIDUsage_Tfon_DoNotDisturb: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_DoNotDisturb;
        kHIDUsage_Tfon_Message: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_Message;
        kHIDUsage_Tfon_AnswerOnOrOff: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_AnswerOnOrOff;
        kHIDUsage_Tfon_InsideDialTone: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_InsideDialTone;
        kHIDUsage_Tfon_OutsideDialTone: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_OutsideDialTone;
        kHIDUsage_Tfon_InsideRingTone: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_InsideRingTone;
        kHIDUsage_Tfon_OutsideRingTone: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_OutsideRingTone;
        kHIDUsage_Tfon_PriorityRingTone: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PriorityRingTone;
        kHIDUsage_Tfon_InsideRingback: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_InsideRingback;
        kHIDUsage_Tfon_PriorityRingback: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PriorityRingback;
        kHIDUsage_Tfon_LineBusyTone: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_LineBusyTone;
        kHIDUsage_Tfon_ReorderTone: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_ReorderTone;
        kHIDUsage_Tfon_CallWaitingTone: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_CallWaitingTone;
        kHIDUsage_Tfon_ConfirmationTone1: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_ConfirmationTone1;
        kHIDUsage_Tfon_ConfirmationTone2: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_ConfirmationTone2;
        kHIDUsage_Tfon_TonesOff: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_TonesOff;
        kHIDUsage_Tfon_OutsideRingback: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_OutsideRingback;
        kHIDUsage_Tfon_PhoneKey0: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PhoneKey0;
        kHIDUsage_Tfon_PhoneKey1: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PhoneKey1;
        kHIDUsage_Tfon_PhoneKey2: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PhoneKey2;
        kHIDUsage_Tfon_PhoneKey3: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PhoneKey3;
        kHIDUsage_Tfon_PhoneKey4: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PhoneKey4;
        kHIDUsage_Tfon_PhoneKey5: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PhoneKey5;
        kHIDUsage_Tfon_PhoneKey6: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PhoneKey6;
        kHIDUsage_Tfon_PhoneKey7: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PhoneKey7;
        kHIDUsage_Tfon_PhoneKey8: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PhoneKey8;
        kHIDUsage_Tfon_PhoneKey9: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PhoneKey9;
        kHIDUsage_Tfon_PhoneKeyStar: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PhoneKeyStar;
        kHIDUsage_Tfon_PhoneKeyPound: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PhoneKeyPound;
        kHIDUsage_Tfon_PhoneKeyA: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PhoneKeyA;
        kHIDUsage_Tfon_PhoneKeyB: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PhoneKeyB;
        kHIDUsage_Tfon_PhoneKeyC: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PhoneKeyC;
        kHIDUsage_Tfon_PhoneKeyD: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_Tfon_PhoneKeyD;
        kHIDUsage_TFon_Reserved: import("./commands/hid-event").HIDUsageTelephonyEvent.kHIDUsage_TFon_Reserved;
        kHIDUsage_PID_PhysicalInterfaceDevice: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_PhysicalInterfaceDevice;
        kHIDUsage_PID_Normal: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_Normal;
        kHIDUsage_PID_SetEffectReport: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_SetEffectReport;
        kHIDUsage_PID_EffectBlockIndex: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_EffectBlockIndex;
        kHIDUsage_PID_ParamBlockOffset: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ParamBlockOffset;
        kHIDUsage_PID_ROM_Flag: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ROM_Flag;
        kHIDUsage_PID_EffectType: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_EffectType;
        kHIDUsage_PID_ET_ConstantForce: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ET_ConstantForce;
        kHIDUsage_PID_ET_Ramp: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ET_Ramp;
        kHIDUsage_PID_ET_CustomForceData: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ET_CustomForceData;
        kHIDUsage_PID_ET_Square: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ET_Square;
        kHIDUsage_PID_ET_Sine: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ET_Sine;
        kHIDUsage_PID_ET_Triangle: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ET_Triangle;
        kHIDUsage_PID_ET_SawtoothUp: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ET_SawtoothUp;
        kHIDUsage_PID_ET_SawtoothDown: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ET_SawtoothDown;
        kHIDUsage_PID_ET_Spring: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ET_Spring;
        kHIDUsage_PID_ET_Damper: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ET_Damper;
        kHIDUsage_PID_ET_Inertia: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ET_Inertia;
        kHIDUsage_PID_ET_Friction: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ET_Friction;
        kHIDUsage_PID_Duration: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_Duration;
        kHIDUsage_PID_SamplePeriod: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_SamplePeriod;
        kHIDUsage_PID_Gain: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_Gain;
        kHIDUsage_PID_TriggerButton: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_TriggerButton;
        kHIDUsage_PID_TriggerRepeatInterval: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_TriggerRepeatInterval;
        kHIDUsage_PID_AxesEnable: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_AxesEnable;
        kHIDUsage_PID_DirectionEnable: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_DirectionEnable;
        kHIDUsage_PID_Direction: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_Direction;
        kHIDUsage_PID_TypeSpecificBlockOffset: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_TypeSpecificBlockOffset;
        kHIDUsage_PID_BlockType: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_BlockType;
        kHIDUsage_PID_SetEnvelopeReport: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_SetEnvelopeReport;
        kHIDUsage_PID_AttackLevel: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_AttackLevel;
        kHIDUsage_PID_AttackTime: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_AttackTime;
        kHIDUsage_PID_FadeLevel: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_FadeLevel;
        kHIDUsage_PID_FadeTime: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_FadeTime;
        kHIDUsage_PID_SetConditionReport: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_SetConditionReport;
        kHIDUsage_PID_CP_Offset: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_CP_Offset;
        kHIDUsage_PID_PositiveCoefficient: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_PositiveCoefficient;
        kHIDUsage_PID_NegativeCoefficient: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_NegativeCoefficient;
        kHIDUsage_PID_PositiveSaturation: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_PositiveSaturation;
        kHIDUsage_PID_NegativeSaturation: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_NegativeSaturation;
        kHIDUsage_PID_DeadBand: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_DeadBand;
        kHIDUsage_PID_DownloadForceSample: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_DownloadForceSample;
        kHIDUsage_PID_IsochCustomForceEnable: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_IsochCustomForceEnable;
        kHIDUsage_PID_CustomForceDataReport: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_CustomForceDataReport;
        kHIDUsage_PID_CustomForceData: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_CustomForceData;
        kHIDUsage_PID_CustomForceVendorDefinedData: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_CustomForceVendorDefinedData;
        kHIDUsage_PID_SetCustomForceReport: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_SetCustomForceReport;
        kHIDUsage_PID_CustomForceDataOffset: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_CustomForceDataOffset;
        kHIDUsage_PID_SampleCount: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_SampleCount;
        kHIDUsage_PID_SetPeriodicReport: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_SetPeriodicReport;
        kHIDUsage_PID_Offset: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_Offset;
        kHIDUsage_PID_Magnitude: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_Magnitude;
        kHIDUsage_PID_Phase: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_Phase;
        kHIDUsage_PID_Period: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_Period;
        kHIDUsage_PID_SetConstantForceReport: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_SetConstantForceReport;
        kHIDUsage_PID_SetRampForceReport: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_SetRampForceReport;
        kHIDUsage_PID_RampStart: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_RampStart;
        kHIDUsage_PID_RampEnd: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_RampEnd;
        kHIDUsage_PID_EffectOperationReport: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_EffectOperationReport;
        kHIDUsage_PID_EffectOperation: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_EffectOperation;
        kHIDUsage_PID_OpEffectStart: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_OpEffectStart;
        kHIDUsage_PID_OpEffectStartSolo: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_OpEffectStartSolo;
        kHIDUsage_PID_OpEffectStop: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_OpEffectStop;
        kHIDUsage_PID_LoopCount: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_LoopCount;
        kHIDUsage_PID_DeviceGainReport: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_DeviceGainReport;
        kHIDUsage_PID_DeviceGain: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_DeviceGain;
        kHIDUsage_PID_PoolReport: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_PoolReport;
        kHIDUsage_PID_RAM_PoolSize: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_RAM_PoolSize;
        kHIDUsage_PID_ROM_PoolSize: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ROM_PoolSize;
        kHIDUsage_PID_ROM_EffectBlockCount: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ROM_EffectBlockCount;
        kHIDUsage_PID_SimultaneousEffectsMax: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_SimultaneousEffectsMax;
        kHIDUsage_PID_PoolAlignment: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_PoolAlignment;
        kHIDUsage_PID_PoolMoveReport: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_PoolMoveReport;
        kHIDUsage_PID_MoveSource: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_MoveSource;
        kHIDUsage_PID_MoveDestination: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_MoveDestination;
        kHIDUsage_PID_MoveLength: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_MoveLength;
        kHIDUsage_PID_BlockLoadReport: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_BlockLoadReport;
        kHIDUsage_PID_BlockLoadStatus: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_BlockLoadStatus;
        kHIDUsage_PID_BlockLoadSuccess: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_BlockLoadSuccess;
        kHIDUsage_PID_BlockLoadFull: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_BlockLoadFull;
        kHIDUsage_PID_BlockLoadError: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_BlockLoadError;
        kHIDUsage_PID_BlockHandle: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_BlockHandle;
        kHIDUsage_PID_BlockFreeReport: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_BlockFreeReport;
        kHIDUsage_PID_TypeSpecificBlockHandle: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_TypeSpecificBlockHandle;
        kHIDUsage_PID_StateReport: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_StateReport;
        kHIDUsage_PID_EffectPlaying: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_EffectPlaying;
        kHIDUsage_PID_DeviceControlReport: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_DeviceControlReport;
        kHIDUsage_PID_DeviceControl: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_DeviceControl;
        kHIDUsage_PID_DC_EnableActuators: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_DC_EnableActuators;
        kHIDUsage_PID_DC_DisableActuators: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_DC_DisableActuators;
        kHIDUsage_PID_DC_StopAllEffects: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_DC_StopAllEffects;
        kHIDUsage_PID_DC_DeviceReset: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_DC_DeviceReset;
        kHIDUsage_PID_DC_DevicePause: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_DC_DevicePause;
        kHIDUsage_PID_DC_DeviceContinue: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_DC_DeviceContinue;
        kHIDUsage_PID_DevicePaused: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_DevicePaused;
        kHIDUsage_PID_ActuatorsEnabled: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ActuatorsEnabled;
        kHIDUsage_PID_SafetySwitch: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_SafetySwitch;
        kHIDUsage_PID_ActuatorOverrideSwitch: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ActuatorOverrideSwitch;
        kHIDUsage_PID_ActuatorPower: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ActuatorPower;
        kHIDUsage_PID_StartDelay: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_StartDelay;
        kHIDUsage_PID_ParameterBlockSize: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_ParameterBlockSize;
        kHIDUsage_PID_DeviceManagedPool: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_DeviceManagedPool;
        kHIDUsage_PID_SharedParameterBlocks: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_SharedParameterBlocks;
        kHIDUsage_PID_CreateNewEffectReport: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_CreateNewEffectReport;
        kHIDUsage_PID_RAM_PoolAvailable: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_RAM_PoolAvailable;
        kHIDUsage_PID_Reserved: import("./commands/hid-event").HIDUsagePIDEvent.kHIDUsage_PID_Reserved;
        kHIDUsage_MSR_Undefined: import("./commands/hid-event").HIDUsageMSREvent.kHIDUsage_MSR_Undefined;
        kHIDUsage_MSR_DeviceReadOnly: import("./commands/hid-event").HIDUsageMSREvent.kHIDUsage_MSR_DeviceReadOnly;
        kHIDUsage_MSR_Track1Length: import("./commands/hid-event").HIDUsageMSREvent.kHIDUsage_MSR_Track1Length;
        kHIDUsage_MSR_Track2Length: import("./commands/hid-event").HIDUsageMSREvent.kHIDUsage_MSR_Track2Length;
        kHIDUsage_MSR_Track3Length: import("./commands/hid-event").HIDUsageMSREvent.kHIDUsage_MSR_Track3Length;
        kHIDUsage_MSR_TrackJISLength: import("./commands/hid-event").HIDUsageMSREvent.kHIDUsage_MSR_TrackJISLength;
        kHIDUsage_MSR_TrackData: import("./commands/hid-event").HIDUsageMSREvent.kHIDUsage_MSR_TrackData;
        kHIDUsage_MSR_Track1Data: import("./commands/hid-event").HIDUsageMSREvent.kHIDUsage_MSR_Track1Data;
        kHIDUsage_MSR_Track2Data: import("./commands/hid-event").HIDUsageMSREvent.kHIDUsage_MSR_Track2Data;
        kHIDUsage_MSR_Track3Data: import("./commands/hid-event").HIDUsageMSREvent.kHIDUsage_MSR_Track3Data;
        kHIDUsage_MSR_TrackJISData: import("./commands/hid-event").HIDUsageMSREvent.kHIDUsage_MSR_TrackJISData;
        kHIDUsage_PD_Undefined: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Undefined;
        kHIDUsage_PD_iName: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_iName;
        kHIDUsage_PD_PresentStatus: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_PresentStatus;
        kHIDUsage_PD_ChangedStatus: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_ChangedStatus;
        kHIDUsage_PD_UPS: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_UPS;
        kHIDUsage_PD_PowerSupply: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_PowerSupply;
        kHIDUsage_PD_BatterySystem: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_BatterySystem;
        kHIDUsage_PD_BatterySystemID: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_BatterySystemID;
        kHIDUsage_PD_Battery: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Battery;
        kHIDUsage_PD_BatteryID: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_BatteryID;
        kHIDUsage_PD_Charger: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Charger;
        kHIDUsage_PD_ChargerID: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_ChargerID;
        kHIDUsage_PD_PowerConverter: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_PowerConverter;
        kHIDUsage_PD_PowerConverterID: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_PowerConverterID;
        kHIDUsage_PD_OutletSystem: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_OutletSystem;
        kHIDUsage_PD_OutletSystemID: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_OutletSystemID;
        kHIDUsage_PD_Input: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Input;
        kHIDUsage_PD_InputID: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_InputID;
        kHIDUsage_PD_Output: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Output;
        kHIDUsage_PD_OutputID: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_OutputID;
        kHIDUsage_PD_Flow: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Flow;
        kHIDUsage_PD_FlowID: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_FlowID;
        kHIDUsage_PD_Outlet: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Outlet;
        kHIDUsage_PD_OutletID: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_OutletID;
        kHIDUsage_PD_Gang: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Gang;
        kHIDUsage_PD_GangID: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_GangID;
        kHIDUsage_PD_PowerSummary: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_PowerSummary;
        kHIDUsage_PD_PowerSummaryID: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_PowerSummaryID;
        kHIDUsage_PD_Voltage: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Voltage;
        kHIDUsage_PD_Current: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Current;
        kHIDUsage_PD_Frequency: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Frequency;
        kHIDUsage_PD_ApparentPower: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_ApparentPower;
        kHIDUsage_PD_ActivePower: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_ActivePower;
        kHIDUsage_PD_PercentLoad: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_PercentLoad;
        kHIDUsage_PD_Temperature: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Temperature;
        kHIDUsage_PD_Humidity: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Humidity;
        kHIDUsage_PD_BadCount: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_BadCount;
        kHIDUsage_PD_ConfigVoltage: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_ConfigVoltage;
        kHIDUsage_PD_ConfigCurrent: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_ConfigCurrent;
        kHIDUsage_PD_ConfigFrequency: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_ConfigFrequency;
        kHIDUsage_PD_ConfigApparentPower: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_ConfigApparentPower;
        kHIDUsage_PD_ConfigActivePower: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_ConfigActivePower;
        kHIDUsage_PD_ConfigPercentLoad: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_ConfigPercentLoad;
        kHIDUsage_PD_ConfigTemperature: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_ConfigTemperature;
        kHIDUsage_PD_ConfigHumidity: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_ConfigHumidity;
        kHIDUsage_PD_SwitchOnControl: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_SwitchOnControl;
        kHIDUsage_PD_SwitchOffControl: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_SwitchOffControl;
        kHIDUsage_PD_ToggleControl: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_ToggleControl;
        kHIDUsage_PD_LowVoltageTransfer: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_LowVoltageTransfer;
        kHIDUsage_PD_HighVoltageTransfer: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_HighVoltageTransfer;
        kHIDUsage_PD_DelayBeforeReboot: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_DelayBeforeReboot;
        kHIDUsage_PD_DelayBeforeStartup: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_DelayBeforeStartup;
        kHIDUsage_PD_DelayBeforeShutdown: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_DelayBeforeShutdown;
        kHIDUsage_PD_Test: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Test;
        kHIDUsage_PD_ModuleReset: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_ModuleReset;
        kHIDUsage_PD_AudibleAlarmControl: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_AudibleAlarmControl;
        kHIDUsage_PD_Present: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Present;
        kHIDUsage_PD_Good: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Good;
        kHIDUsage_PD_InternalFailure: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_InternalFailure;
        kHIDUsage_PD_VoltageOutOfRange: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_VoltageOutOfRange;
        kHIDUsage_PD_FrequencyOutOfRange: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_FrequencyOutOfRange;
        kHIDUsage_PD_Overload: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Overload;
        kHIDUsage_PD_OverCharged: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_OverCharged;
        kHIDUsage_PD_OverTemperature: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_OverTemperature;
        kHIDUsage_PD_ShutdownRequested: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_ShutdownRequested;
        kHIDUsage_PD_ShutdownImminent: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_ShutdownImminent;
        kHIDUsage_PD_SwitchOnOff: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_SwitchOnOff;
        kHIDUsage_PD_Switchable: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Switchable;
        kHIDUsage_PD_Used: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Used;
        kHIDUsage_PD_Boost: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Boost;
        kHIDUsage_PD_Buck: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Buck;
        kHIDUsage_PD_Initialized: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Initialized;
        kHIDUsage_PD_Tested: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_Tested;
        kHIDUsage_PD_AwaitingPower: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_AwaitingPower;
        kHIDUsage_PD_CommunicationLost: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_CommunicationLost;
        kHIDUsage_PD_iManufacturer: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_iManufacturer;
        kHIDUsage_PD_iProduct: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_iProduct;
        kHIDUsage_PD_iserialNumber: import("./commands/hid-event").HIDUsagePowerDeviceEvent.kHIDUsage_PD_iserialNumber;
        kHIDUsage_Ord_Instance1: import("./commands/hid-event").HIDUsageOrdinalEvent.kHIDUsage_Ord_Instance1;
        kHIDUsage_Ord_Instance2: import("./commands/hid-event").HIDUsageOrdinalEvent.kHIDUsage_Ord_Instance2;
        kHIDUsage_Ord_Instance3: import("./commands/hid-event").HIDUsageOrdinalEvent.kHIDUsage_Ord_Instance3;
        kHIDUsage_Ord_Instance4: import("./commands/hid-event").HIDUsageOrdinalEvent.kHIDUsage_Ord_Instance4;
        kHIDUsage_Ord_Instance65535: import("./commands/hid-event").HIDUsageOrdinalEvent.kHIDUsage_Ord_Instance65535;
        kHIDUsage_Game_3DGameController: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_3DGameController;
        kHIDUsage_Game_PinballDevice: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_PinballDevice;
        kHIDUsage_Game_GunDevice: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_GunDevice;
        kHIDUsage_Game_PointofView: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_PointofView;
        kHIDUsage_Game_TurnRightOrLeft: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_TurnRightOrLeft;
        kHIDUsage_Game_PitchUpOrDown: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_PitchUpOrDown;
        kHIDUsage_Game_RollRightOrLeft: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_RollRightOrLeft;
        kHIDUsage_Game_MoveRightOrLeft: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_MoveRightOrLeft;
        kHIDUsage_Game_MoveForwardOrBackward: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_MoveForwardOrBackward;
        kHIDUsage_Game_MoveUpOrDown: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_MoveUpOrDown;
        kHIDUsage_Game_LeanRightOrLeft: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_LeanRightOrLeft;
        kHIDUsage_Game_LeanForwardOrBackward: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_LeanForwardOrBackward;
        kHIDUsage_Game_HeightOfPOV: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_HeightOfPOV;
        kHIDUsage_Game_Flipper: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_Flipper;
        kHIDUsage_Game_SecondaryFlipper: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_SecondaryFlipper;
        kHIDUsage_Game_Bump: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_Bump;
        kHIDUsage_Game_NewGame: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_NewGame;
        kHIDUsage_Game_ShootBall: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_ShootBall;
        kHIDUsage_Game_Player: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_Player;
        kHIDUsage_Game_GunBolt: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_GunBolt;
        kHIDUsage_Game_GunClip: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_GunClip;
        kHIDUsage_Game_Gun: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_Gun;
        kHIDUsage_Game_GunSingleShot: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_GunSingleShot;
        kHIDUsage_Game_GunBurst: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_GunBurst;
        kHIDUsage_Game_GunAutomatic: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_GunAutomatic;
        kHIDUsage_Game_GunSafety: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_GunSafety;
        kHIDUsage_Game_GamepadFireOrJump: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_GamepadFireOrJump;
        kHIDUsage_Game_GamepadTrigger: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_GamepadTrigger;
        kHIDUsage_Game_Reserved: import("./commands/hid-event").HIDUsageGameEvent.kHIDUsage_Game_Reserved;
        kHIDUsage_AD_AlphanumericDisplay: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_AlphanumericDisplay;
        kHIDUsage_AD_DisplayAttributesReport: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_DisplayAttributesReport;
        kHIDUsage_AD_ASCIICharacterSet: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_ASCIICharacterSet;
        kHIDUsage_AD_DataReadBack: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_DataReadBack;
        kHIDUsage_AD_FontReadBack: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_FontReadBack;
        kHIDUsage_AD_DisplayControlReport: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_DisplayControlReport;
        kHIDUsage_AD_ClearDisplay: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_ClearDisplay;
        kHIDUsage_AD_DisplayEnable: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_DisplayEnable;
        kHIDUsage_AD_ScreenSaverDelay: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_ScreenSaverDelay;
        kHIDUsage_AD_ScreenSaverEnable: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_ScreenSaverEnable;
        kHIDUsage_AD_VerticalScroll: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_VerticalScroll;
        kHIDUsage_AD_HorizontalScroll: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_HorizontalScroll;
        kHIDUsage_AD_CharacterReport: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_CharacterReport;
        kHIDUsage_AD_DisplayData: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_DisplayData;
        kHIDUsage_AD_DisplayStatus: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_DisplayStatus;
        kHIDUsage_AD_StatNotReady: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_StatNotReady;
        kHIDUsage_AD_StatReady: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_StatReady;
        kHIDUsage_AD_ErrNotaloadablecharacter: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_ErrNotaloadablecharacter;
        kHIDUsage_AD_ErrFontdatacannotberead: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_ErrFontdatacannotberead;
        kHIDUsage_AD_CursorPositionReport: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_CursorPositionReport;
        kHIDUsage_AD_Row: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_Row;
        kHIDUsage_AD_Column: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_Column;
        kHIDUsage_AD_Rows: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_Rows;
        kHIDUsage_AD_Columns: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_Columns;
        kHIDUsage_AD_CursorPixelPositioning: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_CursorPixelPositioning;
        kHIDUsage_AD_CursorMode: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_CursorMode;
        kHIDUsage_AD_CursorEnable: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_CursorEnable;
        kHIDUsage_AD_CursorBlink: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_CursorBlink;
        kHIDUsage_AD_FontReport: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_FontReport;
        kHIDUsage_AD_FontData: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_FontData;
        kHIDUsage_AD_CharacterWidth: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_CharacterWidth;
        kHIDUsage_AD_CharacterHeight: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_CharacterHeight;
        kHIDUsage_AD_CharacterSpacingHorizontal: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_CharacterSpacingHorizontal;
        kHIDUsage_AD_CharacterSpacingVertical: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_CharacterSpacingVertical;
        kHIDUsage_AD_UnicodeCharacterSet: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_UnicodeCharacterSet;
        kHIDUsage_AD_Reserved: import("./commands/hid-event").HIDUsageAlphanumericDisplayEvent.kHIDUsage_AD_Reserved;
        kHIDUsage_Undefined: import("./commands/hid-event").HIDUsageUndefinedEvent.kHIDUsage_Undefined;
        kHIDUsage_BS_Undefined: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_Undefined;
        kHIDUsage_BS_SMBBatteryMode: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_SMBBatteryMode;
        kHIDUsage_BS_SMBBatteryStatus: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_SMBBatteryStatus;
        kHIDUsage_BS_SMBAlarmWarning: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_SMBAlarmWarning;
        kHIDUsage_BS_SMBChargerMode: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_SMBChargerMode;
        kHIDUsage_BS_SMBChargerStatus: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_SMBChargerStatus;
        kHIDUsage_BS_SMBChargerSpecInfo: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_SMBChargerSpecInfo;
        kHIDUsage_BS_SMBSelectorState: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_SMBSelectorState;
        kHIDUsage_BS_SMBSelectorPresets: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_SMBSelectorPresets;
        kHIDUsage_BS_SMBSelectorInfo: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_SMBSelectorInfo;
        kHIDUsage_BS_OptionalMfgFunction1: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_OptionalMfgFunction1;
        kHIDUsage_BS_OptionalMfgFunction2: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_OptionalMfgFunction2;
        kHIDUsage_BS_OptionalMfgFunction3: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_OptionalMfgFunction3;
        kHIDUsage_BS_OptionalMfgFunction4: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_OptionalMfgFunction4;
        kHIDUsage_BS_OptionalMfgFunction5: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_OptionalMfgFunction5;
        kHIDUsage_BS_ConnectionToSMBus: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_ConnectionToSMBus;
        kHIDUsage_BS_OutputConnection: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_OutputConnection;
        kHIDUsage_BS_ChargerConnection: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_ChargerConnection;
        kHIDUsage_BS_BatteryInsertion: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_BatteryInsertion;
        kHIDUsage_BS_Usenext: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_Usenext;
        kHIDUsage_BS_OKToUse: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_OKToUse;
        kHIDUsage_BS_BatterySupported: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_BatterySupported;
        kHIDUsage_BS_SelectorRevision: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_SelectorRevision;
        kHIDUsage_BS_ChargingIndicator: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_ChargingIndicator;
        kHIDUsage_BS_ManufacturerAccess: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_ManufacturerAccess;
        kHIDUsage_BS_RemainingCapacityLimit: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_RemainingCapacityLimit;
        kHIDUsage_BS_RemainingTimeLimit: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_RemainingTimeLimit;
        kHIDUsage_BS_AtRate: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_AtRate;
        kHIDUsage_BS_CapacityMode: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_CapacityMode;
        kHIDUsage_BS_BroadcastToCharger: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_BroadcastToCharger;
        kHIDUsage_BS_PrimaryBattery: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_PrimaryBattery;
        kHIDUsage_BS_ChargeController: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_ChargeController;
        kHIDUsage_BS_TerminateCharge: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_TerminateCharge;
        kHIDUsage_BS_TerminateDischarge: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_TerminateDischarge;
        kHIDUsage_BS_BelowRemainingCapacityLimit: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_BelowRemainingCapacityLimit;
        kHIDUsage_BS_RemainingTimeLimitExpired: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_RemainingTimeLimitExpired;
        kHIDUsage_BS_Charging: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_Charging;
        kHIDUsage_BS_Discharging: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_Discharging;
        kHIDUsage_BS_FullyCharged: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_FullyCharged;
        kHIDUsage_BS_FullyDischarged: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_FullyDischarged;
        kHIDUsage_BS_ConditioningFlag: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_ConditioningFlag;
        kHIDUsage_BS_AtRateOK: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_AtRateOK;
        kHIDUsage_BS_SMBErrorCode: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_SMBErrorCode;
        kHIDUsage_BS_NeedReplacement: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_NeedReplacement;
        kHIDUsage_BS_AtRateTimeToFull: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_AtRateTimeToFull;
        kHIDUsage_BS_AtRateTimeToEmpty: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_AtRateTimeToEmpty;
        kHIDUsage_BS_AverageCurrent: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_AverageCurrent;
        kHIDUsage_BS_Maxerror: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_Maxerror;
        kHIDUsage_BS_RelativeStateOfCharge: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_RelativeStateOfCharge;
        kHIDUsage_BS_AbsoluteStateOfCharge: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_AbsoluteStateOfCharge;
        kHIDUsage_BS_RemainingCapacity: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_RemainingCapacity;
        kHIDUsage_BS_FullChargeCapacity: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_FullChargeCapacity;
        kHIDUsage_BS_RunTimeToEmpty: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_RunTimeToEmpty;
        kHIDUsage_BS_AverageTimeToEmpty: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_AverageTimeToEmpty;
        kHIDUsage_BS_AverageTimeToFull: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_AverageTimeToFull;
        kHIDUsage_BS_CycleCount: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_CycleCount;
        kHIDUsage_BS_BattPackModelLevel: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_BattPackModelLevel;
        kHIDUsage_BS_InternalChargeController: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_InternalChargeController;
        kHIDUsage_BS_PrimaryBatterySupport: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_PrimaryBatterySupport;
        kHIDUsage_BS_DesignCapacity: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_DesignCapacity;
        kHIDUsage_BS_SpecificationInfo: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_SpecificationInfo;
        kHIDUsage_BS_ManufacturerDate: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_ManufacturerDate;
        kHIDUsage_BS_SerialNumber: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_SerialNumber;
        kHIDUsage_BS_iManufacturerName: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_iManufacturerName;
        kHIDUsage_BS_iDevicename: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_iDevicename;
        kHIDUsage_BS_iDeviceChemistry: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_iDeviceChemistry;
        kHIDUsage_BS_ManufacturerData: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_ManufacturerData;
        kHIDUsage_BS_Rechargable: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_Rechargable;
        kHIDUsage_BS_WarningCapacityLimit: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_WarningCapacityLimit;
        kHIDUsage_BS_CapacityGranularity1: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_CapacityGranularity1;
        kHIDUsage_BS_CapacityGranularity2: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_CapacityGranularity2;
        kHIDUsage_BS_iOEMInformation: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_iOEMInformation;
        kHIDUsage_BS_InhibitCharge: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_InhibitCharge;
        kHIDUsage_BS_EnablePolling: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_EnablePolling;
        kHIDUsage_BS_ResetToZero: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_ResetToZero;
        kHIDUsage_BS_ACPresent: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_ACPresent;
        kHIDUsage_BS_BatteryPresent: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_BatteryPresent;
        kHIDUsage_BS_PowerFail: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_PowerFail;
        kHIDUsage_BS_AlarmInhibited: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_AlarmInhibited;
        kHIDUsage_BS_ThermistorUnderRange: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_ThermistorUnderRange;
        kHIDUsage_BS_ThermistorHot: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_ThermistorHot;
        kHIDUsage_BS_ThermistorCold: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_ThermistorCold;
        kHIDUsage_BS_ThermistorOverRange: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_ThermistorOverRange;
        kHIDUsage_BS_VoltageOutOfRange: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_VoltageOutOfRange;
        kHIDUsage_BS_CurrentOutOfRange: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_CurrentOutOfRange;
        kHIDUsage_BS_CurrentNotRegulated: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_CurrentNotRegulated;
        kHIDUsage_BS_VoltageNotRegulated: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_VoltageNotRegulated;
        kHIDUsage_BS_MasterMode: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_MasterMode;
        kHIDUsage_BS_ChargerSelectorSupport: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_ChargerSelectorSupport;
        kHIDUsage_BS_ChargerSpec: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_ChargerSpec;
        kHIDUsage_BS_Level2: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_Level2;
        kHIDUsage_BS_Level3: import("./commands/hid-event").HIDUsageBatterySystemEvent.kHIDUsage_BS_Level3;
    }, durationSeconds: number | string) => Promise<unknown>;
    mobileClearKeychains: (this: XCUITestDriver) => Promise<void>;
    hideKeyboard: (this: XCUITestDriver, strategy: any, ...possibleKeys: any[]) => Promise<boolean>;
    mobileHideKeyboard: (this: XCUITestDriver, keys?: string[]) => Promise<void>;
    isKeyboardShown: (this: XCUITestDriver) => Promise<boolean>;
    mobileKeys: (this: XCUITestDriver, keys: (Key | string)[], elementId?: string | null | undefined) => Promise<unknown>;
    mobileConfigureLocalization: (this: XCUITestDriver, keyboard?: import("./commands/types").KeyboardOptions | undefined, language?: import("./commands/types").LanguageOptions | undefined, locale?: import("./commands/types").LocaleOptions | undefined) => Promise<boolean>;
    getGeoLocation: (this: XCUITestDriver) => Promise<import("./commands/types").LocationWithAltitude>;
    setGeoLocation: (this: XCUITestDriver, location: Partial<Location>) => Promise<import("@appium/types").Location>;
    mobileResetLocationService: (this: XCUITestDriver) => Promise<void>;
    lock: (this: XCUITestDriver, seconds?: string | number | undefined) => Promise<void>;
    unlock: (this: XCUITestDriver) => Promise<void>;
    isLocked: (this: XCUITestDriver) => Promise<boolean>;
    extractLogs: (this: XCUITestDriver, logType: XCUITestDriverLogTypes, logsContainer?: Partial<Record<string, {
        getLogs(): Promise<any>;
    }>> | undefined) => Promise<any>;
    supportedLogTypes: import("@appium/types").LogDefRecord;
    startLogCapture: (this: XCUITestDriver) => Promise<boolean>;
    mobileStartLogsBroadcast: (this: XCUITestDriver) => Promise<void>;
    mobileStopLogsBroadcast: (this: XCUITestDriver) => Promise<void>;
    back: (this: XCUITestDriver) => Promise<void>;
    forward: (this: XCUITestDriver) => Promise<void>;
    closeWindow: (this: XCUITestDriver) => Promise<any>;
    nativeBack: (this: XCUITestDriver) => Promise<unknown>;
    mobileDeepLink: (this: XCUITestDriver, url: string, bundleId?: string | undefined) => Promise<void>;
    mobilePushNotification: (this: XCUITestDriver, bundleId: string, payload: import("./commands/types").PushPayload) => Promise<void>;
    mobileExpectNotification: (this: XCUITestDriver, name: string, type?: import("./commands/types").NotificationType, timeoutSeconds?: number) => Promise<unknown>;
    mobileSetPasteboard: (this: XCUITestDriver, content: string, encoding?: string) => Promise<void>;
    mobileGetPasteboard: (this: XCUITestDriver, encoding?: string) => Promise<string>;
    mobileStartPcap: (this: XCUITestDriver, timeLimitSec?: number, forceRestart?: boolean) => Promise<void>;
    mobileStopPcap: (this: XCUITestDriver) => Promise<string>;
    mobileStartPerfRecord: (this: XCUITestDriver, timeout?: number, profileName?: string, pid?: number | "current" | undefined) => Promise<void>;
    mobileStopPerfRecord: (this: XCUITestDriver, remotePath?: string | undefined, user?: string | undefined, pass?: string | undefined, method?: import("axios").Method | undefined, profileName?: string, headers?: Record<string, any> | undefined, fileFieldName?: string | undefined, formFields?: [string, any][] | Record<string, any> | undefined) => Promise<string>;
    mobileResetPermission: (this: XCUITestDriver, service: import("./commands/enum").PermissionService | number) => Promise<void>;
    mobileGetPermission: (this: XCUITestDriver, bundleId: string, service: import("./commands/enum").PermissionService) => Promise<import("./commands/types").PermissionState>;
    mobileSetPermissions: (this: XCUITestDriver, access: Record<Partial<import("./commands/types").AccessRule>, import("./commands/types").PermissionState>, bundleId: string) => Promise<void>;
    proxyCommand: <TReq = any, TRes = unknown>(this: XCUITestDriver, url: string, method: AllowedHttpMethod, body?: TReq | undefined, isSessionCommand?: boolean) => Promise<TRes>;
    startAudioRecording: (this: XCUITestDriver, audioInput: string | number, timeLimit?: string | number, audioCodec?: string, audioBitrate?: string, audioChannels?: string | number, audioRate?: string | number, forceRestart?: boolean) => Promise<void>;
    stopAudioRecording: (this: XCUITestDriver) => Promise<string>;
    _recentScreenRecorder: import("./commands/recordscreen").ScreenRecorder | null;
    startRecordingScreen: (this: XCUITestDriver, options?: import("./commands/types").StartRecordingScreenOptions | undefined) => Promise<string>;
    stopRecordingScreen: (this: XCUITestDriver, options?: import("./commands/types").StopRecordingScreenOptions) => Promise<string | null>;
    getScreenshot: (this: XCUITestDriver) => Promise<string>;
    getElementScreenshot: (this: XCUITestDriver, el: any) => Promise<any>;
    getViewportScreenshot: (this: XCUITestDriver) => Promise<string>;
    getPageSource: (this: XCUITestDriver) => Promise<any>;
    mobileGetSource: (this: XCUITestDriver, format?: import("./commands/types").SourceFormat, excludedAttributes?: string | undefined) => Promise<string>;
    pageLoadTimeoutW3C: (this: XCUITestDriver, ms: any) => Promise<void>;
    pageLoadTimeoutMJSONWP: (this: XCUITestDriver, ms: any) => Promise<void>;
    scriptTimeoutW3C: (this: XCUITestDriver, ms: any) => Promise<void>;
    asyncScriptTimeout: (this: XCUITestDriver, ms: number) => Promise<void>;
    setPageLoadTimeout: (this: XCUITestDriver, ms: any) => void;
    setAsyncScriptTimeout: (this: XCUITestDriver, ms: any) => void;
    setFrame: (this: XCUITestDriver, frame: any) => Promise<void>;
    getCssProperty: (this: XCUITestDriver, propertyName: any, el: any) => Promise<any>;
    submit: (this: XCUITestDriver, el: string | Element) => Promise<void>;
    refresh: (this: XCUITestDriver) => Promise<void>;
    getUrl: (this: XCUITestDriver) => Promise<any>;
    title: (this: XCUITestDriver) => Promise<any>;
    getCookies: (this: XCUITestDriver) => Promise<any>;
    setCookie: (this: XCUITestDriver, cookie: any) => Promise<void>;
    deleteCookie: (this: XCUITestDriver, cookieName: any) => Promise<void>;
    deleteCookies: (this: XCUITestDriver) => Promise<void>;
    _deleteCookie: (this: XCUITestDriver, cookie: any) => Promise<any>;
    cacheWebElement: (this: XCUITestDriver, el: any) => any;
    cacheWebElements: (this: XCUITestDriver, response: any) => any;
    executeAtom: (this: XCUITestDriver, atom: string, args: unknown[], alwaysDefaultFrame?: boolean) => Promise<any>;
    executeAtomAsync: (this: XCUITestDriver, atom: string, args: any[]) => Promise<any>;
    getAtomsElement: <S extends string>(this: XCUITestDriver, elOrId: S | Element<S>) => import("./commands/types").AtomsElement<S>;
    convertElementsForAtoms: (this: XCUITestDriver, args?: readonly any[] | undefined) => any;
    getElementId: (element: any) => any;
    hasElementId: (element: any) => element is Element;
    findWebElementOrElements: (this: XCUITestDriver, strategy: any, selector: any, many: any, ctx: any) => Promise<any>;
    clickWebCoords: (this: XCUITestDriver, x: number, y: number) => Promise<void>;
    getSafariIsIphone: (this: XCUITestDriver) => Promise<boolean>;
    getSafariDeviceSize: (this: XCUITestDriver) => Promise<import("@appium/types").Size>;
    getSafariIsNotched: (this: XCUITestDriver) => Promise<boolean>;
    getExtraTranslateWebCoordsOffset: (this: XCUITestDriver, wvPos: any, realDims: any) => Promise<void>;
    getExtraNativeWebTapOffset: (this: XCUITestDriver, isIphone: boolean, bannerVisibility: string) => Promise<number>;
    nativeWebTap: (this: XCUITestDriver, el: any) => Promise<void>;
    translateWebCoords: (this: XCUITestDriver, x: number, y: number) => Promise<import("@appium/types").Position>;
    checkForAlert: (this: XCUITestDriver) => Promise<boolean>;
    waitForAtom: (this: XCUITestDriver, promise: Promise<any>) => Promise<any>;
    mobileWebNav: (this: XCUITestDriver, navType: string) => Promise<void>;
    getWdaLocalhostRoot: (this: XCUITestDriver) => string;
    mobileCalibrateWebToRealCoordinatesTranslation: (this: XCUITestDriver) => Promise<import("./types").CalibrationData>;
    mobileUpdateSafariPreferences: (this: XCUITestDriver, preferences: import("@appium/types").StringRecord) => Promise<void>;
    mobileRunXCTest: (this: XCUITestDriver, testRunnerBundleId: string, appUnderTestBundleId: string, xcTestBundleId: string, args?: string[], testType?: "app" | "ui" | "logic", env?: import("@appium/types").StringRecord<any> | undefined, timeout?: number) => Promise<import("./commands/types").RunXCTestResult>;
    mobileInstallXCTestBundle: (this: XCUITestDriver, xctestApp: string) => Promise<void>;
    mobileListXCTestBundles: (this: XCUITestDriver) => Promise<string[]>;
    mobileListXCTestsInTestBundle: (this: XCUITestDriver, bundle: string) => Promise<string[]>;
    mobileStartXctestScreenRecording: (this: XCUITestDriver, fps?: number | undefined, codec?: number | undefined) => Promise<XcTestScreenRecordingInfo>;
    mobileGetXctestScreenRecordingInfo: () => Promise<XcTestScreenRecordingInfo | null>;
    mobileStopXctestScreenRecording: (this: XCUITestDriver, remotePath?: string | undefined, user?: string | undefined, pass?: string | undefined, headers?: import("@appium/types").HTTPHeaders | undefined, fileFieldName?: string | undefined, formFields?: [string, any][] | Record<string, any> | undefined, method?: "POST" | "PUT" | "PATCH" | undefined) => Promise<XcTestScreenRecording>;
}
export default XCUITestDriver;
export type ExternalDriver<C extends import("@appium/types").Constraints, Ctx = string> = import("@appium/types").ExternalDriver<C, Ctx>;
export type AutInstallationStateOptions = Pick<XCUITestDriverOpts, "enforceAppInstall" | "fullReset" | "noReset" | "bundleId" | "app">;
export type AutInstallationState = {
    /**
     * - If the given app should install, or not need to install.
     */
    install: boolean;
    /**
     * - If the installed app should be uninstalled, or not.
     */
    skipUninstall: boolean;
};
export type XCUITestDriverConstraints = typeof desiredCapConstraints;
export type XCUITestDriverOpts = import("@appium/types").DriverOpts<XCUITestDriverConstraints>;
export type FullContext = import("./commands/types").FullContext;
export type XcodeVersion = import("appium-xcode").XcodeVersion;
export type Simulator = import("appium-ios-simulator").Simulator;
export type DriverLogs = {
    syslog?: import("./device-log/ios-simulator-log").IOSSimulatorLog | import("./device-log/ios-device-log").IOSDeviceLog | undefined;
    crashlog?: import("./device-log/ios-crash-log").IOSCrashLog | undefined;
    safariConsole?: import("./device-log/safari-console-log").SafariConsoleLog | undefined;
    safariNetwork?: import("./device-log/safari-network-log").SafariNetworkLog | undefined;
    performance?: import("./device-log/ios-performance-log").IOSPerformanceLog | undefined;
};
import { BaseDriver } from 'appium/driver';
import { LRUCache } from 'lru-cache';
import { RealDevice } from './real-device';
import { WebDriverAgent } from 'appium-webdriveragent';
import { DeviceSettings } from 'appium/driver';
import { AppInfosCache } from './app-infos-cache';
import { mjpeg } from 'appium/support';
import { desiredCapConstraints } from './desired-caps';
//# sourceMappingURL=driver.d.ts.map
/**
 * @typedef {Object} InstallOptions
 *
 * @property {boolean} [skipUninstall] Whether to skip app uninstall before installing it
 * @property {number} [timeout=480000] App install timeout
 * @property {boolean} [shouldEnforceUninstall] Whether to enforce the app uninstallation. e.g. fullReset, or enforceAppInstall is true
 */
/**
 * @this {import('./driver').XCUITestDriver}
 * @param {string} [app] The app to the path
 * @param {string} [bundleId] The bundle id to ensure it is already installed and uninstall it
 * @param {InstallOptions} [opts={}]
 */
export function installToRealDevice(this: import("./driver").XCUITestDriver, app?: string | undefined, bundleId?: string | undefined, opts?: InstallOptions | undefined): Promise<void>;
/**
 * @this {import('./driver').XCUITestDriver}
 * @returns {Promise<void>}
 */
export function runRealDeviceReset(this: import("./driver").XCUITestDriver): Promise<void>;
/**
 * Configures Safari startup options based on the given session capabilities.
 *
 * !!! This method mutates driver options.
 *
 * @this {import('./driver').XCUITestDriver}
 * @return {boolean} true if process arguments have been modified
 */
export function applySafariStartupArgs(this: import("./driver").XCUITestDriver): boolean;
/**
 * @this {XCUITestDriver}
 * @returns {Promise<string>}
 */
export function detectUdid(this: import("./driver").XCUITestDriver): Promise<string>;
export type InstallOptions = {
    /**
     * Whether to skip app uninstall before installing it
     */
    skipUninstall?: boolean | undefined;
    /**
     * App install timeout
     */
    timeout?: number | undefined;
    /**
     * Whether to enforce the app uninstallation. e.g. fullReset, or enforceAppInstall is true
     */
    shouldEnforceUninstall?: boolean | undefined;
};
/**
 * }
 */
export type RealDevice = import("./real-device").RealDevice;
export type XCUITestDriver = import("./driver").XCUITestDriver;
//# sourceMappingURL=real-device-management.d.ts.map
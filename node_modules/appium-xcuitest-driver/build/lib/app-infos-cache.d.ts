export class AppInfosCache {
    /**
     * @param {import('@appium/types').AppiumLogger} log
     */
    constructor(log: import("@appium/types").AppiumLogger);
    log: import("@appium/types").AppiumLogger;
    /**
     *
     * @param {string} bundlePath Full path to the .ipa or .app bundle
     * @param {string} propertyName
     * @returns {Promise<any>}
     */
    extractManifestProperty(bundlePath: string, propertyName: string): Promise<any>;
    /**
     *
     * @param {string} bundlePath Full path to the .ipa or .app bundle
     * @returns {Promise<string>}
     */
    extractBundleId(bundlePath: string): Promise<string>;
    /**
     *
     * @param {string} bundlePath Full path to the .ipa or .app bundle
     * @returns {Promise<string>}
     */
    extractBundleVersion(bundlePath: string): Promise<string>;
    /**
     *
     * @param {string} bundlePath Full path to the .ipa or .app bundle
     * @returns {Promise<string[]>}
     */
    extractAppPlatforms(bundlePath: string): Promise<string[]>;
    /**
     *
     * @param {string} bundlePath Full path to the .ipa or .app bundle
     * @returns {Promise<string>}
     */
    extractExecutableName(bundlePath: string): Promise<string>;
    /**
     *
     * @param {string} bundlePath Full path to the .ipa or .app bundle
     * @returns {Promise<import('@appium/types').StringRecord>} The payload of the manifest plist
     * @throws {Error} If the given app is not a valid bundle
     */
    put(bundlePath: string): Promise<import("@appium/types").StringRecord>;
    /**
     * @param {string} ipaPath Fill path to the .ipa bundle
     * @returns {Promise<import('@appium/types').StringRecord>} The payload of the manifest plist
     */
    _putIpa(ipaPath: string): Promise<import("@appium/types").StringRecord>;
    /**
     * @param {string} appPath Fill path to the .app bundle
     * @returns {Promise<import('@appium/types').StringRecord>} The payload of the manifest plist
     */
    _putApp(appPath: string): Promise<import("@appium/types").StringRecord>;
    /**
     * @param {string} plistPath Full path to the plist
     * @param {string} bundlePath Full path to .ipa or .app bundle
     * @returns {Promise<any>} The payload of the plist file
     */
    _readPlist(plistPath: string, bundlePath: string): Promise<any>;
}
//# sourceMappingURL=app-infos-cache.d.ts.map
/** @satisfies {import('@appium/types').IDoctorCheck} */
export class XcodeCheck {
    diagnose(): Promise<import("@appium/types").DoctorCheckResult>;
    fix(): Promise<string>;
    hasAutofix(): boolean;
    isOptional(): boolean;
}
export const xcodeCheck: XcodeCheck;
/** @satisfies {import('@appium/types').IDoctorCheck} */
export class XcodeToolsCheck {
    diagnose(): Promise<import("@appium/types").DoctorCheckResult>;
    fix(): Promise<string>;
    hasAutofix(): boolean;
    isOptional(): boolean;
}
export const xcodeToolsCheck: XcodeToolsCheck;
export const homeEnvVarCheck: EnvVarAndPathCheck;
export type EnvVarCheckOptions = {
    /**
     * If set to true then
     * the path is expected to be a valid folder
     */
    expectDir?: boolean | undefined;
    /**
     * If set to true then
     * the path is expected to be a valid file
     */
    expectFile?: boolean | undefined;
};
/**
 * @typedef EnvVarCheckOptions
 * @property {boolean} [expectDir] If set to true then
 * the path is expected to be a valid folder
 * @property {boolean} [expectFile] If set to true then
 * the path is expected to be a valid file
 */
/** @satisfies {import('@appium/types').IDoctorCheck} */
declare class EnvVarAndPathCheck {
    /**
     * @param {string} varName
     * @param {EnvVarCheckOptions} [opts={}]
     */
    constructor(varName: string, opts?: EnvVarCheckOptions | undefined);
    ENVIRONMENT_VARS_TUTORIAL_URL: string;
    varName: string;
    opts: EnvVarCheckOptions;
    diagnose(): Promise<import("@appium/types").DoctorCheckResult>;
    fix(): Promise<string>;
    hasAutofix(): boolean;
    isOptional(): boolean;
}
export {};
//# sourceMappingURL=required-checks.d.ts.map
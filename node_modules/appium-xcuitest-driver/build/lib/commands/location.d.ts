declare namespace _default {
    /**
     * Returns location of the device under test.
     * The device under test must allow the location services for WDA
     * as 'Always' to get the location data correctly.
     *
     * The 'latitude', 'longitude' and 'altitude' could be zero even
     * if the Location Services are set to 'Always', because the device
     * needs some time to update the location data.
     *
     * For iOS 17, the return value could be the result of
     * "mobile:getSimulatedLocation" if the simulated location has been previously set
     * "mobile:setSimulatedLocation" already.
     *
     * @returns {Promise<import('./types').LocationWithAltitude>}
     * @throws {Error} If the device under test returns an error message.
     *                 i.e.: tvOS returns unsupported error
     * @this {XCUITestDriver}
     */
    function getGeoLocation(this: import("../driver").XCUITestDriver): Promise<import("./types").LocationWithAltitude>;
    /**
     * Set location of the device under test.
     *
     * iOS 17+ real device environment will be via "mobile:setSimulatedLocation" as
     * setting simulated location for XCTest session.
     *
     * @param {Partial<Location>} location
     * @this {XCUITestDriver}
     */
    function setGeoLocation(this: import("../driver").XCUITestDriver, location: Partial<Location>): Promise<import("@appium/types").Location>;
    /**
     * Reset the location service on real device.
     * Raises not implemented error for simulator.
     * @throws {Error} If the device is simulator, or 'resetLocation' raises an error.
     * @this {XCUITestDriver}
     */
    function mobileResetLocationService(this: import("../driver").XCUITestDriver): Promise<void>;
}
export default _default;
export type XCUITestDriver = import("../driver").XCUITestDriver;
export type WDALocationInfo = import("./types").WDALocationInfo;
export type Location = import("@appium/types").Location;
//# sourceMappingURL=location.d.ts.map
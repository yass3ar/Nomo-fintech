declare namespace _default {
    /**
     * Simulates push notification delivery to a simulated device.
     *
     * **Only "remote" push notifications are supported.** VoIP, Complication, File Provider, and other types are unsupported.
     *
     * Supported in Xcode SDK 11.4+.
     * @param {string} bundleId - The bundle identifier of the target application
     * @param {import('./types').PushPayload} payload - Valid push payload.
     * @group Simulator Only
     * @this {XCUITestDriver}
     */
    function mobilePushNotification(this: import("../driver").XCUITestDriver, bundleId: string, payload: import("./types").PushPayload): Promise<void>;
    /**
     * Blocks until the expected notification is delivered.
     *
     * This method is a thin wrapper over the
     * [`XCTNSNotificationExpectation`](https://developer.apple.com/documentation/xctest/xctnsnotificationexpectation?language=objc) and
     * [`XCTDarwinNotificationExpectation`](https://developer.apple.com/documentation/xctest/xctdarwinnotificationexpectation?language=objc) entities.
     *
     * @param {string} name - The name of the notification to expect
     * @param {import('./types').NotificationType} type - Which notification type to expect.
     * @param {number} timeoutSeconds - For how long to wait until the notification is delivered (in float seconds).
     * @throws A [`TimeoutError`](https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/error_exports_TimeoutError.html) if the expected notification has not been delivered within the given timeout.
     * @this {XCUITestDriver}
     */
    function mobileExpectNotification(this: import("../driver").XCUITestDriver, name: string, type?: import("./types").NotificationType, timeoutSeconds?: number): Promise<unknown>;
}
export default _default;
export type XCUITestDriver = import("../driver").XCUITestDriver;
//# sourceMappingURL=notifications.d.ts.map
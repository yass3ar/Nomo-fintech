"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const enum_1 = require("./enum");
const utils_1 = require("../utils");
const assertSimulator = lodash_1.default.partial(utils_1.assertSimulator, 'Permission-related operations');
exports.default = {
    /**
     * Resets the given permission for the active application under test.
     * Works for both Simulator and real devices using Xcode SDK 11.4+
     *
     * @param {PermissionService|number} service - One of the available service names. This could also be an integer protected resource identifier; see [this list](https://developer.apple.com/documentation/xctest/xcuiprotectedresource?language=objc)
     * @throws {Error} If permission reset fails on the device.
     * @this {XCUITestDriver}
     */
    async mobileResetPermission(service) {
        if (!service) {
            throw new Error(`The 'service' option is expected to be present`);
        }
        let resource;
        if (lodash_1.default.isString(service)) {
            resource = enum_1.PermissionService[lodash_1.default.toLower(service)];
            if (!resource) {
                throw new Error(`The 'service' value must be one of ` + `${JSON.stringify(lodash_1.default.keys(enum_1.PermissionService))}`);
            }
        }
        else if (lodash_1.default.isInteger(service)) {
            resource = service;
        }
        else {
            throw new Error(`The 'service' value must be either a string or an integer. ` +
                `'${service}' is passed instead`);
        }
        await this.proxyCommand('/wda/resetAppAuth', 'POST', { resource });
    },
    /**
     * Gets application permission state on a simulated device.
     *
     * **This method requires [WIX applesimutils](https://github.com/wix/AppleSimulatorUtils) to be installed on the Appium server host.**
     *
     * @param {string} bundleId - Bundle identifier of the target application
     * @param {import('./enum').PermissionService} service - Service name
     * @returns {Promise<import('./types').PermissionState>} Either 'yes', 'no', 'unset' or 'limited'
     * @throws {Error} If permission getting fails or the device is not a Simulator.
     * @this {XCUITestDriver}
     * @group Simulator Only
     */
    async mobileGetPermission(bundleId, service) {
        if (!service) {
            throw new Error(`The 'service' option is expected to be present`);
        }
        assertSimulator(this);
        return /** @type {import('./types').PermissionState} */ (await /** @type {import('../driver').Simulator} */ (this.device).getPermission(bundleId, String(service)));
    },
    /**
     * Set application permission state on Simulator.
     *
     * @param {Record<Partial<import('./types').AccessRule>, import('./types').PermissionState>} access - One or more access rules to set.
     * @param {string} bundleId - Bundle identifier of the target application
     * @since Xcode SDK 11.4
     * @throws {Error} If permission setting fails or the device is not a Simulator.
     * @group Simulator Only
     * @this {XCUITestDriver}
     */
    async mobileSetPermissions(access, bundleId) {
        if (!lodash_1.default.isPlainObject(access)) {
            throw new Error(`The 'access' option is expected to be a map`);
        }
        assertSimulator(this);
        await /** @type {import('../driver').Simulator} */ (this.device).setPermissions(bundleId, access);
    },
};
/**
 * @typedef {import('../driver').XCUITestDriver} XCUITestDriver
 */
//# sourceMappingURL=permissions.js.map
/**
 * Parses the actual path and the bundle identifier from the given path string
 *
 * @param {string} remotePath - The given path string. The string should
 * match `CONTAINER_PATH_PATTERN` regexp, otherwise an error is going
 * to be thrown. A valid string example: `@bundle.identifier:container_type/relative_path_in_container`
 * @param {import('./types').ContainerRootSupplier|string} [containerRootSupplier] - Container root path supplier function or string value
 * @returns {Promise<import('./types').ContainerObject>}
 */
export function parseContainerPath(remotePath: string, containerRootSupplier?: string | import("./types").ContainerRootSupplier | undefined): Promise<import("./types").ContainerObject>;
declare namespace _default {
    /**
     * Pushes the given data to a file on the remote device
     *
     * @param {string} remotePath The full path to the remote file or
     * a file inside a package bundle. Check the documentation on
     * `pushFileToRealDevice` and `pushFileToSimulator` for more information
     * on acceptable values.
     * @param {string} base64Data Base64 encoded data to be written to the
     * remote file. The remote file will be silently overridden if it already exists.
     * @throws {Error} If there was an error while pushing the data
     * @this {XCUITestDriver}
     */
    function pushFile(this: import("../driver").XCUITestDriver, remotePath: string, base64Data: string): Promise<void>;
    /**
     * Pushes the given data to a file on the remote device.
     *
     * @param {string} remotePath - The full path to the remote file
     * or a specially formatted path, which points to an item inside an app bundle.
     * @param {string} payload - Base64-encoded content of the file to be pushed.
     * @this {XCUITestDriver}
     */
    function mobilePushFile(this: import("../driver").XCUITestDriver, remotePath: string, payload: string): Promise<void>;
    /**
     * Pulls a remote file from the device.
     *
     * @param {string} remotePath The full path to the remote file
     * or a specially formatted path, which points to an item inside app bundle.
     * See the documentation for `pullFromRealDevice` and `pullFromSimulator`
     * to get more information on acceptable values.
     * @returns {Promise<string>} Base64 encoded content of the pulled file
     * @throws {Error} If the pull operation failed
     * @this {XCUITestDriver}
     */
    function pullFile(this: import("../driver").XCUITestDriver, remotePath: string): Promise<string>;
    /**
     * Pulls a remote file from the device.
     *
     * @param {string} remotePath - The full path to the remote file
     * or a specially formatted path, which points to an item inside app bundle.  See the documentation for `pullFromRealDevice` and `pullFromSimulator` to get more information on acceptable values.
     * @returns {Promise<string>} The same as in `pullFile`
     * @this {XCUITestDriver}
     */
    function mobilePullFile(this: import("../driver").XCUITestDriver, remotePath: string): Promise<string>;
    /**
     * Delete a remote folder from the device.
     *
     * @param {string} remotePath - The full path to the remote folder or a specially formatted path, which points to an item inside app bundle. See the documentation for `pullFromRealDevice` and `pullFromSimulator` to get more information on acceptable values.
     * @this {XCUITestDriver}
     * @returns {Promise<void>}
     */
    function mobileDeleteFolder(this: import("../driver").XCUITestDriver, remotePath: string): Promise<void>;
    /**
     * Delete a remote file from the device.
     *
     * @param {string} remotePath - The full path to the remote file or a specially formatted path, which points to an item inside app bundle. See the documentation for `pullFromRealDevice` and `pullFromSimulator` to get more information on acceptable values.
     * @this {XCUITestDriver}
     * @returns {Promise<void>}
     */
    function mobileDeleteFile(this: import("../driver").XCUITestDriver, remotePath: string): Promise<void>;
    /**
     * Pulls the whole folder from the remote device
     *
     * @param {string} remotePath The full path to a folder on the
     * remote device or a folder inside an application bundle
     * @returns {Promise<string>} Zipped and base64-encoded content of the folder
     * @throws {Error} If there was a failure while getting the folder content
     * @this {XCUITestDriver}
     */
    function pullFolder(this: import("../driver").XCUITestDriver, remotePath: string): Promise<string>;
    /**
     * Pulls the whole folder from the device under test.
     *
     * @param {string} remotePath - The full path to the remote folder
     * @returns {Promise<string>} The same as `pullFolder`
     * @this {XCUITestDriver}
     */
    function mobilePullFolder(this: import("../driver").XCUITestDriver, remotePath: string): Promise<string>;
}
export default _default;
export type XCUITestDriver = import("../driver").XCUITestDriver;
//# sourceMappingURL=file-movement.d.ts.map
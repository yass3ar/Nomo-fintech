declare namespace _default {
    /**
     * Resets the given permission for the active application under test.
     * Works for both Simulator and real devices using Xcode SDK 11.4+
     *
     * @param {PermissionService|number} service - One of the available service names. This could also be an integer protected resource identifier; see [this list](https://developer.apple.com/documentation/xctest/xcuiprotectedresource?language=objc)
     * @throws {Error} If permission reset fails on the device.
     * @this {XCUITestDriver}
     */
    function mobileResetPermission(this: import("../driver").XCUITestDriver, service: PermissionService | number): Promise<void>;
    /**
     * Gets application permission state on a simulated device.
     *
     * **This method requires [WIX applesimutils](https://github.com/wix/AppleSimulatorUtils) to be installed on the Appium server host.**
     *
     * @param {string} bundleId - Bundle identifier of the target application
     * @param {import('./enum').PermissionService} service - Service name
     * @returns {Promise<import('./types').PermissionState>} Either 'yes', 'no', 'unset' or 'limited'
     * @throws {Error} If permission getting fails or the device is not a Simulator.
     * @this {XCUITestDriver}
     * @group Simulator Only
     */
    function mobileGetPermission(this: import("../driver").XCUITestDriver, bundleId: string, service: import("./enum").PermissionService): Promise<import("./types").PermissionState>;
    /**
     * Set application permission state on Simulator.
     *
     * @param {Record<Partial<import('./types').AccessRule>, import('./types').PermissionState>} access - One or more access rules to set.
     * @param {string} bundleId - Bundle identifier of the target application
     * @since Xcode SDK 11.4
     * @throws {Error} If permission setting fails or the device is not a Simulator.
     * @group Simulator Only
     * @this {XCUITestDriver}
     */
    function mobileSetPermissions(this: import("../driver").XCUITestDriver, access: Record<Partial<import("./types").AccessRule>, import("./types").PermissionState>, bundleId: string): Promise<void>;
}
export default _default;
export type XCUITestDriver = import("../driver").XCUITestDriver;
import { PermissionService } from './enum';
//# sourceMappingURL=permissions.d.ts.map
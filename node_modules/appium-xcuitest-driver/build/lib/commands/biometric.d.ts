declare namespace _default {
    /**
     * Enrolls biometric authentication on a simulated device.
     *
     * @param {boolean} isEnabled - Whether to enable/disable biometric enrollment.
     * @throws {Error} If enrollment fails or the device is not a Simulator.
     * @group Simulator Only
     * @this {XCUITestDriver}
     */
    function mobileEnrollBiometric(this: import("../driver").XCUITestDriver, isEnabled?: boolean): Promise<void>;
    /**
     * Emulates biometric match or non-match event on a simulated device.
     *
     * The biometric feature is expected to be already enrolled via {@linkcode mobileEnrollBiometric|mobile: enrollBiometric} before executing this.
     *
     * @param {import('./types').BiometricFeature} type - The biometric feature name.
     * @param {boolean} match - If `true`, simulate biometic match. If `false`, simulate biometric non-match.
     * @throws {Error} If matching fails or the device is not a Simulator.
     * @group Simulator Only
     * @this {XCUITestDriver}
     */
    function mobileSendBiometricMatch(this: import("../driver").XCUITestDriver, type?: import("./types").BiometricFeature, match?: boolean): Promise<void>;
    /**
     * Checks whether the biometric feature is currently enrolled on a simulated device.
     *
     * @returns {Promise<boolean>} `true` if biometric is enrolled.
     * @throws {Error} If the detection fails or the device is not a Simulator.
     * @group Simulator Only
     * @this {XCUITestDriver}
     */
    function mobileIsBiometricEnrolled(this: import("../driver").XCUITestDriver): Promise<boolean>;
}
export default _default;
export type XCUITestDriver = import("../driver").XCUITestDriver;
//# sourceMappingURL=biometric.d.ts.map
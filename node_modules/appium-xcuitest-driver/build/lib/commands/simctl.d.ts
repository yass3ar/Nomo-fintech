declare namespace _default {
    /**
     * Run the given command with arguments as `xcrun simctl` subcommand.
     * This method works behind the 'simctl' security flag.
     * @this {XCUITestDriver}
     * @param {string} command Subcommand to run with `xcrun simctl`
     * @param {string[]} [args=[]] arguments for the subcommand. The arguments should be after <device> in the help.
     * @param {number|undefined} timeout - The maximum number of milliseconds
     * @returns {Promise<SimctlExecResponse>}
     * @throws {Error} If the simctl subcommand command returns non-zero return code, or the given subcommand was invalid.
     */
    function mobileSimctl(this: import("./../driver").XCUITestDriver, command: string, args?: string[] | undefined, timeout?: number | undefined): Promise<SimctlExecResponse>;
}
export default _default;
export type SimctlExecResponse = {
    /**
     * The output of standard out.
     */
    stdout: string;
    /**
     * The output of standard error.
     */
    stderr: string;
    /**
     * Return code.
     */
    code: number;
};
export type XCUITestDriver = import("../driver").XCUITestDriver;
//# sourceMappingURL=simctl.d.ts.map
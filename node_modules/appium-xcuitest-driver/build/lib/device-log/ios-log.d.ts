import { EventEmitter } from 'events';
import type { LogEntry } from '../commands/types';
import type { AppiumLogger } from '@appium/types';
export interface IOSLogOptions {
    maxBufferSize?: number;
    log?: AppiumLogger;
}
export declare abstract class IOSLog<TRawEntry, TSerializedEntry extends object> extends EventEmitter {
    private maxBufferSize;
    private logs;
    private _log;
    constructor(opts?: IOSLogOptions);
    abstract startCapture(): Promise<void>;
    abstract stopCapture(): Promise<void>;
    abstract get isCapturing(): boolean;
    get log(): AppiumLogger;
    getLogs(): Promise<LogEntry[]>;
    protected abstract _serializeEntry(value: TRawEntry): TSerializedEntry;
    protected abstract _deserializeEntry(value: TSerializedEntry): LogEntry;
    protected _clearEntries(): void;
    protected broadcast(entry: TRawEntry): void;
}
export default IOSLog;
//# sourceMappingURL=ios-log.d.ts.map
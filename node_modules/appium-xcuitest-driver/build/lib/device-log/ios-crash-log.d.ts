import IOSLog from './ios-log';
import type { AppiumLogger } from '@appium/types';
import type { Simulator } from 'appium-ios-simulator';
import type { LogEntry } from '../commands/types';
type TSerializedEntry = [string, number];
export interface IOSCrashLogOptions {
    /** UDID of a real device */
    udid?: string;
    /** Simulator instance */
    sim?: Simulator;
    log: AppiumLogger;
}
export declare class IOSCrashLog extends IOSLog<TSerializedEntry, TSerializedEntry> {
    private readonly _udid;
    private readonly _realDeviceClient;
    private readonly _logDir;
    private readonly _sim;
    private _recentCrashFiles;
    private _started;
    constructor(opts: IOSCrashLogOptions);
    startCapture(): Promise<void>;
    stopCapture(): Promise<void>;
    get isCapturing(): boolean;
    getLogs(): Promise<LogEntry[]>;
    protected _serializeEntry(value: TSerializedEntry): TSerializedEntry;
    protected _deserializeEntry(value: TSerializedEntry): LogEntry;
    private _serializeCrashes;
    private _gatherFromRealDevice;
    private _gatherFromSimulator;
    private _listCrashFiles;
    private _isRealDevice;
}
export default IOSCrashLog;
//# sourceMappingURL=ios-crash-log.d.ts.map
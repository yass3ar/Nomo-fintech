"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HOUSE_ARREST_SERVICE_NAME = exports.HouseArrestService = void 0;
const plist_service_decoder_1 = __importDefault(require("../plist-service/transformer/plist-service-decoder"));
const plist_service_encoder_1 = __importDefault(require("../plist-service/transformer/plist-service-encoder"));
const length_based_splitter_1 = __importDefault(require("../util/transformer/length-based-splitter"));
const constants_1 = require("../constants");
const afc_1 = __importDefault(require("../afc"));
const bluebird_1 = __importDefault(require("bluebird"));
const base_service_1 = require("../base-service");
const HOUSE_ARREST_SERVICE_NAME = 'com.apple.mobile.house_arrest';
exports.HOUSE_ARREST_SERVICE_NAME = HOUSE_ARREST_SERVICE_NAME;
const MAX_FRAME_SIZE = 1 * constants_1.KB;
class HouseArrestService extends base_service_1.BaseServiceSocket {
    constructor(socketClient) {
        super(socketClient);
        this._decoder = new plist_service_decoder_1.default();
        this._splitter = new length_based_splitter_1.default({
            readableStream: socketClient,
            littleEndian: false,
            maxFrameLength: MAX_FRAME_SIZE,
            lengthFieldOffset: 0,
            lengthFieldLength: 4,
            lengthAdjustment: 4,
        });
        this._socketClient.pipe(this._splitter).pipe(this._decoder);
        this._encoder = new plist_service_encoder_1.default();
        this._encoder.pipe(this._socketClient);
        this._assignClientFailureHandlers(this._encoder);
    }
    /**
     * Vends into the application container and returns an AfcService
     * @param {string} bundleId The bundle id of the app container that we will enter to
     * @throws Will throw an error if house arrest fails to access the application's container
     * @returns {Promise<AfcService>}
     */
    async vendContainer(bundleId) {
        const responsePromise = this._receivePlistPromise();
        this._encoder.write({
            Command: 'VendContainer',
            Identifier: bundleId,
        });
        const response = await responsePromise;
        if (response.Status !== 'Complete') {
            throw new Error(`Failed to vend into the application container. Error: ${response.Error}`);
        }
        this._socketClient.unpipe(this._splitter);
        this._splitter.unpipe(this._decoder);
        return new afc_1.default(this._socketClient);
    }
    /**
     * Vends into the application documents and returns an AfcService
     * @param {string} bundleId The bundle id of the app documents that we will enter to
     * @throws Will throw an error if house arrest fails to access the application's documents
     * @returns {Promise<AfcService>}
     */
    async vendDocuments(bundleId) {
        const responsePromise = this._receivePlistPromise();
        this._encoder.write({
            Command: 'VendDocuments',
            Identifier: bundleId,
        });
        const response = await responsePromise;
        if (response.Status !== 'Complete') {
            throw new Error(`Failed to vend into the application documents. Error: ${response.Error}`);
        }
        this._socketClient.unpipe(this._splitter);
        this._splitter.unpipe(this._decoder);
        return new afc_1.default(this._socketClient);
    }
    _receivePlistPromise(timeout = 10000) {
        return new bluebird_1.default((resolve, reject) => {
            this._decoder.once('data', resolve);
            setTimeout(() => reject(new Error(`Failed to receive any data within the timeout: ${timeout}`)), timeout);
        });
    }
}
exports.HouseArrestService = HouseArrestService;
exports.default = HouseArrestService;
//# sourceMappingURL=index.js.map
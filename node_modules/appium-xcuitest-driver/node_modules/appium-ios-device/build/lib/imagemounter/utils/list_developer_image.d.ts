export type ImagePath = {
    developerImage: string;
    developerImageSignature: string;
};
export type GithubTreeObject = {
    path: string;
    mode: string;
    type: "blob" | "tree";
    sha: string;
    size: number;
    url: string;
};
export type GithubTreeResponse = {
    sha: string;
    url: string;
    tree?: GithubTreeObject[] | undefined;
    truncated?: boolean | undefined;
    node_id?: string | undefined;
    size?: number | undefined;
    content?: string | undefined;
    base64?: string | undefined;
};
/**
 * Option to indicate which github repo and subfolder to use to search developer
 * image. The image and signature files should be compressed into a zip format, and the filename should match this
 * regular expression: `${finalVersion}(\\(([\\w_|.()])+\\))?.zip`
 */
export type ImageFromGithubRepo = {
    /**
     * This should be in format of `$(group or username)/${repository}`, which contains
     * available images.
     */
    githubRepo: string;
    branch: string;
    /**
     * subfolder list in level order
     */
    subFolderList?: string[] | undefined;
};
/**
 * @typedef {Object} ImagePath
 * @property {string} developerImage
 * @property {string} developerImageSignature
 */
/**
 * Find developer image for certain version. If developer image does not exists,
 * this will try to find and download developer image, unzip to `${APPIUM_HOME}/iOSSupport/`
 * @param {string} version full version of iOS device. The first two parts of version
 * will be preserved when sending the request, e.g. `14.7.1` will be changed to `14.7`
 * @param {ImageFromGithubRepo} githubImageOption
 * @returns {Promise<ImagePath>}
 * @throws If developer image is not found, or error while downloading or unzipping.
 */
export function findDeveloperImage(version: string, githubImageOption: ImageFromGithubRepo): Promise<ImagePath>;
//# sourceMappingURL=list_developer_image.d.ts.map
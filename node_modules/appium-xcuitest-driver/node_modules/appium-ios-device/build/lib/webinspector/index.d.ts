export default WebInspectorService;
export type WebInspectorServiceOptions = {
    /**
     * The major version of the os version
     */
    majorOsVersion: number;
    /**
     * Whether the device is a simulator
     */
    isSimulator: boolean;
    /**
     * Size, in bytes of the chunks to send to
     * real device (only iOS 11+). Defaults to
     * 16384 bytes (the TLSSocket max).
     */
    socketChunkSize: number | null;
    /**
     * Turn on logging of each message sent or received.
     * Defaults to false
     */
    verbose: boolean;
    /**
     * Turn on logging of _all_ communication as
     * hex dump. Defaults to false
     */
    verboseHexDump: boolean;
    /**
     * The socket client where the communication will happen
     */
    socketClient: any;
    /**
     * [20 * 1024 * 1024] - The maximum size
     * in bytes of a single data frame
     * in the device communication protocol
     */
    maxFrameLength: number;
};
/**
 * @typedef {Object} WebInspectorServiceOptions
 *
 * @property {number} majorOsVersion The major version of the os version
 * @property {boolean} isSimulator Whether the device is a simulator
 * @property {number?} socketChunkSize Size, in bytes of the chunks to send to
 *                                     real device (only iOS 11+). Defaults to
 *                                     16384 bytes (the TLSSocket max).
 * @property {boolean} verbose Turn on logging of each message sent or received.
 *                             Defaults to false
 * @property {boolean} verboseHexDump Turn on logging of _all_ communication as
 *                                    hex dump. Defaults to false
 * @property {*} socketClient The socket client where the communication will happen
 * @property {number} maxFrameLength [20 * 1024 * 1024] - The maximum size
 *                                   in bytes of a single data frame
 *                                   in the device communication protocol
 */
export class WebInspectorService extends BaseServiceSocket {
    /**
     * The main service for communication with the webinspectord
     *
     * @param {Partial<WebInspectorServiceOptions>} opts
     */
    constructor(opts?: Partial<WebInspectorServiceOptions>);
    /** @type {number|undefined} */
    _majorOsVersion: number | undefined;
    _verbose: boolean;
    _isSimulator: boolean;
    /**
     * Intializes the data flow for iOS 11+.
     *
     * @param {boolean} verbose - whether to print out the hex dump for communication
     * @param {number} maxFrameLength - The maximum size in bytes of a single data frame
     *                                  in the device communication protocol
     */
    _initializeFullMessageSupport(verbose: boolean, maxFrameLength: number): void;
    _decoder: PlistServiceDecoder | WebInspectorDecoder | undefined;
    _splitter: LengthBasedSplitter | undefined;
    _encoder: PlistServiceEncoder | WebInspectorEncoder | undefined;
    /**
     * Intializes the data flow for iOS < 11, where data is separated into partial
     * messages before sending.
     *
     * @param {boolean} verbose - whether to print out the hex dump for communication
     * @param {number} maxFrameLength - The maximum size in bytes of a single data frame
     *                                  in the device communication protocol
     */
    _initializePartialMessageSupport(verbose: boolean, maxFrameLength: number): void;
    /**
     * Sends an object to the webinspectord socket
     * @param {Object} rpcObject The object that will be sent
     * @throws Will throw an error when the object is null or undefined
     */
    sendMessage(rpcObject: any): void;
    /** The callback function which will be called during message listening
     * @callback MessageCallback
     * @param {Object} object The rpc object that is sent from the webinspectord
     */
    /**
     * Listen to messages coming from webinspectord
     * @param {MessageCallback} onData
     */
    listenMessage(onData: (object: any) => any): void;
}
export const WEB_INSPECTOR_SERVICE_NAME: "com.apple.webinspector";
export function cleanupRpcObject(obj: any): any;
import { BaseServiceSocket } from '../base-service';
import PlistServiceDecoder from '../plist-service/transformer/plist-service-decoder';
import WebInspectorDecoder from './transformer/webinspector-decoder';
import LengthBasedSplitter from '../util/transformer/length-based-splitter';
import PlistServiceEncoder from '../plist-service/transformer/plist-service-encoder';
import WebInspectorEncoder from './transformer/webinspector-encoder';
//# sourceMappingURL=index.d.ts.map
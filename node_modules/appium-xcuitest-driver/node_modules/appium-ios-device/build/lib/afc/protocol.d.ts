export const MAGIC_NUMBER: Buffer;
export const AFC_PACKET_HEADER_SIZE: 40;
export namespace Operations {
    let INVALID: number;
    let STATUS: number;
    let DATA: number;
    let READ_DIR: number;
    let READ_FILE: number;
    let WRITE_FILE: number;
    let WRITE_PART: number;
    let TRUNCATE: number;
    let REMOVE_PATH: number;
    let MAKE_DIR: number;
    let GET_FILE_INFO: number;
    let GET_DEVINFO: number;
    let WRITE_FILE_ATOM: number;
    let FILE_OPEN: number;
    let FILE_OPEN_RES: number;
    let FILE_READ: number;
    let FILE_WRITE: number;
    let FILE_SEEK: number;
    let FILE_TELL: number;
    let FILE_TELL_RES: number;
    let FILE_CLOSE: number;
    let FILE_SET_SIZE: number;
    let GET_CON_INFO: number;
    let SET_CON_OPTIONS: number;
    let RENAME_PATH: number;
    let SET_FS_BS: number;
    let SET_SOCKET_BS: number;
    let FILE_LOCK: number;
    let MAKE_LINK: number;
    let GET_FILE_HASH: number;
    let SET_FILE_MOD_TIME: number;
    let GET_FILE_HASH_RANGE: number;
    let FILE_SET_IMMUTABLE_HINT: number;
    let GET_SIZE_OF_PATH_CONTENTS: number;
    let REMOVE_PATH_AND_CONTENTS: number;
    let DIR_OPEN: number;
    let DIR_OPEN_RESULT: number;
    let DIR_READ: number;
    let DIR_CLOSE: number;
    let FILE_READ_OFFSET: number;
    let FILE_WRITE_OFFSET: number;
}
export function operationCode(code: any): string;
export namespace Errors {
    let SUCCESS: number;
    let UNKNOWN: number;
    let INVALID_HEADER: number;
    let NO_RESOURCES: number;
    let READ: number;
    let WRITE: number;
    let UNKNOWN_PACKET_TYPE: number;
    let INVALID_ARGUMENT: number;
    let OBJECT_NOT_FOUND: number;
    let OBJECT_IS_DIRECTORY: number;
    let PERMISSION_DENIED: number;
    let NOT_CONNECTED: number;
    let TIMEOUT: number;
    let OVERRUN: number;
    let EOF: number;
    let UNSUPPORTED: number;
    let OBJECT_EXISTS: number;
    let OBJECT_BUSY: number;
    let ON_SPACE_LEFT: number;
    let WOULD_BLOCK: number;
    let IO: number;
    let INTERRUPTED: number;
    let IN_PROGRESS: number;
    let INTERNAL: number;
}
export function errorCode(code: any): string;
export const FileModes: {
    r: number;
    'r+': number;
    w: number;
    'w+': number;
    a: number;
    'a+': number;
};
//# sourceMappingURL=protocol.d.ts.map
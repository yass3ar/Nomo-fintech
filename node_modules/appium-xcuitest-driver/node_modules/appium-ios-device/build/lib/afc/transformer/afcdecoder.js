"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AfcDecoder = void 0;
const stream_1 = __importDefault(require("stream"));
const protocol_1 = require("../protocol");
class AfcDecoder extends stream_1.default.Transform {
    constructor() {
        super({ objectMode: true });
    }
    _transform(data, encoding, onData) {
        this._decode(data);
        onData();
    }
    _decode(data) {
        const magicNumber = data.slice(0, 8);
        if (magicNumber.compare(protocol_1.MAGIC_NUMBER) !== 0) {
            throw new Error(`Unexpected magic number: ${magicNumber}`);
        }
        const messageLength = this.readUInt64LE(data, 8);
        const thisLength = this.readUInt64LE(data, 16);
        const packetNumber = this.readUInt64LE(data, 24);
        const opCode = this.readUInt64LE(data, 32);
        const headerPayload = data.slice(protocol_1.AFC_PACKET_HEADER_SIZE, thisLength);
        const content = data.slice(thisLength, messageLength);
        this.push({ messageLength, packetNumber, opCode, headerPayload, content });
    }
    readUInt64LE(buffer, index) {
        // Ignore the first 4 bytes since we don't do anything with longs
        return buffer.readUInt32LE(index);
    }
}
exports.AfcDecoder = AfcDecoder;
exports.default = AfcDecoder;
//# sourceMappingURL=afcdecoder.js.map
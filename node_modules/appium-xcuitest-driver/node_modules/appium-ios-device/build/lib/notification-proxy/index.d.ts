export default NotificationProxyService;
export class NotificationProxyService extends BaseServiceSocket {
    constructor(socketClient: any);
    _decoder: PlistServiceDecoder;
    _splitter: LengthBasedSplitter;
    _encoder: PlistServiceEncoder;
    _listeners: {};
    _handleData(data: any): void;
    /**
     * The api to listen to notifications that the phone broadcasts
     * @param {string} notification The name of the notification which is desired to be observed
     * @param {Object} listener The listener object which will be invoked when there is a notification or if the proxy is dead
     */
    observeNotification(notification: string, listener: any): void;
    /**
     * The api to broadcast notifications to the phone. This allows the client to talk to the daemons or apps on the phone
     * @param {*} notification The name of the notification which is desired notified
     */
    postNotification(notification: any): void;
    /**
     * The api to shutdown the proxy. Consequently, all the notifications that are observing will recieve the proxyDeath response
     */
    shutdown(): void;
}
export const NOTIFICATION_PROXY_SERVICE_NAME: "com.apple.mobile.notification_proxy";
import { BaseServiceSocket } from '../base-service';
import PlistServiceDecoder from '../plist-service/transformer/plist-service-decoder';
import LengthBasedSplitter from '../util/transformer/length-based-splitter';
import PlistServiceEncoder from '../plist-service/transformer/plist-service-encoder';
//# sourceMappingURL=index.d.ts.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startSyslogService = startSyslogService;
exports.startWebInspectorService = startWebInspectorService;
exports.startInstallationProxyService = startInstallationProxyService;
exports.startSimulateLocationService = startSimulateLocationService;
exports.startAfcService = startAfcService;
exports.startCrashLogService = startCrashLogService;
exports.startNotificationProxyService = startNotificationProxyService;
exports.startHouseArrestService = startHouseArrestService;
exports.startInstrumentService = startInstrumentService;
exports.startTestmanagerdService = startTestmanagerdService;
exports.startMCInstallService = startMCInstallService;
exports.startImageMounterService = startImageMounterService;
const utilities_1 = require("./utilities");
const syslog_1 = require("./syslog");
const simulatelocation_1 = require("./simulatelocation");
const webinspector_1 = require("./webinspector");
const installation_proxy_1 = require("./installation-proxy");
const afc_1 = require("./afc");
const notification_proxy_1 = require("./notification-proxy");
const house_arrest_1 = require("./house-arrest");
const instrument_1 = require("./instrument");
const testmanagerd_1 = require("./testmanagerd");
const mcinstall_1 = require("./mcinstall");
const imagemounter_1 = require("./imagemounter");
const plist_service_1 = __importDefault(require("./plist-service"));
const semver_1 = __importDefault(require("semver"));
const CRASH_LOG_SERVICE_NAME = 'com.apple.crashreportcopymobile';
const INSTRUMENT_HANDSHAKE_VERSION = 14;
const TESTMANAGERD_HANDSHAKE_VERSION = 14;
async function startSyslogService(udid, opts = {}) {
    const socket = await startService(udid, syslog_1.SYSLOG_SERVICE_NAME, opts.socket);
    return new syslog_1.SyslogService(socket);
}
async function startSimulateLocationService(udid, opts = {}) {
    const socket = await startService(udid, simulatelocation_1.SIMULATE_LOCATION_SERVICE_NAME, opts.socket);
    return new simulatelocation_1.SimulateLocationService(socket);
}
async function startWebInspectorService(udid, opts = {}) {
    const osVersion = opts.osVersion || await (0, utilities_1.getOSVersion)(udid, opts.socket);
    const isSimulator = !!opts.isSimulator;
    const verbose = !!opts.verbose;
    const verboseHexDump = !!opts.verboseHexDump;
    const socketChunkSize = opts.socketChunkSize;
    const maxFrameLength = opts.maxFrameLength;
    const semverVersion = semver_1.default.coerce(osVersion);
    if (!semverVersion) {
        throw new Error(`Could not create a semver version out of '${osVersion}'`);
    }
    if (opts.socket) {
        return new webinspector_1.WebInspectorService({
            majorOsVersion: semverVersion.major,
            isSimulator,
            socketChunkSize,
            verbose,
            verboseHexDump,
            socketClient: opts.socket,
            maxFrameLength,
        });
    }
    const socket = await startService(udid, webinspector_1.WEB_INSPECTOR_SERVICE_NAME, undefined);
    return new webinspector_1.WebInspectorService({
        majorOsVersion: semverVersion.major,
        isSimulator,
        socketChunkSize,
        verbose,
        verboseHexDump,
        socketClient: socket,
        maxFrameLength,
    });
}
async function startInstallationProxyService(udid, opts = {}) {
    const socket = await startService(udid, installation_proxy_1.INSTALLATION_PROXY_SERVICE_NAME, opts.socket);
    return new installation_proxy_1.InstallationProxyService(new plist_service_1.default(socket));
}
async function startAfcService(udid, opts = {}) {
    const socket = await startService(udid, afc_1.AFC_SERVICE_NAME, opts.socket);
    return new afc_1.AfcService(socket);
}
async function startCrashLogService(udid, opts = {}) {
    const socket = await startService(udid, CRASH_LOG_SERVICE_NAME, opts.socket);
    return new afc_1.AfcService(socket);
}
async function startNotificationProxyService(udid, opts = {}) {
    const socket = await startService(udid, notification_proxy_1.NOTIFICATION_PROXY_SERVICE_NAME, opts.socket);
    return new notification_proxy_1.NotificationProxyService(socket);
}
async function startHouseArrestService(udid, opts = {}) {
    const socket = await startService(udid, house_arrest_1.HOUSE_ARREST_SERVICE_NAME, opts.socket);
    return new house_arrest_1.HouseArrestService(socket);
}
async function startInstrumentService(udid, opts = {}) {
    const osVersion = opts.osVersion || await (0, utilities_1.getOSVersion)(udid, opts.socket);
    return new instrument_1.InstrumentService(parseInt(osVersion.split('.')[0], 10) < INSTRUMENT_HANDSHAKE_VERSION
        ? await startService(udid, instrument_1.INSTRUMENT_SERVICE_NAME, opts.socket, true)
        : await startService(udid, instrument_1.INSTRUMENT_SERVICE_NAME_VERSION_14, opts.socket));
}
async function startTestmanagerdService(udid, opts = {}) {
    const osVersion = opts.osVersion || await (0, utilities_1.getOSVersion)(udid, opts.socket);
    return new testmanagerd_1.TestmanagerdService(parseInt(osVersion.split('.')[0], 10) < TESTMANAGERD_HANDSHAKE_VERSION
        ? await startService(udid, testmanagerd_1.TESTMANAGERD_SERVICE_NAME, opts.socket, true)
        : await startService(udid, testmanagerd_1.TESTMANAGERD_SERVICE_NAME_VERSION_14, opts.socket));
}
async function startMCInstallService(udid, opts = {}) {
    const socket = await startService(udid, mcinstall_1.MC_INSTALL_SERVICE_NAME, opts.socket);
    return new mcinstall_1.MCInstallProxyService(new plist_service_1.default(socket));
}
async function startImageMounterService(udid, opts = {}) {
    const socket = await startService(udid, imagemounter_1.MOBILE_IMAGE_MOUNTER_SERVICE_NAME, opts.socket, false);
    return new imagemounter_1.ImageMounter(new plist_service_1.default(socket));
}
async function startService(udid, serviceName, socket, handshakeOnly = false) {
    const lockdown = await (0, utilities_1.startLockdownSession)(udid, socket);
    try {
        const service = await lockdown.startService(serviceName);
        if (service.EnableServiceSSL) {
            return await (0, utilities_1.connectPortSSL)(udid, service.Port, socket, handshakeOnly);
        }
        else {
            return await (0, utilities_1.connectPort)(udid, service.Port, socket);
        }
    }
    finally {
        lockdown.close();
    }
}
//# sourceMappingURL=services.js.map
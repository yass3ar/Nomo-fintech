export default InstallationProxyService;
export class InstallationProxyService extends BaseServicePlist {
    /**
     * Install the application on the relative path on the phone
     * @param {string} path The path where the .app and .ipa is located at on the phone
     * @param {Object} clientOptions The extra options that wants to be passed to the installd
     * @param {number} timeout [60000] The timeout between messages received from the phone as status updates
     */
    installApplication(path: string, clientOptions?: any, timeout?: number): Promise<any[]>;
    /**
     * Upgrades the given application from the relative path on the phone.
     * It is required that a previous version of the same app is already installed in order
     * to call this API.
     *
     * @param {string} path The path where the .app and .ipa is located at on the phone
     * @param {Object} clientOptions The extra options that wants to be passed to the installd
     * @param {number} timeout [60000] The timeout between messages received from the phone as status updates
     */
    upgradeApplication(path: string, clientOptions?: any, timeout?: number): Promise<any[]>;
    /**
   * @typedef {Object} ListApplicationOptions
   *
   * @property {string} applicationType of the which group you want to list. These can be User, System or leave it empty for both
   * @property {Array} returnAttributes the fields which should be filtered and returned to the client. Leave this parameter empty if you don't want to filter
   */
    /**
     * Lists applications according to the opts and returns them as a map
     * @param {Partial<ListApplicationOptions>} opts the listing options that wants to be passed
     * @returns {Promise<Record<any, any>>} A map of the applications which the key is the bundleId
     */
    listApplications(opts?: Partial<{
        /**
         * of the which group you want to list. These can be User, System or leave it empty for both
         */
        applicationType: string;
        /**
         * the fields which should be filtered and returned to the client. Leave this parameter empty if you don't want to filter
         */
        returnAttributes: any[];
    }>): Promise<Record<any, any>>;
    /**
   * @typedef {Object} LookupApplicationOptions
   *
   * @property {string} applicationType of the which group you want to list. These can be User, System or leave it empty for both
   * @property {Array} returnAttributes the fields which should be filtered and returned to the client. Leave this parameter empty if you don't want to filter
   * @property {string|Array} bundleIds Bundle Ids of the apps that should be searched
   */
    /**
     * Lists applications according to the opts and returns them as a map
     * @param {Partial<LookupApplicationOptions>} opts the lookup options that wants to be passed
     * @returns {Promise<Record<any, any>>} A map of the applications which the key is the bundleId
     */
    lookupApplications(opts?: Partial<{
        /**
         * of the which group you want to list. These can be User, System or leave it empty for both
         */
        applicationType: string;
        /**
         * the fields which should be filtered and returned to the client. Leave this parameter empty if you don't want to filter
         */
        returnAttributes: any[];
        /**
         * Bundle Ids of the apps that should be searched
         */
        bundleIds: string | any[];
    }>): Promise<Record<any, any>>;
    /**
     * Uninstalls an application according to the given bundleId
     * @param {string} bundleId of the app that needs to be passed for uninstallation
     * @param {number} timeout The timeout between messages received from the phone as status updates
     */
    uninstallApplication(bundleId: string, timeout?: number): Promise<any[]>;
    _waitMessageCompletion(timeout: any): Promise<any[]>;
    _isFinished(response: any): boolean;
}
export const INSTALLATION_PROXY_SERVICE_NAME: "com.apple.mobile.installation_proxy";
import { BaseServicePlist } from '../base-service';
//# sourceMappingURL=index.d.ts.map
export default Lockdown;
export class Lockdown extends BaseServicePlist {
    /**
     * Makes a query type request to lockdown
     * @param {number} [timeout=5000] the timeout of receiving a response from lockdownd
     * @returns {Promise<any>}
     */
    queryType(timeout?: number | undefined): Promise<any>;
    /**
     * Starts a lockdown session which allows to use certain apis
     * @param {string} hostID the host id which can be retrieved from the pair record
     * @param {string} systemBUID the host BUID which can be retrieved from the pair record
     * @param {number} [timeout=5000] the timeout of receiving a response from lockdownd
     * @returns {Promise<any>}
     */
    startSession(hostID: string, systemBUID: string, timeout?: number | undefined): Promise<any>;
    /**
     * Enables ssl in the underlying socket socket connection
     * @param {Buffer} hostPrivateKey the private key which can be retrieved from the pair record
     * @param {Buffer} hostCertificate the certificate which can be retrieved from the pair record
     */
    enableSessionSSL(hostPrivateKey: Buffer, hostCertificate: Buffer): void;
    /**
    * @typedef {Object} Query
    *
    * @property {string} Key The key we want to access
    * @property {string} Domain The domain where we want to access
    */
    /**
     * Gets values from the device according to the query passed
     *
     * @param {Partial<Query>} query the query we want to send to lockdownd
     * @param {number} [timeout=5000] the timeout of receiving a response from lockdownd
     * @returns {Promise<any>} The actual response value. It should never be `null` or `undefined`
     * @throws {Error} If an unexpected response is received from lockdownd
     */
    getValue(query?: Partial<{
        /**
         * The key we want to access
         */
        Key: string;
        /**
         * The domain where we want to access
         */
        Domain: string;
    }>, timeout?: number | undefined): Promise<any>;
    /**
     * Starts a service on the phone corresponding to the name
     * @param {string} serviceName the name of the service which we want to start
     * @param {number} [timeout=5000] the timeout of receiving a response from lockdownd
     * @returns {Promise<any>}
     */
    startService(serviceName: string, timeout?: number | undefined): Promise<any>;
}
export const LOCKDOWN_PORT: 62078;
import { BaseServicePlist } from '../base-service';
//# sourceMappingURL=index.d.ts.map
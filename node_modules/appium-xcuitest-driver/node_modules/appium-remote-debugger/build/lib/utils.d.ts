/**
 * Takes a dictionary from the remote debugger and makes a more manageable
 * dictionary whose keys are understandable
 *
 * @param {Record<string, any>} dict
 * @returns {[string, import('./types').AppInfo]}
 */
export function appInfoFromDict(dict: Record<string, any>): [string, import("./types").AppInfo];
/**
 * Take a dictionary from the remote debugger and makes a more manageable
 * dictionary of pages available.
 *
 * @param {import('@appium/types').StringRecord} pageDict
 * @returns {import('./types').Page[]}
 */
export function pageArrayFromDict(pageDict: import("@appium/types").StringRecord): import("./types").Page[];
/**
 *
 * @param {string} bundleId
 * @param {import('./types').AppDict} appDict
 * @returns {string[]}
 */
export function appIdsForBundle(bundleId: string, appDict: import("./types").AppDict): string[];
/**
 * @param {import('@appium/types').StringRecord} params
 * @returns {void}
 */
export function checkParams(params: import("@appium/types").StringRecord): void;
/**
 * @param {any} value
 * @param {boolean} [multiline=false]
 * @returns {string}
 */
export function simpleStringify(value: any, multiline?: boolean | undefined): string;
/**
 * @returns {import('./types').DeferredPromise}
 */
export function deferredPromise(): import("./types").DeferredPromise;
/**
 *
 * @param {any} res
 * @returns {any}
 */
export function convertResult(res: any): any;
/**
 * @returns {import('@appium/types').StringRecord}
 */
export function getModuleProperties(): import("@appium/types").StringRecord;
export const WEB_CONTENT_BUNDLE_ID: "com.apple.WebKit.WebContent";
export const RESPONSE_LOG_LENGTH: 100;
/**
 * Calculates the path to the current module's root folder
 *
 * @returns {string} The full path to module root
 * @throws {Error} If the current module root folder cannot be determined
 */
export const getModuleRoot: (() => string) & _.MemoizedFunction;
import _ from 'lodash';
//# sourceMappingURL=utils.d.ts.map
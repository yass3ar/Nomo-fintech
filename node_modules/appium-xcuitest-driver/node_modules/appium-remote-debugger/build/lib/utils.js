"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getModuleRoot = exports.RESPONSE_LOG_LENGTH = exports.WEB_CONTENT_BUNDLE_ID = void 0;
exports.appInfoFromDict = appInfoFromDict;
exports.pageArrayFromDict = pageArrayFromDict;
exports.appIdsForBundle = appIdsForBundle;
exports.checkParams = checkParams;
exports.simpleStringify = simpleStringify;
exports.deferredPromise = deferredPromise;
exports.convertResult = convertResult;
exports.getModuleProperties = getModuleProperties;
const lodash_1 = __importDefault(require("lodash"));
const bluebird_1 = __importDefault(require("bluebird"));
const base_driver_1 = require("@appium/base-driver");
const support_1 = require("@appium/support");
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = __importDefault(require("node:path"));
const MODULE_NAME = 'appium-remote-debugger';
exports.WEB_CONTENT_BUNDLE_ID = 'com.apple.WebKit.WebContent';
const INACTIVE_APP_CODE = 0;
// values for the page `WIRTypeKey` entry
const ACCEPTED_PAGE_TYPES = [
    'WIRTypeWeb', // up to iOS 11.3
    'WIRTypeWebPage', // iOS 11.4
    'WIRTypePage', // iOS 11.4 webview
];
exports.RESPONSE_LOG_LENGTH = 100;
/**
 * Takes a dictionary from the remote debugger and makes a more manageable
 * dictionary whose keys are understandable
 *
 * @param {Record<string, any>} dict
 * @returns {[string, import('./types').AppInfo]}
 */
function appInfoFromDict(dict) {
    const id = dict.WIRApplicationIdentifierKey;
    const isProxy = lodash_1.default.isString(dict.WIRIsApplicationProxyKey)
        ? dict.WIRIsApplicationProxyKey.toLowerCase() === 'true'
        : dict.WIRIsApplicationProxyKey;
    // automation enabled can be either from the keys
    //   - WIRRemoteAutomationEnabledKey (boolean)
    //   - WIRAutomationAvailabilityKey (string or boolean)
    /** @type {boolean|string} */
    let isAutomationEnabled = !!dict.WIRRemoteAutomationEnabledKey;
    if (lodash_1.default.has(dict, 'WIRAutomationAvailabilityKey')) {
        if (lodash_1.default.isString(dict.WIRAutomationAvailabilityKey)) {
            isAutomationEnabled = dict.WIRAutomationAvailabilityKey === 'WIRAutomationAvailabilityUnknown'
                ? 'Unknown'
                : dict.WIRAutomationAvailabilityKey === 'WIRAutomationAvailabilityAvailable';
        }
        else {
            isAutomationEnabled = !!dict.WIRAutomationAvailabilityKey;
        }
    }
    /** @type {import('./types').AppInfo} */
    const entry = {
        id,
        isProxy,
        name: dict.WIRApplicationNameKey,
        bundleId: dict.WIRApplicationBundleIdentifierKey,
        hostId: dict.WIRHostApplicationIdentifierKey,
        isActive: dict.WIRIsApplicationActiveKey !== INACTIVE_APP_CODE,
        isAutomationEnabled,
    };
    return [id, entry];
}
/**
 * Take a dictionary from the remote debugger and makes a more manageable
 * dictionary of pages available.
 *
 * @param {import('@appium/types').StringRecord} pageDict
 * @returns {import('./types').Page[]}
 */
function pageArrayFromDict(pageDict) {
    return lodash_1.default.values(pageDict)
        // count only WIRTypeWeb pages and ignore all others (WIRTypeJavaScript etc)
        .filter((dict) => lodash_1.default.isUndefined(dict.WIRTypeKey) || ACCEPTED_PAGE_TYPES.includes(dict.WIRTypeKey))
        .map((dict) => ({
        id: dict.WIRPageIdentifierKey,
        title: dict.WIRTitleKey,
        url: dict.WIRURLKey,
        isKey: !lodash_1.default.isUndefined(dict.WIRConnectionIdentifierKey),
    }));
}
/**
 *
 * @param {string} bundleId
 * @param {import('./types').AppDict} appDict
 * @returns {string[]}
 */
function appIdsForBundle(bundleId, appDict) {
    /** @type {Set<string>} */
    const appIds = new Set();
    for (const [key, data] of lodash_1.default.toPairs(appDict)) {
        if (data.bundleId.endsWith(bundleId)) {
            appIds.add(key);
        }
    }
    // if nothing is found, try to get the generic app
    if (appIds.size === 0 && bundleId !== exports.WEB_CONTENT_BUNDLE_ID) {
        return appIdsForBundle(exports.WEB_CONTENT_BUNDLE_ID, appDict);
    }
    return Array.from(appIds);
}
/**
 * @param {import('@appium/types').StringRecord} params
 * @returns {void}
 */
function checkParams(params) {
    // check if all parameters have a value
    const errors = lodash_1.default.toPairs(params)
        .filter(([, value]) => lodash_1.default.isNil(value))
        .map(([param]) => param);
    if (errors.length) {
        throw new Error(`Missing ${support_1.util.pluralize('parameter', errors.length)}: ${errors.join(', ')}`);
    }
}
/**
 * @param {any} value
 * @param {boolean} [multiline=false]
 * @returns {string}
 */
function simpleStringify(value, multiline = false) {
    if (!value) {
        return JSON.stringify(value);
    }
    // we get back objects sometimes with string versions of functions
    // which muddy the logs
    let cleanValue = lodash_1.default.clone(value);
    for (const property of ['ceil', 'clone', 'floor', 'round', 'scale', 'toString']) {
        delete cleanValue[property];
    }
    return multiline ? JSON.stringify(cleanValue, null, 2) : JSON.stringify(cleanValue);
}
/**
 * @returns {import('./types').DeferredPromise}
 */
function deferredPromise() {
    // http://bluebirdjs.com/docs/api/deferred-migration.html
    /** @type {(...args: any[]) => void}  */
    let resolve;
    /** @type {(err?: Error) => void} */
    let reject;
    const promise = new bluebird_1.default((res, rej) => {
        resolve = res;
        reject = rej;
    });
    return {
        promise,
        // @ts-ignore It will be assigned eventually
        resolve,
        // @ts-ignore It will be assigned eventually
        reject
    };
}
/**
 *
 * @param {any} res
 * @returns {any}
 */
function convertResult(res) {
    if (lodash_1.default.isUndefined(res)) {
        throw new Error(`Did not get OK result from remote debugger. Result was: ${lodash_1.default.truncate(simpleStringify(res), { length: exports.RESPONSE_LOG_LENGTH })}`);
    }
    else if (lodash_1.default.isString(res)) {
        try {
            res = JSON.parse(res);
        }
        catch (err) {
            // we might get a serialized object, but we might not
            // if we get here, it is just a value
        }
    }
    else if (!lodash_1.default.isObject(res)) {
        throw new Error(`Result has unexpected type: (${typeof res}).`);
    }
    if (res.status && res.status !== 0) {
        // we got some form of error.
        throw (0, base_driver_1.errorFromMJSONWPStatusCode)(res.status, res.value.message || res.value);
    }
    // with either have an object with a `value` property (even if `null`),
    // or a plain object
    const value = lodash_1.default.has(res, 'value') ? res.value : res;
    // get rid of noisy functions on objects
    if (lodash_1.default.isObject(value)) {
        for (const property of ['ceil', 'clone', 'floor', 'round', 'scale', 'toString']) {
            delete value[property];
        }
    }
    return value;
}
/**
 * Calculates the path to the current module's root folder
 *
 * @returns {string} The full path to module root
 * @throws {Error} If the current module root folder cannot be determined
 */
exports.getModuleRoot = lodash_1.default.memoize(function getModuleRoot() {
    const root = support_1.node.getModuleRootSync(MODULE_NAME, __filename);
    if (!root) {
        throw new Error(`Cannot find the root folder of the ${MODULE_NAME} Node.js module`);
    }
    return root;
});
/**
 * @returns {import('@appium/types').StringRecord}
 */
function getModuleProperties() {
    const fullPath = node_path_1.default.resolve((0, exports.getModuleRoot)(), 'package.json');
    return JSON.parse(node_fs_1.default.readFileSync(fullPath, 'utf8'));
}
//# sourceMappingURL=utils.js.map
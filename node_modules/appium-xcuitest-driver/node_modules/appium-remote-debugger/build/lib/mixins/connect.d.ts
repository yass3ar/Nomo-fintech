/**
 *
 * @this {RemoteDebugger}
 * @returns {Promise<void>}
 */
export function setConnectionKey(this: import("../remote-debugger").RemoteDebugger): Promise<void>;
/**
 *
 * @this {RemoteDebugger}
 * @param {number} [timeout=APP_CONNECT_TIMEOUT_MS]
 * @returns {Promise<import('../types').AppDict>}
 */
export function connect(this: import("../remote-debugger").RemoteDebugger, timeout?: number | undefined): Promise<import("../types").AppDict>;
/**
 *
 * @this {RemoteDebugger}
 * @returns {Promise<void>}
 */
export function disconnect(this: import("../remote-debugger").RemoteDebugger): Promise<void>;
/**
 *
 * @this {RemoteDebugger}
 * @param {string?} [currentUrl=null]
 * @param {number} [maxTries=SELECT_APP_RETRIES]
 * @param {boolean} [ignoreAboutBlankUrl=false]
 * @returns {Promise<import('../types').Page[]>}
 */
export function selectApp(this: import("../remote-debugger").RemoteDebugger, currentUrl?: string | null | undefined, maxTries?: number | undefined, ignoreAboutBlankUrl?: boolean | undefined): Promise<import("../types").Page[]>;
/**
 *
 * @this {RemoteDebugger}
 * @param {string|number} appIdKey
 * @param {string|number} pageIdKey
 * @param {boolean} [skipReadyCheck]
 * @returns {Promise<void>}
 */
export function selectPage(this: import("../remote-debugger").RemoteDebugger, appIdKey: string | number, pageIdKey: string | number, skipReadyCheck?: boolean | undefined): Promise<void>;
/**
 * Find app keys based on assigned bundleIds from appDict
 * When bundleIds includes a wildcard ('*'), returns all appKeys in appDict.
 *
 * @this {RemoteDebugger}
 * @param {string[]} bundleIds
 * @returns {string[]}
 */
export function getPossibleDebuggerAppKeys(this: import("../remote-debugger").RemoteDebugger, bundleIds: string[]): string[];
export type RemoteDebugger = import("../remote-debugger").RemoteDebugger;
//# sourceMappingURL=connect.d.ts.map
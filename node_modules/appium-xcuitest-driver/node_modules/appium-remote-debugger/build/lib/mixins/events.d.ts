/**
 * Keep track of the client event listeners so they can be removed
 *
 * @this {RemoteDebugger}
 * @param {string} eventName
 * @param {import('../types').EventListener} listener
 * @returns {void}
 */
export function addClientEventListener(this: import("../remote-debugger").RemoteDebugger, eventName: string, listener: import("../types").EventListener): void;
/**
 * @this {RemoteDebugger}
 * @param {string} eventName
 * @returns {void}
 */
export function removeClientEventListener(this: import("../remote-debugger").RemoteDebugger, eventName: string): void;
/**
 * @this {RemoteDebugger}
 * @param {import('../types').EventListener} listener
 * @returns {void}
 */
export function startConsole(this: import("../remote-debugger").RemoteDebugger, listener: import("../types").EventListener): void;
/**
 * @this {RemoteDebugger}
 * @returns {void}
 */
export function stopConsole(this: import("../remote-debugger").RemoteDebugger): void;
/**
 * @this {RemoteDebugger}
 * @param {import('../types').EventListener} listener
 * @returns {void}
 */
export function startNetwork(this: import("../remote-debugger").RemoteDebugger, listener: import("../types").EventListener): void;
/**
 * @this {RemoteDebugger}
 * @returns {void}
 */
export function stopNetwork(this: import("../remote-debugger").RemoteDebugger): void;
export namespace events {
    let EVENT_PAGE_CHANGE: "remote_debugger_page_change";
    let EVENT_FRAMES_DETACHED: "remote_debugger_frames_detached";
    let EVENT_DISCONNECT: "remote_debugger_disconnect";
}
export default events;
export type RemoteDebugger = import("../remote-debugger").RemoteDebugger;
//# sourceMappingURL=events.d.ts.map
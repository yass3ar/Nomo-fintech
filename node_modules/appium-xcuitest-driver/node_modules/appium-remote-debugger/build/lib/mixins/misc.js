"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.launchSafari = launchSafari;
exports.startTimeline = startTimeline;
exports.stopTimeline = stopTimeline;
exports.overrideUserAgent = overrideUserAgent;
exports.garbageCollect = garbageCollect;
const utils_1 = require("../utils");
const bluebird_1 = __importDefault(require("bluebird"));
const property_accessors_1 = require("./property-accessors");
const SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';
const GARBAGE_COLLECT_TIMEOUT_MS = 5000;
/**
 * @this {RemoteDebugger}
 * @returns {Promise<void>}
 */
async function launchSafari() {
    await this.requireRpcClient().send('launchApplication', {
        bundleId: SAFARI_BUNDLE_ID
    });
}
/**
 * @this {RemoteDebugger}
 * @param {import('../types').EventListener} fn
 * @returns {Promise<any>}
 */
async function startTimeline(fn) {
    this.log.debug('Starting to record the timeline');
    this.requireRpcClient().on('Timeline.eventRecorded', fn);
    return await this.requireRpcClient().send('Timeline.start', {
        appIdKey: (0, property_accessors_1.getAppIdKey)(this),
        pageIdKey: (0, property_accessors_1.getPageIdKey)(this),
    });
}
/**
 * @this {RemoteDebugger}
 * @returns {Promise<any>}
 */
async function stopTimeline() {
    this.log.debug('Stopping to record the timeline');
    await this.requireRpcClient().send('Timeline.stop', {
        appIdKey: (0, property_accessors_1.getAppIdKey)(this),
        pageIdKey: (0, property_accessors_1.getPageIdKey)(this),
    });
}
// Potentially this does not work for mobile safari
/**
 * @this {RemoteDebugger}
 * @param {string} value
 * @returns {Promise<any>}
 */
async function overrideUserAgent(value) {
    this.log.debug('Setting overrideUserAgent');
    return await this.requireRpcClient().send('Page.overrideUserAgent', {
        appIdKey: (0, property_accessors_1.getAppIdKey)(this),
        pageIdKey: (0, property_accessors_1.getPageIdKey)(this),
        value,
    });
}
/**
 * @this {RemoteDebugger}
 * @param {number} [timeoutMs=GARBAGE_COLLECT_TIMEOUT_MS]
 * @returns {Promise<void>}
 */
async function garbageCollect(timeoutMs = GARBAGE_COLLECT_TIMEOUT_MS) {
    this.log.debug(`Garbage collecting with ${timeoutMs}ms timeout`);
    try {
        (0, utils_1.checkParams)({
            appIdKey: (0, property_accessors_1.getAppIdKey)(this),
            pageIdKey: (0, property_accessors_1.getPageIdKey)(this),
        });
    }
    catch (err) {
        this.log.debug(`Unable to collect garbage at this time`);
        return;
    }
    try {
        await bluebird_1.default.resolve(this.requireRpcClient().send('Heap.gc', {
            appIdKey: (0, property_accessors_1.getAppIdKey)(this),
            pageIdKey: (0, property_accessors_1.getPageIdKey)(this),
        })).timeout(timeoutMs);
        this.log.debug(`Garbage collection successful`);
    }
    catch (e) {
        if (e instanceof bluebird_1.default.TimeoutError) {
            this.log.debug(`Garbage collection timed out after ${timeoutMs}ms`);
        }
        else {
            this.log.debug(`Unable to collect garbage: ${e.message}`);
        }
    }
}
/**
 * @typedef {import('../remote-debugger').RemoteDebugger} RemoteDebugger
 */
//# sourceMappingURL=misc.js.map
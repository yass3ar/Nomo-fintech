"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.events = void 0;
exports.addClientEventListener = addClientEventListener;
exports.removeClientEventListener = removeClientEventListener;
exports.startConsole = startConsole;
exports.stopConsole = stopConsole;
exports.startNetwork = startNetwork;
exports.stopNetwork = stopNetwork;
const property_accessors_1 = require("./property-accessors");
// event emitted publically
exports.events = ({
    EVENT_PAGE_CHANGE: 'remote_debugger_page_change',
    EVENT_FRAMES_DETACHED: 'remote_debugger_frames_detached',
    EVENT_DISCONNECT: 'remote_debugger_disconnect',
});
/**
 * Keep track of the client event listeners so they can be removed
 *
 * @this {RemoteDebugger}
 * @param {string} eventName
 * @param {import('../types').EventListener} listener
 * @returns {void}
 */
function addClientEventListener(eventName, listener) {
    var _a;
    (_a = (0, property_accessors_1.getClientEventListeners)(this))[eventName] ?? (_a[eventName] = []);
    (0, property_accessors_1.getClientEventListeners)(this)[eventName].push(listener);
    this.requireRpcClient().on(eventName, listener);
}
/**
 * @this {RemoteDebugger}
 * @param {string} eventName
 * @returns {void}
 */
function removeClientEventListener(eventName) {
    for (const listener of ((0, property_accessors_1.getClientEventListeners)(this)[eventName] || [])) {
        this.requireRpcClient().off(eventName, listener);
    }
}
/**
 * @this {RemoteDebugger}
 * @param {import('../types').EventListener} listener
 * @returns {void}
 */
function startConsole(listener) {
    this.log.debug('Starting to listen for JavaScript console');
    this.addClientEventListener('Console.messageAdded', listener);
    this.addClientEventListener('Console.messageRepeatCountUpdated', listener);
}
/**
 * @this {RemoteDebugger}
 * @returns {void}
 */
function stopConsole() {
    this.log.debug('Stopping to listen for JavaScript console');
    this.removeClientEventListener('Console.messageAdded');
    this.removeClientEventListener('Console.messageRepeatCountUpdated');
}
/**
 * @this {RemoteDebugger}
 * @param {import('../types').EventListener} listener
 * @returns {void}
 */
function startNetwork(listener) {
    this.log.debug('Starting to listen for network events');
    this.addClientEventListener('NetworkEvent', listener);
}
/**
 * @this {RemoteDebugger}
 * @returns {void}
 */
function stopNetwork() {
    this.log.debug('Stopping to listen for network events');
    this.removeClientEventListener('NetworkEvent');
}
exports.default = exports.events;
/**
 * @typedef {import('../remote-debugger').RemoteDebugger} RemoteDebugger
 */
//# sourceMappingURL=events.js.map
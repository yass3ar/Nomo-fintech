/**
 * @this {RemoteDebugger}
 * @param {Error?} err
 * @param {string} appIdKey
 * @param {Record<string, any>} pageDict
 * @returns {Promise<void>}
 */
export function onPageChange(this: import("../remote-debugger").RemoteDebugger, err: Error | null, appIdKey: string, pageDict: Record<string, any>): Promise<void>;
/**
 * @this {RemoteDebugger}
 * @param {Error?} err
 * @param {Record<string, any>} dict
 * @returns {Promise<void>}
 */
export function onAppConnect(this: import("../remote-debugger").RemoteDebugger, err: Error | null, dict: Record<string, any>): Promise<void>;
/**
 * @this {RemoteDebugger}
 * @param {Error?} err
 * @param {import('@appium/types').StringRecord} dict
 * @returns {void}
 */
export function onAppDisconnect(this: import("../remote-debugger").RemoteDebugger, err: Error | null, dict: import("@appium/types").StringRecord): void;
/**
 * @this {RemoteDebugger}
 * @param {Error?} err
 * @param {Record<string, any>} dict
 * @returns {Promise<void>}
 */
export function onAppUpdate(this: import("../remote-debugger").RemoteDebugger, err: Error | null, dict: Record<string, any>): Promise<void>;
/**
 * @this {RemoteDebugger}
 * @param {Error?} err
 * @param {Record<string, any>} drivers
 * @returns {void}
 */
export function onConnectedDriverList(this: import("../remote-debugger").RemoteDebugger, err: Error | null, drivers: Record<string, any>): void;
/**
 * @this {RemoteDebugger}
 * @param {Error?} err
 * @param {Record<string, any>} state
 * @returns {void}
 */
export function onCurrentState(this: import("../remote-debugger").RemoteDebugger, err: Error | null, state: Record<string, any>): void;
/**
 * @this {RemoteDebugger}
 * @param {Error?} err
 * @param {Record<string, any>} apps
 * @returns {Promise<void>}
 */
export function onConnectedApplicationList(this: import("../remote-debugger").RemoteDebugger, err: Error | null, apps: Record<string, any>): Promise<void>;
/**
 * Given a bundle id, finds the correct remote debugger app that is
 * connected.
 *
 * @this {RemoteDebugger}
 * @param {string} bundleId
 * @returns {string|undefined}
 */
export function getDebuggerAppKey(this: import("../remote-debugger").RemoteDebugger, bundleId: string): string | undefined;
export type RemoteDebugger = import("../remote-debugger").RemoteDebugger;
//# sourceMappingURL=message-handlers.d.ts.map
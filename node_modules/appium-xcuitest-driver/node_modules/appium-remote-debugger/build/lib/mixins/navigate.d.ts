/**
 * @this {RemoteDebugger}
 * @returns {void}
 */
export function frameDetached(this: import("../remote-debugger").RemoteDebugger): void;
/**
 * @this {RemoteDebugger}
 * @returns {void}
 */
export function cancelPageLoad(this: import("../remote-debugger").RemoteDebugger): void;
/**
 * Return if current readState can be handles as page load completes
 * for the given page load strategy.
 *
 * @this {RemoteDebugger}
 * @param {string} readyState
 * @returns {boolean}
 */
export function isPageLoadingCompleted(this: import("../remote-debugger").RemoteDebugger, readyState: string): boolean;
/**
 * @this {RemoteDebugger}
 * @param {timing.Timer?} [startPageLoadTimer]
 * @returns {Promise<void>}
 */
export function waitForDom(this: import("../remote-debugger").RemoteDebugger, startPageLoadTimer?: timing.Timer | null | undefined): Promise<void>;
/**
 * @this {RemoteDebugger}
 * @param {number} [timeoutMs]
 * @returns {Promise<boolean>}
 */
export function checkPageIsReady(this: import("../remote-debugger").RemoteDebugger, timeoutMs?: number | undefined): Promise<boolean>;
/**
 * @this {RemoteDebugger}
 * @param {string} url
 * @returns {Promise<void>}
 */
export function navToUrl(this: import("../remote-debugger").RemoteDebugger, url: string): Promise<void>;
export const DEFAULT_PAGE_READINESS_TIMEOUT_MS: number;
export type RemoteDebugger = import("../remote-debugger").RemoteDebugger;
import { timing } from '@appium/support';
//# sourceMappingURL=navigate.d.ts.map
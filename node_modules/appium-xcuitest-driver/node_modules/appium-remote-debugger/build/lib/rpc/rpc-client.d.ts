export class RpcClient {
    /**
     *
     * @param {RpcClientOptions} [opts={}]
     */
    constructor(opts?: RpcClientOptions | undefined);
    /** @type {RpcMessageHandler|undefined} */
    messageHandler: RpcMessageHandler | undefined;
    /** @type {RemoteMessages|undefined} */
    remoteMessages: RemoteMessages | undefined;
    /** @type {boolean} */
    connected: boolean;
    /** @type {boolean} */
    isSafari: boolean;
    /** @type {string} */
    connId: string;
    /** @type {string} */
    senderId: string;
    /** @type {number} */
    msgId: number;
    /** @type {string|undefined} */
    udid: string | undefined;
    /** @type {boolean|undefined} */
    logAllCommunication: boolean | undefined;
    /** @type {boolean|undefined} */
    logAllCommunicationHexDump: boolean | undefined;
    /** @type {number|undefined} */
    socketChunkSize: number | undefined;
    /** @type {number|undefined} */
    webInspectorMaxFrameLength: number | undefined;
    /** @type {boolean|undefined} */
    fullPageInitialization: boolean | undefined;
    /** @type {string|undefined} */
    bundleId: string | undefined;
    /** @type {string} */
    platformVersion: string;
    /** @type {string[]} */
    _contexts: string[];
    /** @type {import('@appium/types').StringRecord} */
    _targets: import("@appium/types").StringRecord;
    /** @type {EventEmitter} */
    _targetSubscriptions: EventEmitter;
    /** @type {boolean} */
    _shouldCheckForTarget: boolean;
    /**
     * @param {boolean} connected
     */
    set isConnected(connected: boolean);
    /**
     * @returns {boolean}
     */
    get isConnected(): boolean;
    /**
     * @param {boolean} isTargetBased
     */
    set isTargetBased(isTargetBased: boolean);
    /**
     * @returns {boolean}
     */
    get isTargetBased(): boolean;
    /**
     * @returns {string[]}
     */
    get contexts(): string[];
    /**
     * @returns {boolean}
     */
    get needsTarget(): boolean;
    /**
     * @returns {import('@appium/types').StringRecord}
     */
    get targets(): import("@appium/types").StringRecord<any>;
    set shouldCheckForTarget(shouldCheckForTarget: boolean);
    /**
     * @returns {boolean}
     */
    get shouldCheckForTarget(): boolean;
    /**
     * @returns {EventEmitter}
     */
    get targetSubscriptions(): EventEmitter<[never]>;
    /**
     *
     * @param {string} event
     * @param {Function} listener
     * @returns {this}
     */
    on(event: string, listener: Function): this;
    /**
     *
     * @param {string} event
     * @param {Function} listener
     * @returns {this}
     */
    once(event: string, listener: Function): this;
    /**
     * @param {string} event
     * @param {Function} listener
     * @returns {this}
     */
    off(event: string, listener: Function): this;
    _isTargetBased: boolean | undefined;
    /**
     *
     * @param {string} appIdKey
     * @param {string|number} pageIdKey
     * @param {boolean} [force]
     * @returns {Promise<void>}
     */
    waitForTarget(appIdKey: string, pageIdKey: string | number, force?: boolean | undefined): Promise<void>;
    /**
     *
     * @param {string} command
     * @param {Record<string, any>} [opts]
     * @param {boolean} [waitForResponse]
     * @returns {Promise<any>}
     */
    send(command: string, opts?: Record<string, any> | undefined, waitForResponse?: boolean | undefined): Promise<any>;
    /**
     *
     * @param {string} command
     * @param {Record<string, any>} opts
     * @param {boolean} [waitForResponse]
     * @returns {Promise<any>}
     */
    sendToDevice(command: string, opts?: Record<string, any>, waitForResponse?: boolean | undefined): Promise<any>;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    /**
     * @param {string} command
     * @returns {Promise<void>}
     */
    sendMessage(command: string): Promise<void>;
    /**
     * @param {any} data
     * @returns {Promise<void>}
     */
    receive(data: any): Promise<void>;
    /**
     *
     * @param {Error?} err
     * @param {string} app
     * @param {Record<string, any>} targetInfo
     * @returns {void}
     */
    addTarget(err: Error | null, app: string, targetInfo: Record<string, any>): void;
    /**
     *
     * @param {Error?} err
     * @param {string} app
     * @param {string} oldTargetId
     * @param {string} newTargetId
     * @returns {void}
     */
    updateTarget(err: Error | null, app: string, oldTargetId: string, newTargetId: string): void;
    /**
     *
     * @param {Error?} err
     * @param {string} app
     * @param {Record<string, any>} targetInfo
     * @returns {void}
     */
    removeTarget(err: Error | null, app: string, targetInfo: Record<string, any>): void;
    /**
     * @param {string} appIdKey
     * @param {string|number} pageIdKey
     * @returns {any}
     */
    getTarget(appIdKey: string, pageIdKey: string | number): any;
    /**
     * @param {string} appIdKey
     * @param {string|number} pageIdKey
     * @returns {Promise<void>}
     */
    selectPage(appIdKey: string, pageIdKey: string | number): Promise<void>;
    /** @type {[string, string|number]} */
    pendingTargetNotification: [string, string | number] | undefined;
    /**
     * Perform the minimal initialization to get the Web Inspector working
     * @param {string} appIdKey
     * @param {string|number} pageIdKey
     * @returns {Promise<void>}
     */
    initializePage(appIdKey: string, pageIdKey: string | number): Promise<void>;
    /**
     * Mimic every step that Desktop Safari Develop tools uses to initialize a
     * Web Inspector session
     *
     * @param {string} appIdKey
     * @param {string|number} pageIdKey
     * @returns {Promise<void>}
     */
    initializePageFull(appIdKey: string, pageIdKey: string | number): Promise<void>;
    /**
     *
     * @param {string} appIdKey
     * @returns {Promise<[string, Record<string, any>]>}
     */
    selectApp(appIdKey: string): Promise<[string, Record<string, any>]>;
    /**
     *
     * @param {Error?} err
     * @param {Record<string, any>} context
     */
    onExecutionContextCreated(err: Error | null, context: Record<string, any>): void;
    /**
     * @returns {void}
     */
    onGarbageCollected(): void;
    /**
     *
     * @param {Error?} err
     * @param {Record<string, any>} scriptInfo
     */
    onScriptParsed(err: Error | null, scriptInfo: Record<string, any>): void;
}
export default RpcClient;
export type RpcClientOptions = {
    bundleId?: string | undefined;
    platformVersion?: string | undefined;
    isSafari?: boolean | undefined;
    logAllCommunication?: boolean | undefined;
    logAllCommunicationHexDump?: boolean | undefined;
    webInspectorMaxFrameLength?: number | undefined;
    socketChunkSize?: number | undefined;
    fullPageInitialization?: boolean | undefined;
    udid?: string | undefined;
    shouldCheckForTarget?: boolean | undefined;
};
import RpcMessageHandler from './rpc-message-handler';
import RemoteMessages from './remote-messages';
import { EventEmitter } from 'node:events';
//# sourceMappingURL=rpc-client.d.ts.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SIM_RUNTIME_NAME = exports.DEFAULT_EXEC_TIMEOUT = void 0;
exports.normalizeVersion = normalizeVersion;
exports.getXcrunBinary = getXcrunBinary;
const semver_1 = __importDefault(require("semver"));
exports.DEFAULT_EXEC_TIMEOUT = 10 * 60 * 1000; // ms
exports.SIM_RUNTIME_NAME = 'com.apple.CoreSimulator.SimRuntime.';
/**
 * "Normalize" the version, since iOS uses 'major.minor' but the runtimes can
 * be 'major.minor.patch'
 *
 * @param {string} version - the string version
 * @return {string} The version in 'major.minor' form
 * @throws {Error} If the version not parseable by the `semver` package
 */
function normalizeVersion(version) {
    const semverVersion = semver_1.default.coerce(version);
    if (!semverVersion) {
        throw new Error(`Unable to parse version '${version}'`);
    }
    return `${semverVersion.major}.${semverVersion.minor}`;
}
/**
 * @returns {string}
 */
function getXcrunBinary() {
    return process.env.XCRUN_BINARY || 'xcrun';
}
//# sourceMappingURL=helpers.js.map
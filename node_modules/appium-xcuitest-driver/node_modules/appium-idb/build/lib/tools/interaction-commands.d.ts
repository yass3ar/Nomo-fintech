export default interactionCommands;
export type KeycodeOpts = {
    /**
     * - The key press duration in float seconds.
     * The option is ignored if multiple key codes are set.
     */
    duration?: string | number | undefined;
};
declare namespace interactionCommands {
    /**
     * Taps at given coordinates
     *
     * @this {import('../idb.js').IDB}
     * @param {number|string} x Tap X coordinate
     * @param {number|string} y Tap Y coordinate
     */
    function tap(this: import("../idb.js").default, x: number | string, y: number | string): Promise<void>;
    /**
     * Presses a hardware button on device under test
     *
     * @this {import('../idb.js').IDB}
     * @param {string} name One of {APPLE_PAY,HOME,LOCK,SIDE_BUTTON,SIRI}
     */
    function pressButton(this: import("../idb.js").default, name: string): Promise<void>;
    /**
     * Types the given text on the device under test
     *
     * @this {import('../idb.js').IDB}
     * @param {string} text The text to type
     */
    function typeText(this: import("../idb.js").default, text: string): Promise<void>;
    /**
     * @typedef {Object} KeycodeOpts
     *
     * @property {number|string} [duration] - The key press duration in float seconds.
     * The option is ignored if multiple key codes are set.
     */
    /**
     * Send a keycode or key codes sequence to the device under test
     *
     * @this {import('../idb.js').IDB}
     * @param {number|string|string[]|number[]} codeOrCodes Single key code
     * or array of codes
     * @param {KeycodeOpts} opts
     */
    function pressKeycode(this: import("../idb.js").default, codeOrCodes: number | string | string[] | number[], opts?: KeycodeOpts): Promise<void>;
}
//# sourceMappingURL=interaction-commands.d.ts.map
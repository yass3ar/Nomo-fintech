export default appCommands;
export type LaunchOptions = {
    /**
     * - If set to true then
     * the method call will put the given app in foreground if it is
     * already running
     */
    foregroundIfRunning?: boolean | undefined;
    /**
     * - Set it to true if process
     * monitoring is needed. See the description of the returned result
     * for more details
     */
    wait?: boolean | undefined;
};
declare namespace appCommands {
    /**
     * Lists the targets installed applications and their metadata.
     * Example output:
     * {"bundle_id": "com.apple.test.IntegrationTests_1-Runner", "name": "IntegrationTests_1-Runner", "install_type": "user", "architectures": ["x86_64", "i386"], "process_state": "Unknown", "debuggable": false}
     * {"bundle_id": "com.apple.mobilesafari", "name": "MobileSafari", "install_type": "system", "architectures": ["x86_64"], "process_state": "Unknown", "debuggable": false}
     *
     * @returns {Promise<any[]>}
     */
    function listApps(): Promise<any[]>;
    /**
     * Installs the given application to the device under test.
     *
     * @param {string} appPath Full path to the .app or .ipa
     */
    function installApp(appPath: string): Promise<void>;
    /**
     * @typedef {Object} LaunchOptions
     *
     * @property {boolean} [foregroundIfRunning=true] - If set to true then
     * the method call will put the given app in foreground if it is
     * already running
     * @property {boolean} [wait=false] - Set it to true if process
     * monitoring is needed. See the description of the returned result
     * for more details
     */
    /**
     * Starts an installed app on the device under test.
     *
     * @param {string} bundleId Bundle identifier of the application to launch.
     * @param {LaunchOptions} opts
     * @returns {Promise<import('teen_process').SubProcess?>} If `opts.wait` is set to true then SubProcess instance
     * is returned, which represents the executed process monitor. The monitor
     * will be terminated when the launched is closed. stdout and stderr of the
     * remote process will also be forwarded. `null` is returned otherwise.
     */
    function launchApp(bundleId: string, opts?: LaunchOptions): Promise<import("teen_process").SubProcess | null>;
    /**
     * Kills an app with the given bundle ID
     *
     * @param {string} bundleId Bundle identifier of the application to terminate
     */
    function terminateApp(bundleId: string): Promise<void>;
    /**
     * Uninstalls an app with the given bundle ID
     *
     * @param {string} bundleId Bundle identifier of the application to uninstall
     */
    function uninstallApp(bundleId: string): Promise<void>;
}
//# sourceMappingURL=app-commands.d.ts.map
export default systemCallMethods;
export type ConnectOptions = {
    /**
     * - The number of milliseconds to wait
     * until the device under tests is online. No wait is going to be performed
     * if the timeout is not set. It is recommended to provide this value if
     * `connect` is called right after device is booted, so not all the required
     * device services have been started yet.
     */
    onlineTimeout?: number | undefined;
};
declare namespace systemCallMethods {
    /**
     * @typedef {Object} ConnectOptions
     *
     * @property {number} [onlineTimeout] - The number of milliseconds to wait
     * until the device under tests is online. No wait is going to be performed
     * if the timeout is not set. It is recommended to provide this value if
     * `connect` is called right after device is booted, so not all the required
     * device services have been started yet.
     */
    /**
     * Initializes idb and companion processes if necessary and
     * assigns path properties. It is mandatory to call this method before
     * one can start using IDB instance,
     *
     * @this {import('../idb.js').IDB}
     * @param {ConnectOptions} opts
     * @throws {Error} If mandatory idb executables are not present on the
     * localhost or there was a failure while starting/detecting them
     */
    function connect(this: import("../idb.js").default, opts?: ConnectOptions): Promise<void>;
    /**
     * Blocks until the device under test starts responding to idb commands.
     * The device must be booted/online and idb must be already connected for that to happen
     *
     * @this {import('../idb.js').IDB}
     * @param {number} [timeoutMs=10000] - The number of milliseconds to wait
     * until the device under tests is online. The method will return immediately
     * if the timeout is falsy
     * @throws {Error} if the device is not responding within the given timeout
     */
    function waitForDevice(this: import("../idb.js").default, timeoutMs?: number | undefined): Promise<void>;
    /**
     * Performs cleanup of obsolete companion processes
     * The daemon process is left untouched, because killing it might
     * potentially affect other parallel sessions. Nothing
     * is done if no obsolete processes are found.
     *
     * @this {import('../idb.js').IDB}
     */
    function disconnect(this: import("../idb.js").default): Promise<void>;
    /**
     * Execute the given idb command.
     *
     * @this {import('../idb.js').IDB}
     * @param {string[]} cmd - The actual idb command without arguments/params.
     * @param {string[]} [args=[]] - Optional command arguments.
     * @param {import('teen_process').TeenProcessExecOptions & {timeoutCapName?: string}} [opts={}] -
     * Additional options mapping
     * @return {Promise<string>} - Command's stdout.
     * @throws {Error} If the command returned non-zero exit code.
     */
    function exec(this: import("../idb.js").default, cmd: string[], args?: string[] | undefined, opts?: (import("teen_process").TeenProcessExecOptions & {
        timeoutCapName?: string;
    }) | undefined): Promise<string>;
    /**
     * Creates SubProcess instance of idb for background
     * execution.
     *
     * @this {import('../idb.js').IDB}
     * @param {string[]} [command=[]] desired idb command (e.g.: ["launch"], ["xctest", "run", "ui"])
     * @param {string[]} [args=[]] additional idb arguments
     * @param {import('teen_process').SubProcessOptions} [opts={}]
     * @returns {import('teen_process').SubProcess}
     */
    function createSubProcess(this: import("../idb.js").default, command?: string[] | undefined, args?: string[] | undefined, opts?: import("teen_process").SubProcessOptions | undefined): import("teen_process").SubProcess;
}
//# sourceMappingURL=system-commands.d.ts.map
export default logCommands;
export type DeleteCrashLogOptions = {
    /**
     * - If present then only
     * this particular log is going to be deleted
     */
    name?: string | undefined;
    /**
     * - If set then only logs
     * before this date will be deleted
     */
    before?: string | undefined;
    /**
     * - If set then only logs
     * after this date will be deleted
     */
    since?: string | undefined;
    /**
     * - If set then all crash logs
     * are going to be deleted
     */
    all?: boolean | undefined;
};
declare namespace logCommands {
    /**
     * Fetches a list of crash logs present on the target
     *
     * @this {import('../idb.js').IDB}
     * @returns {Promise<any[]>} The list of fetched logs or an empty array
     */
    function listCrashLogs(this: import("../idb.js").default, opts?: {}): Promise<any[]>;
    /**
     * Fetches the crash log with the specified name
     *
     * @this {import('../idb.js').IDB}
     * @param {string} name The name of the log to fetch
     * @returns {Promise<string>} The content of the log
     */
    function fetchCrashLog(this: import("../idb.js").default, name: string): Promise<string>;
    /**
     * @typedef {Object} DeleteCrashLogOptions
     *
     * @property {string} [name] - If present then only
     * this particular log is going to be deleted
     * @property {string} [before] - If set then only logs
     * before this date will be deleted
     * @property {string} [since] - If set then only logs
     * after this date will be deleted
     * @property {boolean} [all] - If set then all crash logs
     * are going to be deleted
     */
    /**
     * Deletes crash logs
     *
     * @this {import('../idb.js').IDB}
     * @param {DeleteCrashLogOptions} opts
     */
    function deleteCrashLogs(this: import("../idb.js").default, opts?: DeleteCrashLogOptions): Promise<void>;
}
//# sourceMappingURL=crashlog-commands.d.ts.map
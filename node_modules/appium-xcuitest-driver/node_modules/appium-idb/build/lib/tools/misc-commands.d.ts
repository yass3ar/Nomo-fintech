export default miscCommands;
declare namespace miscCommands {
    /**
     * Returns metadata about the specified target.
     * Output example:
     * {
     *   udid: 'A9391B7A-3EAF-444E-B9A5-2504A2C48E6F',
     *   name: 'appium-idb-tests-630AAB3D-27CD-43D2-BD96-7720C42B1D54',
     *   target_type: 'simulator',
     *   state: 'Booted',
     *   os_version: 'iOS 13.7',
     *   architecture: 'x86_64',
     *   companion_info: {
     *     udid: 'A9391B7A-3EAF-444E-B9A5-2504A2C48E6F',
     *     is_local: true,
     *     pid: null,
     *     address: {
     *       path: '/tmp/idb/A9391B7A-3EAF-444E-B9A5-2504A2C48E6F_companion.sock'
     *     },
     *     metadata: {}
     *   },
     *   screen_dimensions: {
     *     width: 750,
     *     height: 1334,
     *     density: 2,
     *     width_points: 375,
     *     height_points: 667
     *   },
     *   model: null,
     *   device: null,
     *   extended: {},
     *   diagnostics: {},
     *   metadata: {}
     * }
     *
     * @this {import('../idb.js').IDB}
     * @returns {Promise<Record<string, any>>} The command output parsed to an object
     */
    function describeDevice(this: import("../idb.js").default): Promise<Record<string, any>>;
    /**
     * Brings a simulators window to the foreground.
     * @this {import('../idb.js').IDB}
     */
    function focusSimulator(this: import("../idb.js").default): Promise<void>;
    /**
     * Opens the specified URL on the target.
     * This works both with web addresses and URL schemes present on the target.
     *
     * @this {import('../idb.js').IDB}
     * @param {string} url The url to open
     */
    function openUrl(this: import("../idb.js").default, url: string): Promise<void>;
    /**
     * Clear the entire keychain on Simulator.
     * @this {import('../idb.js').IDB}
     */
    function clearKeychain(this: import("../idb.js").default): Promise<void>;
    /**
     * Overrides a simulators location
     *
     * @param {string|number} latitude The latitude value
     * @param {string|number} longitude The longitude value
     * @this {import('../idb.js').IDB}
     */
    function setLocation(this: import("../idb.js").default, latitude: string | number, longitude: string | number): Promise<void>;
    /**
     * Programmatically approve permission for an app on Simulator
     *
     * @this {import('../idb.js').IDB}
     * @param {string} bundleId Application identifier to set the permissions for
     * @param {string|string[]} permissions The permission(s) to apply. Can be
     * one of {photos,camera,camera}
     */
    function approve(this: import("../idb.js").default, bundleId: string, permissions: string | string[]): Promise<void>;
    /**
     * Overwrite the simulators contacts db
     *
     * @this {import('../idb.js').IDB}
     * @param {string} dbPath Full path to the SQLite db containing the contacts
     */
    function addContacts(this: import("../idb.js").default, dbPath: string): Promise<void>;
}
//# sourceMappingURL=misc-commands.d.ts.map
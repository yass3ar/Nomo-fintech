export default videoCommands;
export type VideoStreamingOptions = {
    /**
     * The number of millisecods to wait until
     * the video streaming starts.
     */
    timeoutMs?: number | undefined;
    /**
     * The number of frames that are produced by idb per second.
     * This can be arbitrarily large or small.
     * A higher frame rate will increase system utilization.
     * Increasing the fps may not result in smoother presentation, as an iOS Simulator
     * may be refreshing it's screen less frequently than the target frame rate.
     * Typically an iOS Simulator may not render transparencies at 60fps.
     * Default is a dynamic fps (not recommended).
     */
    fps?: number | undefined;
    /**
     * Represents the format of the video stream itself.
     * A variety of outputs are available:
     * - h264 This is an Annexe-B H.264 Stream
     * - rbga is a stream of raw RBGA bytes.
     * - mjpeg is an stream of encoed JPEG images, typically called MJPEG.
     * - minicap is format used by the minicap project. It's fundementally a MJPEG
     * stream with a header at the start of the stream and length headers per frame.
     */
    format: "h264" | "rbga" | "mjpeg" | "minicap";
    /**
     * 1.0 represents the quality level used for encoded frames,
     * this is a value between 0.0 and 1.0. It applies to all formats except for the raw rbga format.
     */
    compressionQuality?: number | undefined;
    /**
     * The scale factor for the source video (between 0 and 1.0) for the stream
     */
    scaleFactor?: number | undefined;
    /**
     * The target .mp4 file for the h264-encoded output.
     * When omitted, the stream will be written to stdout.
     */
    outputFile?: string | undefined;
};
declare namespace videoCommands {
    /**
     * @typedef {Object} VideoStreamingOptions
     *
     * @property {number} [timeoutMs=30000] The number of millisecods to wait until
     * the video streaming starts.
     * @property {number} [fps] The number of frames that are produced by idb per second.
     * This can be arbitrarily large or small.
     * A higher frame rate will increase system utilization.
     * Increasing the fps may not result in smoother presentation, as an iOS Simulator
     * may be refreshing it's screen less frequently than the target frame rate.
     * Typically an iOS Simulator may not render transparencies at 60fps.
     * Default is a dynamic fps (not recommended).
     * @property {'h264'|'rbga'|'mjpeg'|'minicap'} format Represents the format of the video stream itself.
     * A variety of outputs are available:
     * - h264 This is an Annexe-B H.264 Stream
     * - rbga is a stream of raw RBGA bytes.
     * - mjpeg is an stream of encoed JPEG images, typically called MJPEG.
     * - minicap is format used by the minicap project. It's fundementally a MJPEG
     * stream with a header at the start of the stream and length headers per frame.
     * @property {number} [compressionQuality=1.0] 1.0 represents the quality level used for encoded frames,
     * this is a value between 0.0 and 1.0. It applies to all formats except for the raw rbga format.
     * @property {number} [scaleFactor=1.0] The scale factor for the source video (between 0 and 1.0) for the stream
     * @property {string} [outputFile] The target .mp4 file for the h264-encoded output.
     * When omitted, the stream will be written to stdout.
     */
    /**
     * Runs video streaming from device or simulator
     *
     * @see https://fbidb.io/docs/video/
     * @this {import('../idb.js').IDB}
     * @param {VideoStreamingOptions} opts
     * @returns {Promise<import('node:child_process').ChildProcessWithoutNullStreams>}
     */
    function startVideoStream(this: import("../idb.js").default, opts: VideoStreamingOptions): Promise<import("node:child_process").ChildProcessWithoutNullStreams>;
    /**
     * Stops video streaming from device or simulator
     *
     * @see https://fbidb.io/docs/video/
     * @this {import('../idb.js').IDB}
     * @param {import('node:child_process').ChildProcessWithoutNullStreams?} [process] If provided
     * then only this process will be killed, otherwise all matching idb video streaming processes
     * for the particluar device udid will be terminated via SIGINT.
     */
    function stopVideoStream(this: import("../idb.js").default, process?: import("child_process").ChildProcessWithoutNullStreams | null | undefined): Promise<void>;
}
//# sourceMappingURL=video-commands.d.ts.map
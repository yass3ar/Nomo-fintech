"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_COMPANION_PORT = exports.DEFAULT_IDB_PORT = exports.IDB_COMPANION_EXECUTABLE = exports.IDB_EXECUTABLE = exports.DEFAULT_IDB_EXEC_TIMEOUT = void 0;
exports.getPids = getPids;
exports.fixOutputToArray = fixOutputToArray;
exports.convertToIDBEnv = convertToIDBEnv;
const lodash_1 = __importDefault(require("lodash"));
const teen_process_1 = require("teen_process");
const DEFAULT_IDB_EXEC_TIMEOUT = 20000; // in milliseconds
exports.DEFAULT_IDB_EXEC_TIMEOUT = DEFAULT_IDB_EXEC_TIMEOUT;
const DEFAULT_IDB_PORT = 9889;
exports.DEFAULT_IDB_PORT = DEFAULT_IDB_PORT;
const IDB_EXECUTABLE = 'idb';
exports.IDB_EXECUTABLE = IDB_EXECUTABLE;
const IDB_COMPANION_EXECUTABLE = 'idb_companion';
exports.IDB_COMPANION_EXECUTABLE = IDB_COMPANION_EXECUTABLE;
const DEFAULT_COMPANION_PORT = 10880;
exports.DEFAULT_COMPANION_PORT = DEFAULT_COMPANION_PORT;
const IDB_ENV_PREFIX = 'IDB_';
/**
 * @typedef {Object} PidLookupOptions
 *
 * @property {boolean} [multi=true] - Set it to true if multiple matching
 * pids are expected to be found. Only the newest process id is going to
 * be returned instead
 * @property {boolean} [ignoreCase=true] - Set it to false to make the search
 * case-sensitive
 */
/**
 * Get the process id of the most recent running application
 * having the particular command line pattern.
 *
 * @param {string} pattern - pgrep-compatible search pattern.
 * @param {Partial<PidLookupOptions>} opts
 * @return {Promise<string[]|string>} An array of process ids as strings
 * or an empty array
 */
async function getPids(pattern, opts = {}) {
    const { multi = true, ignoreCase = true, } = opts;
    const args = [`-${ignoreCase ? 'i' : ''}f${multi ? '' : 'n'}`, pattern];
    try {
        const { stdout } = await (0, teen_process_1.exec)('pgrep', args);
        const result = stdout.split('\n')
            .filter(Number)
            .map((x) => `${x}`);
        return multi ? result : (lodash_1.default.isEmpty(result) ? [] : result[0]);
    }
    catch (err) {
        return [];
    }
}
/**
 * Converts an env object to the format what IDB process expects
 * @param {Record<string, any>?} env The object of environment variables
 * @return {Record<string, any>?}
 */
function convertToIDBEnv(env) {
    if (!lodash_1.default.isPlainObject(env) || lodash_1.default.isEmpty(env)) {
        return null;
    }
    return lodash_1.default.reduce(env, (result, value, key) => {
        result[IDB_ENV_PREFIX + key] = value;
        return result;
    }, {});
}
/**
 * Some idb commands don't properly format their
 * output if `--json` argument is provided. This helper
 * fixes the original output, so it can be represented as
 * a valid array.
 *
 * @param {string} output The original command output
 * @returns {any[]} Array of objects or an empty array
 */
function fixOutputToArray(output) {
    if (!lodash_1.default.trim(output)) {
        return [];
    }
    return output.split('\n')
        .reduce((acc, x) => {
        try {
            return [...acc, JSON.parse(x)];
        }
        catch (e) {
            return acc;
        }
    }, []);
}
//# sourceMappingURL=helpers.js.map
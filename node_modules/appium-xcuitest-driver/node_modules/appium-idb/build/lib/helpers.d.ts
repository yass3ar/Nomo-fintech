export type PidLookupOptions = {
    /**
     * - Set it to true if multiple matching
     * pids are expected to be found. Only the newest process id is going to
     * be returned instead
     */
    multi?: boolean | undefined;
    /**
     * - Set it to false to make the search
     * case-sensitive
     */
    ignoreCase?: boolean | undefined;
};
export const DEFAULT_IDB_EXEC_TIMEOUT: 20000;
/**
 * @typedef {Object} PidLookupOptions
 *
 * @property {boolean} [multi=true] - Set it to true if multiple matching
 * pids are expected to be found. Only the newest process id is going to
 * be returned instead
 * @property {boolean} [ignoreCase=true] - Set it to false to make the search
 * case-sensitive
 */
/**
 * Get the process id of the most recent running application
 * having the particular command line pattern.
 *
 * @param {string} pattern - pgrep-compatible search pattern.
 * @param {Partial<PidLookupOptions>} opts
 * @return {Promise<string[]|string>} An array of process ids as strings
 * or an empty array
 */
export function getPids(pattern: string, opts?: Partial<PidLookupOptions>): Promise<string[] | string>;
export const IDB_EXECUTABLE: "idb";
export const IDB_COMPANION_EXECUTABLE: "idb_companion";
export const DEFAULT_IDB_PORT: 9889;
export const DEFAULT_COMPANION_PORT: 10880;
/**
 * Some idb commands don't properly format their
 * output if `--json` argument is provided. This helper
 * fixes the original output, so it can be represented as
 * a valid array.
 *
 * @param {string} output The original command output
 * @returns {any[]} Array of objects or an empty array
 */
export function fixOutputToArray(output: string): any[];
/**
 * Converts an env object to the format what IDB process expects
 * @param {Record<string, any>?} env The object of environment variables
 * @return {Record<string, any>?}
 */
export function convertToIDBEnv(env: Record<string, any> | null): Record<string, any> | null;
//# sourceMappingURL=helpers.d.ts.map
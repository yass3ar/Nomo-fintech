export default IDB;
export type IdbExecutable = {
    path: string;
    port?: number | null | undefined;
    grpcPort?: number | null | undefined;
    defaultArgs: string[];
};
export type IdbCompanion = {
    path: string;
    port?: number | null | undefined;
    grpcPort?: number | null | undefined;
    logPath?: string | null | undefined;
};
/**
 * @typedef {Object} IdbExecutable
 * @property {string} path
 * @property {number?} [port]
 * @property {number?} [grpcPort]
 * @property {string[]} defaultArgs
 */
/**
 * @typedef {Object} IdbCompanion
 * @property {string} path
 * @property {number?} [port]
 * @property {number?} [grpcPort]
 * @property {string?} [logPath]
 */
export class IDB {
    constructor(opts?: {});
    /** @type {string} */
    udid: string;
    /** @type {string|undefined} */
    logLevel: string | undefined;
    /** @type {number} */
    execTimeout: number;
    /** @type {boolean} */
    verbose: boolean;
    /** @type {IdbExecutable} */
    executable: IdbExecutable;
    /** @type {IdbCompanion} */
    companion: IdbCompanion;
    /** @type {(cmd: string[], args?: string [], opts?: import('teen_process').TeenProcessExecOptions & {timeoutCapName?: string}) => Promise<string>} */
    exec: (cmd: string[], args?: string[], opts?: import("teen_process").TeenProcessExecOptions & {
        timeoutCapName?: string;
    }) => Promise<string>;
    /** @type {() => Promise<void>} */
    disconnect: () => Promise<void>;
    /** @type {(timeout?: number) => Promise<void>} */
    waitForDevice: (timeout?: number) => Promise<void>;
    /** @type {(command?: string[], args?: string[], opts?: import('teen_process').SubProcessOptions) => import('teen_process').SubProcess} */
    createSubProcess: (command?: string[], args?: string[], opts?: import("teen_process").SubProcessOptions) => import("teen_process").SubProcess;
}
//# sourceMappingURL=idb.d.ts.map
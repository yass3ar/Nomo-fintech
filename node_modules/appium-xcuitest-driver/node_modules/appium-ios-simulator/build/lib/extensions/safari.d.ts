/**
 * Open the given URL in mobile Safari browser.
 * The browser will be started automatically if it is not running.
 *
 * @this {CoreSimulatorWithSafariBrowser}
 * @param {string} url
 */
export function openUrl(this: CoreSimulatorWithSafariBrowser, url: string): Promise<void>;
/**
 * Clean up the directories for mobile Safari.
 * Safari will be terminated if it is running.
 *
 * @this {CoreSimulatorWithSafariBrowser}
 * @param {boolean} keepPrefs - Whether to keep Safari preferences from being deleted.
 */
export function scrubSafari(this: CoreSimulatorWithSafariBrowser, keepPrefs?: boolean): Promise<void>;
/**
 * Updates variious Safari settings. Simulator must be booted in order to for it
 * to success.
 *
 * @this {CoreSimulatorWithSafariBrowser}
 * @param {import('@appium/types').StringRecord} updates An object containing Safari settings to be updated.
 * The list of available setting names and their values could be retrived by
 * changing the corresponding Safari settings in the UI and then inspecting
 * 'Library/Preferences/com.apple.mobilesafari.plist' file inside of
 * com.apple.mobilesafari app container.
 * The full path to the Mobile Safari's container could be retrieved from
 * `xcrun simctl get_app_container <sim_udid> com.apple.mobilesafari data`
 * command output.
 * Use the `xcrun simctl spawn <sim_udid> defaults read <path_to_plist>` command
 * to print the plist content to the Terminal.
 * @returns {Promise<boolean>}
 */
export function updateSafariSettings(this: CoreSimulatorWithSafariBrowser, updates: import("@appium/types").StringRecord): Promise<boolean>;
/**
 * @this {CoreSimulatorWithSafariBrowser}
 * @returns {Promise<string|null>}
 */
export function getWebInspectorSocket(this: CoreSimulatorWithSafariBrowser): Promise<string | null>;
export class getWebInspectorSocket {
    _webInspectorSocket: string | undefined;
}
export type CoreSimulatorWithSafariBrowser = import("../types").CoreSimulator & import("../types").InteractsWithSafariBrowser & import("../types").InteractsWithApps & import("../types").HasSettings;
//# sourceMappingURL=safari.d.ts.map
/**
 * Sets the particular permission to the application bundle. See https://github.com/wix/AppleSimulatorUtils
 * or `xcrun simctl privacy` for more details on the available service names and statuses.
 *
 * @this {CoreSimulatorWithAppPermissions}
 * @param {string} bundleId - Application bundle identifier.
 * @param {string} permission - Service name to be set.
 * @param {string} value - The desired status for the service.
 * @throws {Error} If there was an error while changing permission.
 */
export function setPermission(this: CoreSimulatorWithAppPermissions, bundleId: string, permission: string, value: string): Promise<void>;
/**
 * Sets the permissions for the particular application bundle.
 *
 * @this {CoreSimulatorWithAppPermissions}
 * @param {string} bundleId - Application bundle identifier.
 * @param {Object} permissionsMapping - A mapping where kays
 * are service names and values are their corresponding status values.
 * See https://github.com/wix/AppleSimulatorUtils or `xcrun simctl privacy`
 * for more details on available service names and statuses.
 * @throws {Error} If there was an error while changing permissions.
 */
export function setPermissions(this: CoreSimulatorWithAppPermissions, bundleId: string, permissionsMapping: any): Promise<void>;
/**
 * Retrieves current permission status for the given application bundle.
 *
 * @this {CoreSimulatorWithAppPermissions}
 * @param {string} bundleId - Application bundle identifier.
 * @param {string} serviceName - One of available service names.
 * @returns {Promise<string>}
 * @throws {Error} If there was an error while retrieving permissions.
 */
export function getPermission(this: CoreSimulatorWithAppPermissions, bundleId: string, serviceName: string): Promise<string>;
export type CoreSimulatorWithAppPermissions = import("../types").CoreSimulator & import("../types").SupportsAppPermissions;
//# sourceMappingURL=permissions.d.ts.map
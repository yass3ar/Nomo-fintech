/**
 * Install valid .app package on Simulator.
 *
 * @this {CoreSimulatorWithApps}
 * @param {string} app - The path to the .app package.
 */
export function installApp(this: CoreSimulatorWithApps, app: string): Promise<void>;
/**
 * Returns user installed bundle ids which has 'bundleName' in their Info.Plist as 'CFBundleName'
 *
 * @this {CoreSimulatorWithApps}
 * @param {string} bundleName - The bundle name of the application to be checked.
 * @return {Promise<string[]>} - The list of bundle ids which have 'bundleName'
 */
export function getUserInstalledBundleIdsByBundleName(this: CoreSimulatorWithApps, bundleName: string): Promise<string[]>;
/**
 * Verify whether the particular application is installed on Simulator.
 *
 * @this {CoreSimulatorWithApps}
 * @param {string} bundleId - The bundle id of the application to be checked.
 * @return {Promise<boolean>} True if the given application is installed.
 */
export function isAppInstalled(this: CoreSimulatorWithApps, bundleId: string): Promise<boolean>;
/**
 * Uninstall the given application from the current Simulator.
 *
 * @this {CoreSimulatorWithApps}
 * @param {string} bundleId - The buindle ID of the application to be removed.
 */
export function removeApp(this: CoreSimulatorWithApps, bundleId: string): Promise<void>;
/**
 * Starts the given application on Simulator
 *
 * @this {CoreSimulatorWithApps}
 * @param {string} bundleId - The buindle ID of the application to be launched
 * @param {import('../types').LaunchAppOptions} [opts={}]
 */
export function launchApp(this: CoreSimulatorWithApps, bundleId: string, opts?: import("../types").LaunchAppOptions | undefined): Promise<void>;
/**
 * Stops the given application on  Simulator.
 *
 * @this {CoreSimulatorWithApps}
 * @param {string} bundleId - The buindle ID of the application to be stopped
 */
export function terminateApp(this: CoreSimulatorWithApps, bundleId: string): Promise<void>;
/**
 * Check if app with the given identifier is running.
 *
 * @this {CoreSimulatorWithApps}
 * @param {string} bundleId - The buindle ID of the application to be checked.
 */
export function isAppRunning(this: CoreSimulatorWithApps, bundleId: string): Promise<boolean>;
/**
 * Scrub (delete the preferences and changed files) the particular application on Simulator.
 * The app will be terminated automatically if it is running.
 *
 * @this {CoreSimulatorWithApps}
 * @param {string} bundleId - Bundle identifier of the application.
 * @throws {Error} if the given app is not installed.
 */
export function scrubApp(this: CoreSimulatorWithApps, bundleId: string): Promise<void>;
export type CoreSimulatorWithApps = import("../types").CoreSimulator & import("../types").InteractsWithApps;
//# sourceMappingURL=applications.d.ts.map
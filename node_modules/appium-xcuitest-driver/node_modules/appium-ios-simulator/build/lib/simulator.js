"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSimulator = getSimulator;
const simulator_xcode_10_1 = require("./simulator-xcode-10");
const simulator_xcode_11_1 = require("./simulator-xcode-11");
const simulator_xcode_11_4_1 = require("./simulator-xcode-11.4");
const simulator_xcode_14_1 = require("./simulator-xcode-14");
const simulator_xcode_15_1 = require("./simulator-xcode-15");
const utils_1 = require("./utils");
const appium_xcode_1 = __importDefault(require("appium-xcode"));
const logger_1 = require("./logger");
const MIN_SUPPORTED_XCODE_VERSION = 10;
/**
 * @template {import('appium-xcode').XcodeVersion} V
 * @param {V} xcodeVersion
 * @returns {V}
 */
function handleUnsupportedXcode(xcodeVersion) {
    if (xcodeVersion.major < MIN_SUPPORTED_XCODE_VERSION) {
        throw new Error(`Tried to use an iOS simulator with xcode version ${xcodeVersion.versionString} but only Xcode version ` +
            `${MIN_SUPPORTED_XCODE_VERSION} and up are supported`);
    }
    return xcodeVersion;
}
/**
 * Finds and returns the corresponding Simulator instance for the given ID.
 *
 * @param {string} udid - The ID of an existing Simulator.
 * @param {import('./types').SimulatorLookupOptions} [opts={}]
 * @throws {Error} If the Simulator with given udid does not exist in devices list.
 *   If you want to create a new simulator, you can use the `createDevice()` method of
 *   [node-simctl](github.com/appium/node-simctl).
 * @return {Promise<import('./types').Simulator>} Simulator object associated with the udid passed in.
 */
async function getSimulator(udid, opts = {}) {
    let { platform = 'iOS', checkExistence = true, devicesSetPath, logger, } = opts;
    const xcodeVersion = handleUnsupportedXcode(
    /** @type {import('appium-xcode').XcodeVersion} */ (await appium_xcode_1.default.getVersion(true)));
    if (checkExistence) {
        const simulatorInfo = await (0, utils_1.getSimulatorInfo)(udid, {
            devicesSetPath
        });
        if (!simulatorInfo) {
            throw new Error(`No sim found with udid '${udid}'`);
        }
        platform = simulatorInfo.platform;
    }
    (logger ?? logger_1.log).info(`Constructing ${platform} simulator for Xcode version ${xcodeVersion.versionString} with udid '${udid}'`);
    let SimClass;
    switch (xcodeVersion.major) {
        case MIN_SUPPORTED_XCODE_VERSION:
            SimClass = simulator_xcode_10_1.SimulatorXcode10;
            break;
        case 11:
            SimClass = xcodeVersion.minor < 4 ? simulator_xcode_11_1.SimulatorXcode11 : simulator_xcode_11_4_1.SimulatorXcode11_4;
            break;
        case 12:
        case 13:
            SimClass = simulator_xcode_11_4_1.SimulatorXcode11_4;
            break;
        case 14:
            SimClass = simulator_xcode_14_1.SimulatorXcode14;
            break;
        case 15:
        default:
            SimClass = simulator_xcode_15_1.SimulatorXcode15;
            break;
    }
    const result = new SimClass(udid, xcodeVersion, logger);
    if (devicesSetPath) {
        result.devicesSetPath = devicesSetPath;
    }
    return result;
}
//# sourceMappingURL=simulator.js.map
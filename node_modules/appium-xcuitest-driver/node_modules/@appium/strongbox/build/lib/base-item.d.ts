import type { Item, ItemEncoding, Strongbox, Value } from '.';
/**
 * Base item implementation
 *
 * @remarks This class is not intended to be instantiated directly
 * @typeParam T - Type of data stored in the `Item`
 */
export declare class BaseItem<T extends Value, U extends Strongbox = Strongbox> implements Item<T> {
    readonly name: string;
    readonly encoding: ItemEncoding;
    /**
     * {@inheritdoc Item.value}
     */
    protected _value?: T | undefined;
    /**
     * Parent Strongbox instance
     */
    readonly container: string;
    /**
     * Unique slugified identifier
     */
    readonly id: string;
    /**
     * {@inheritdoc Item.value}
     */
    readonly value: T | undefined;
    /**
     * Slugifies the name
     * @param name Name of instance
     * @param parent Parent Strongbox
     * @param encoding Defaults to `utf8`
     */
    constructor(name: string, parent: U, encoding?: ItemEncoding);
    /**
     * {@inheritdoc Item.clear}
     */
    clear(): Promise<void>;
    /**
     * {@inheritdoc Item.read}
     */
    read(): Promise<T | undefined>;
    /**
     * {@inheritdoc Item.write}
     */
    write(value: T): Promise<void>;
}
//# sourceMappingURL=base-item.d.ts.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseItem = void 0;
const promises_1 = require("node:fs/promises");
const node_path_1 = __importDefault(require("node:path"));
const util_1 = require("./util");
/**
 * Base item implementation
 *
 * @remarks This class is not intended to be instantiated directly
 * @typeParam T - Type of data stored in the `Item`
 */
class BaseItem {
    /**
     * Slugifies the name
     * @param name Name of instance
     * @param parent Parent Strongbox
     * @param encoding Defaults to `utf8`
     */
    constructor(name, parent, encoding = 'utf8') {
        this.name = name;
        this.encoding = encoding;
        this.container = parent.container;
        this.id = node_path_1.default.join(this.container, (0, util_1.slugify)(name));
        Object.defineProperties(this, {
            value: {
                get() {
                    return this._value;
                },
                enumerable: true,
            },
            _value: {
                enumerable: false,
                writable: true,
            },
        });
    }
    /**
     * {@inheritdoc Item.clear}
     */
    async clear() {
        try {
            await (0, promises_1.unlink)(this.id);
            this._value = undefined;
        }
        catch (e) {
            if (e.code !== 'ENOENT') {
                throw e;
            }
        }
    }
    /**
     * {@inheritdoc Item.read}
     */
    async read() {
        try {
            this._value = (await (0, promises_1.readFile)(this.id, {
                encoding: this.encoding,
            }));
        }
        catch (e) {
            if (e.code !== 'ENOENT') {
                throw e;
            }
        }
        return this._value;
    }
    /**
     * {@inheritdoc Item.write}
     */
    async write(value) {
        if (this._value !== value) {
            await (0, promises_1.mkdir)(node_path_1.default.dirname(this.id), { recursive: true });
            await (0, promises_1.writeFile)(this.id, value, this.encoding);
            this._value = value;
        }
    }
}
exports.BaseItem = BaseItem;
//# sourceMappingURL=base-item.js.map